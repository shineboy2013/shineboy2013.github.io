<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jiajie&#39;s blog</title>
  
  <subtitle>每天积累多一些</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shineboy2013.github.com/"/>
  <updated>2021-10-30T08:18:48.297Z</updated>
  <id>https://shineboy2013.github.com/</id>
  
  <author>
    <name>KK Shum</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Stack</title>
    <link href="https://shineboy2013.github.com/2021/10/30/stack/"/>
    <id>https://shineboy2013.github.com/2021/10/30/stack/</id>
    <published>2021-10-30T08:10:59.930Z</published>
    <updated>2021-10-30T08:18:48.297Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a><strong>算法思路：</strong></h3><p>定义： 栈里元素维持由栈底到栈顶从大到小的顺序叫递减栈<br><img src="/images/stack.png" alt="">  </p><p>反之是递增栈，不过此法因为用递减栈比较多，所以统称递减栈。  </p><h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a><strong>应用：</strong></h3><ol><li>数组不能打乱顺序且求极值</li></ol><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;算法思路：&quot;&gt;&lt;a href=&quot;#算法思路：&quot; class=&quot;headerlink&quot; title=&quot;算法思路：&quot;&gt;&lt;/a&gt;&lt;strong&gt;算法思路：&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;定义： 栈里元素维持由栈底到栈顶从大到小的顺序叫递减栈&lt;br&gt;&lt;img src=&quot;
      
    
    </summary>
    
    
      <category term="Knowledge Base" scheme="https://shineboy2013.github.com/tags/Knowledge-Base/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 017 Letter Combinations of a Phone Number</title>
    <link href="https://shineboy2013.github.com/2021/10/21/lee-017/"/>
    <id>https://shineboy2013.github.com/2021/10/21/lee-017/</id>
    <published>2021-10-21T08:32:45.432Z</published>
    <updated>2021-10-21T19:57:30.248Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener">LeetCode 017 Letter Combinations of a Phone Number</a></strong></p><p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent. Return the answer in <strong>any order</strong>.</p><p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt=""></p><p><strong>Example 1:</strong></p><pre>**Input:** digits = "23"**Output:** ["ad","ae","af","bd","be","bf","cd","ce","cf"]</pre><p><strong>Example 2:</strong></p><pre>**Input:** digits = ""**Output:** []</pre><p><strong>Example 3:</strong></p><pre>**Input:** digits = "2"**Output:** ["a","b","c"]</pre><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= digits.length &lt;= 4</code></li><li><code>digits[i]</code> is a digit in the range <code>[&#39;2&#39;, &#39;9&#39;]</code>.</li></ul><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>在拨号键盘上按下了几个键，问能打出来的字符串的所有组合是多少。。</p><h3 id="递归法解题思路："><a href="#递归法解题思路：" class="headerlink" title="递归法解题思路："></a><strong>递归法解题思路：</strong></h3><p>DFS的典型题目。  </p><p>与Java的区别：  </p><ol><li>直接用Str作为临时结果，不需要用char array，因为str可以含有array的性质  </li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>输入值为空的情况  </li><li>终止条件记得return</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">letterCombinations</span><span class="params">(self, digits: str)</span> -&gt; List[str]:</span></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">if</span> digits == <span class="string">''</span>:</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">digit2char = &#123;</span><br><span class="line"><span class="string">'0'</span>: <span class="string">''</span>,</span><br><span class="line"><span class="string">'1'</span>: <span class="string">''</span>,</span><br><span class="line"><span class="string">'2'</span>: <span class="string">'abc'</span>,</span><br><span class="line"><span class="string">'3'</span>: <span class="string">'def'</span>,</span><br><span class="line"><span class="string">'4'</span>: <span class="string">'ghi'</span>,</span><br><span class="line"><span class="string">'5'</span>: <span class="string">'jkl'</span>,</span><br><span class="line"><span class="string">'6'</span>: <span class="string">'mno'</span>,</span><br><span class="line"><span class="string">'7'</span>: <span class="string">'pqrs'</span>,</span><br><span class="line"><span class="string">'8'</span>: <span class="string">'tuv'</span>,</span><br><span class="line"><span class="string">'9'</span>: <span class="string">'wxyz'</span>,</span><br><span class="line">&#125;</span><br><span class="line">self.dfs(digits, <span class="number">0</span>, <span class="string">''</span>, result, digit2char)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, digits, start, path, result, digit2char)</span>:</span></span><br><span class="line"><span class="keyword">if</span> start == len(digits):</span><br><span class="line">result.append(path)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> digit2char[digits[start]]:</span><br><span class="line">self.dfs(digits, start + <span class="number">1</span>, path + letter, result, digit2char)</span><br></pre></td></tr></table></figure><h3 id="迭代法解题思路："><a href="#迭代法解题思路：" class="headerlink" title="迭代法解题思路："></a><strong>迭代法解题思路：</strong></h3><p>第二种方法，用迭代法，三种循环，输入数字串的每个数字，每个数字对应的字符加到当前的结果字符串列表中。 </p><h3 id="注意事项：-1"><a href="#注意事项：-1" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>要[‘’]而不是[]否则循环不会进行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">letterCombinations</span><span class="params">(self, digits: str)</span> -&gt; List[str]:</span></span><br><span class="line"><span class="keyword">if</span> digits == <span class="string">''</span>:</span><br><span class="line"><span class="keyword">return</span> []</span><br><span class="line">digit2char = &#123;</span><br><span class="line"><span class="string">'0'</span>: <span class="string">''</span>,</span><br><span class="line"><span class="string">'1'</span>: <span class="string">''</span>,</span><br><span class="line"><span class="string">'2'</span>: <span class="string">'abc'</span>,</span><br><span class="line"><span class="string">'3'</span>: <span class="string">'def'</span>,</span><br><span class="line"><span class="string">'4'</span>: <span class="string">'ghi'</span>,</span><br><span class="line"><span class="string">'5'</span>: <span class="string">'jkl'</span>,</span><br><span class="line"><span class="string">'6'</span>: <span class="string">'mno'</span>,</span><br><span class="line"><span class="string">'7'</span>: <span class="string">'pqrs'</span>,</span><br><span class="line"><span class="string">'8'</span>: <span class="string">'tuv'</span>,</span><br><span class="line"><span class="string">'9'</span>: <span class="string">'wxyz'</span>,</span><br><span class="line">&#125;</span><br><span class="line">result = [<span class="string">''</span>]</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> digits:</span><br><span class="line">result = [s + c <span class="keyword">for</span> s <span class="keyword">in</span> result <span class="keyword">for</span> c <span class="keyword">in</span> digit2char[d]]</span><br><span class="line"><span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>这是NP问题。时间复杂度为<code>O(<em>4</em><sup>n</sup>)</code>，空间复杂度<code>O(1)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/letter-combinations-of-a-phone-number/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 017 Letter
      
    
    </summary>
    
    
      <category term="Hash Table" scheme="https://shineboy2013.github.com/tags/Hash-Table/"/>
    
      <category term="String" scheme="https://shineboy2013.github.com/tags/String/"/>
    
      <category term="Backtracking" scheme="https://shineboy2013.github.com/tags/Backtracking/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 007 Reverse Integer</title>
    <link href="https://shineboy2013.github.com/2021/10/21/lee-007/"/>
    <id>https://shineboy2013.github.com/2021/10/21/lee-007/</id>
    <published>2021-10-21T08:13:52.713Z</published>
    <updated>2021-10-21T19:58:19.512Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/reverse-integer/" target="_blank" rel="noopener">LeetCode 007 Reverse Integer</a></strong></p><p>Given a signed 32-bit integer <code>x</code>, return <code>x</code> <em>with its digits reversed</em>. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range <code>[-2&lt;sup&gt;31&lt;/sup&gt;, 2&lt;sup&gt;31&lt;/sup&gt; - 1]</code>, then return <code>0</code>.</p><p><strong>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</strong></p><p><strong>Example 1:</strong></p><pre>**Input:** x = 123**Output:** 321</pre><p><strong>Example 2:</strong></p><pre>**Input:** x = -123**Output:** -321</pre><p><strong>Example 3:</strong></p><pre>**Input:** x = 120**Output:** 21</pre><p><strong>Example 4:</strong></p><pre>**Input:** x = 0**Output:** 0</pre><p><strong>Constraints:</strong></p><ul><li><code>-2&lt;sup&gt;31&lt;/sup&gt; &lt;= x &lt;= 2&lt;sup&gt;31&lt;/sup&gt; - 1</code></li></ul><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>反转整数中的数字。</p><h3 id="数学法解题思路："><a href="#数学法解题思路：" class="headerlink" title="数学法解题思路："></a><strong>数学法解题思路：</strong></h3><p>用数学方法每位取余，余数左移。另一种方法是转成字符串然后用字符串反转的方法。  </p><p>与Java的区别：  </p><ol><li>不需要定义long，因为Python3所有int默认都是long  </li><li>反转str一行完成，非常简洁  </li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>负值  </li><li>溢出    </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line">res, is_negative = <span class="number">0</span>, <span class="keyword">False</span></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">is_negative = <span class="keyword">True</span></span><br><span class="line">x = -x</span><br><span class="line"><span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">digit = x % <span class="number">10</span></span><br><span class="line">res = res * <span class="number">10</span> + digit</span><br><span class="line">x //= <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> res &gt; pow(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> is_negative:</span><br><span class="line">res = -res</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="字符串法解题思路："><a href="#字符串法解题思路：" class="headerlink" title="字符串法解题思路："></a><strong>字符串法解题思路：</strong></h3><p>转为字符串，然后反转。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line">res, is_negative = <span class="number">0</span>, <span class="keyword">False</span></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">is_negative = <span class="keyword">True</span></span><br><span class="line">x = -x</span><br><span class="line">res = int(str(x)[::<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">if</span> res &gt; pow(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> -res <span class="keyword">if</span> is_negative <span class="keyword">else</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><ol><li>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>。  </li><li>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-integer/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 007 Reverse Integer&lt;/a&gt;&lt;/strong&gt;
      
    
    </summary>
    
    
      <category term="Math" scheme="https://shineboy2013.github.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 104 Maximum Depth of Binary Tree</title>
    <link href="https://shineboy2013.github.com/2021/07/27/lee-104/"/>
    <id>https://shineboy2013.github.com/2021/07/27/lee-104/</id>
    <published>2021-07-28T04:03:44.554Z</published>
    <updated>2021-07-28T03:56:51.226Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noopener">LeetCode 104 Maximum Depth of Binary Tree</a></strong></p><p>Given the <code>root</code> of a binary tree, return <em>its maximum depth</em>.</p><p>A binary tree’s <strong>maximum depth</strong> is the number of nodes along the longest path from the root node down to the farthest leaf node.</p><p><strong>Example 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg" alt=""></p><pre>**Input:** root = [3,9,20,null,null,15,7]**Output:** 3</pre><p><strong>Example 2:</strong></p><pre>**Input:** root = [1,null,2]**Output:** 2</pre><p><strong>Example 3:</strong></p><pre>**Input:** root = []**Output:** 0</pre><p><strong>Example 4:</strong></p><pre>**Input:** root = [0]**Output:** 1</pre><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is in the range <code>[0, 10&lt;sup&gt;4&lt;/sup&gt;]</code>.</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求二叉树高度。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>公式dfs(root)=1+max(dfs(root.left),dfs(root.right))  </p><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line"><span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + max(self.maxDepth(root.left), self.maxDepth(root.right))</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/maximum-depth-of-binary-tree/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 104 Maximum Depth o
      
    
    </summary>
    
    
      <category term="Tree" scheme="https://shineboy2013.github.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 003 Longest Substring Without Repeating Characters</title>
    <link href="https://shineboy2013.github.com/2021/07/27/lee-003/"/>
    <id>https://shineboy2013.github.com/2021/07/27/lee-003/</id>
    <published>2021-07-27T09:14:55.922Z</published>
    <updated>2021-10-20T19:56:42.312Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">LeetCode 003 Longest Substring Without Repeating Characters</a></strong></p><p>Given a string <code>s</code>, find the length of the <strong>longest substring</strong> without repeating characters.</p><p><strong>Example 1:</strong></p><pre>**Input:** s = "abcabcbb"**Output:** 3**Explanation:** The answer is "abc", with the length of 3.</pre><p><strong>Example 2:</strong></p><pre>**Input:** s = "bbbbb"**Output:** 1**Explanation:** The answer is "b", with the length of 1.</pre><p><strong>Example 3:</strong></p><pre>**Input:** s = "pwwkew"**Output:** 3**Explanation:** The answer is "wke", with the length of 3.Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.</pre><p><strong>Example 4:</strong></p><pre>**Input:** s = ""**Output:** 0</pre><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= s.length &lt;= 5 * 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>s</code> consists of English letters, digits, symbols and spaces.</li></ul><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求最长不重复子串。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>HashMap和滑动窗口法，利用HashMap来记录这个窗口中所有字符的下标，该窗口中所有字符都不重复。<br>start_idx表示窗口的左界，而i是右界。左界=上次一次出现该字符的下标和目前左界的较大值，<br>因为Map中的某些字符可能已经不在窗口中，我没有把它从窗口中去掉，而是用start_idx来限制。  </p><p>要计算长度就要先计算start_idx，步骤：  </p><ol><li>计算start_idx  </li><li>计算长度  </li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>start_idx和前值比较  </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">start_idx, max_len = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">char_map = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line"><span class="keyword">if</span> s[i] <span class="keyword">in</span> char_map:</span><br><span class="line">start_idx = max(start_idx, char_map[s[i]] + <span class="number">1</span>)</span><br><span class="line">max_len = max(max_len, i - start_idx + <span class="number">1</span>)</span><br><span class="line">char_map[s[i]] = i</span><br><span class="line"><span class="keyword">return</span> max_len</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-substring-without-repeating-characters/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 0
      
    
    </summary>
    
    
      <category term="Hash Table" scheme="https://shineboy2013.github.com/tags/Hash-Table/"/>
    
      <category term="String" scheme="https://shineboy2013.github.com/tags/String/"/>
    
      <category term="Sliding window" scheme="https://shineboy2013.github.com/tags/Sliding-window/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 138 Copy List with Random Pointer</title>
    <link href="https://shineboy2013.github.com/2021/07/27/lee-138/"/>
    <id>https://shineboy2013.github.com/2021/07/27/lee-138/</id>
    <published>2021-07-27T09:14:55.918Z</published>
    <updated>2021-10-21T19:58:51.943Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/copy-list-with-random-pointer/" target="_blank" rel="noopener">LeetCode 138 Copy List with Random Pointer</a></strong></p><p>A linked list of length <code>n</code> is given such that each node contains an additional random pointer, which could point to any node in the list, or <code>null</code>.</p><p>Construct a <a href="https://en.wikipedia.org/wiki/Object_copying#Deep_copy" target="_blank" rel="noopener"><strong>deep copy</strong></a> of the list. The deep copy should consist of exactly <code>n</code> <strong>brand new</strong> nodes, where each new node has its value set to the value of its corresponding original node. Both the <code>next</code> and <code>random</code> pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. <strong>None of the pointers in the new list should point to nodes in the original list</strong>.</p><p>For example, if there are two nodes <code>X</code> and <code>Y</code> in the original list, where <code>X.random --&gt; Y</code>, then for the corresponding two nodes <code>x</code> and <code>y</code> in the copied list, <code>x.random --&gt; y</code>.</p><p>Return <em>the head of the copied linked list</em>.</p><p>The linked list is represented in the input/output as a list of <code>n</code> nodes. Each node is represented as a pair of <code>[val, random_index]</code> where:</p><ul><li><code>val</code>: an integer representing <code>Node.val</code></li><li><code>random_index</code>: the index of the node (range from <code>0</code> to <code>n-1</code>) that the <code>random</code> pointer points to, or <code>null</code> if it does not point to any node.</li></ul><p>Your code will <strong>only</strong> be given the <code>head</code> of the original linked list.</p><p><strong>Example 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2019/12/18/e1.png" alt=""></p><pre>**Input:** head = [[7,null],[13,0],[11,4],[10,2],[1,0]]**Output:** [[7,null],[13,0],[11,4],[10,2],[1,0]]</pre><p><strong>Example 2:</strong></p><p><img src="https://assets.leetcode.com/uploads/2019/12/18/e2.png" alt=""></p><pre>**Input:** head = [[1,1],[2,1]]**Output:** [[1,1],[2,1]]</pre><p><strong>Example 3:</strong></p><p><strong><img src="https://assets.leetcode.com/uploads/2019/12/18/e3.png" alt=""></strong></p><pre>**Input:** head = [[3,null],[3,0],[3,null]]**Output:** [[3,null],[3,0],[3,null]]</pre><p><strong>Example 4:</strong></p><pre>**Input:** head = []**Output:** []**Explanation:** The given linked list is empty (null pointer), so return null.</pre><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= n &lt;= 1000</code></li><li><code>-10000 &lt;= Node.val &lt;= 10000</code></li><li><code>Node.random</code> is <code>null</code> or is pointing to some node in the linked list.</li></ul><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>复制含next和random的链表。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>先复制next指针，然后利用HashMap存储旧新节点，来复制random指针。  </p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>复制next指针和Map中</li><li>Random指针不空才copy</li><li>加it = it.next，否则死循环</li><li>如果创建新Node用while it.next表示用它的父节点，否则某个field赋值如random用while it</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copyRandomList</span><span class="params">(self, head: <span class="string">'Node'</span>)</span> -&gt; 'Node':</span></span><br><span class="line">node_map = &#123;&#125;</span><br><span class="line">fake_head, fake_head_copy = Node(<span class="number">0</span>), Node(<span class="number">0</span>)</span><br><span class="line">fake_head.next = head</span><br><span class="line">it, it_copy = fake_head, fake_head_copy</span><br><span class="line"><span class="keyword">while</span> it.next:</span><br><span class="line">        it_copy.next = Node(it.next.val)</span><br><span class="line">        node_map[it.next] = it_copy.next</span><br><span class="line">it, it_copy = it.next, it_copy.next</span><br><span class="line"></span><br><span class="line">it, it_copy = fake_head.next, fake_head_copy.next</span><br><span class="line"><span class="keyword">while</span> it:</span><br><span class="line"><span class="keyword">if</span> it.random:</span><br><span class="line">node_map[it].random = node_map[it.random]</span><br><span class="line">it, it_copy = it.next, it_copy.next</span><br><span class="line"><span class="keyword">return</span> fake_head_copy.next</span><br></pre></td></tr></table></figure><h3 id="梅花间竹解题思路："><a href="#梅花间竹解题思路：" class="headerlink" title="梅花间竹解题思路："></a><strong>梅花间竹解题思路：</strong></h3><p>第二种方法，梅花间竹，分3部走。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copyRandomList</span><span class="params">(self, head: <span class="string">'Node'</span>)</span> -&gt; 'Node':</span></span><br><span class="line">fake_head, fake_head_copy = Node(<span class="number">0</span>), Node(<span class="number">0</span>)</span><br><span class="line">fake_head.next = head</span><br><span class="line"></span><br><span class="line"><span class="comment"># insert</span></span><br><span class="line">it = fake_head.next</span><br><span class="line"><span class="keyword">while</span> it:</span><br><span class="line">temp = it.next</span><br><span class="line">it.next = Node(it.val)</span><br><span class="line">it.next.next = temp</span><br><span class="line">it = it.next.next</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy random</span></span><br><span class="line">it = fake_head.next</span><br><span class="line"><span class="keyword">while</span> it:</span><br><span class="line"><span class="keyword">if</span> it.random <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">it.next.random = it.random.next</span><br><span class="line">it = it.next.next</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete</span></span><br><span class="line">it, it_copy = fake_head.next, fake_head_copy</span><br><span class="line"><span class="keyword">while</span> it:</span><br><span class="line">temp = it.next</span><br><span class="line">it.next = it.next.next</span><br><span class="line">it_copy.next = temp</span><br><span class="line">temp.next = <span class="keyword">None</span></span><br><span class="line">it, it_copy = it.next, it_copy.next</span><br><span class="line"><span class="keyword">return</span> fake_head_copy.next</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><ol><li>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>。</li><li>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/copy-list-with-random-pointer/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 138 Copy List with
      
    
    </summary>
    
    
      <category term="Hash Table" scheme="https://shineboy2013.github.com/tags/Hash-Table/"/>
    
      <category term="Linked List" scheme="https://shineboy2013.github.com/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>Python知识点</title>
    <link href="https://shineboy2013.github.com/2021/06/07/kb-Python/"/>
    <id>https://shineboy2013.github.com/2021/06/07/kb-Python/</id>
    <published>2021-06-08T04:47:48.429Z</published>
    <updated>2021-11-11T09:16:36.343Z</updated>
    
    <content type="html"><![CDATA[<p><strong>常用知识点</strong></p><table><thead><tr><th>类型</th><th style="text-align:left">函数名</th><th style="text-align:left">作用</th><th style="text-align:left">输入参数</th><th style="text-align:left">返回值</th><th style="text-align:left">例子</th></tr></thead><tbody><tr><td>for</td><td style="text-align:left">range</td><td style="text-align:left">和len结合使用相当于取某范围List下标,第三个参数为步长</td><td style="text-align:left">N/A</td><td style="text-align:left">N/A</td><td style="text-align:left">for i in range(0, len(nums))前闭后开</td></tr><tr><td>for</td><td style="text-align:left">enumerate</td><td style="text-align:left">枚举List的下标和数值，与range不同的是它不能指定范围和步长</td><td style="text-align:left">N/A</td><td style="text-align:left">N/A</td><td style="text-align:left">for i, n in enumerate(nums)</td></tr><tr><td>Math</td><td style="text-align:left">max/min</td><td style="text-align:left">取最大值</td><td style="text-align:left">Num</td><td style="text-align:left">Num</td><td style="text-align:left">max_len = max(2, 3) 或min(1, 2, 3)</td></tr><tr><td>Math</td><td style="text-align:left">pow</td><td style="text-align:left">求幂值</td><td style="text-align:left">Num</td><td style="text-align:left">Num</td><td style="text-align:left">val = pow(2, 3)</td></tr><tr><td>Math</td><td style="text-align:left">int</td><td style="text-align:left">str转int</td><td style="text-align:left">String</td><td style="text-align:left">Num</td><td style="text-align:left">val = int(‘123’)</td></tr><tr><td>Math</td><td style="text-align:left">math.ceil/floor</td><td style="text-align:left">求向上或下取整</td><td style="text-align:left">Num</td><td style="text-align:left">Num</td><td style="text-align:left">import math val = math.ceil(5/2), math.floor(5/2)</td></tr><tr><td>Math</td><td style="text-align:left">int</td><td style="text-align:left">str转int</td><td style="text-align:left">String</td><td style="text-align:left">Num</td><td style="text-align:left">val = int(‘123’)</td></tr><tr><td>Math</td><td style="text-align:left">sys.maxsize</td><td style="text-align:left">Numeric最大值</td><td style="text-align:left">N/A</td><td style="text-align:left">Num</td><td style="text-align:left">import sys val = sys.maxsize</td></tr><tr><td>String</td><td style="text-align:left">str</td><td style="text-align:left">任意类型变成字符串</td><td style="text-align:left">Any</td><td style="text-align:left">String</td><td style="text-align:left">str(2)</td></tr><tr><td>String</td><td style="text-align:left">replace</td><td style="text-align:left">替换</td><td style="text-align:left">String</td><td style="text-align:left">String</td><td style="text-align:left">‘abc’.replace(‘c’, ‘d’)</td></tr><tr><td>String</td><td style="text-align:left">format</td><td style="text-align:left">格式化字符串</td><td style="text-align:left">Any</td><td style="text-align:left">String</td><td style="text-align:left">‘{} of {}’.format(a, b)</td></tr><tr><td>String</td><td style="text-align:left">[]</td><td style="text-align:left">得到某一个字符</td><td style="text-align:left">N/A</td><td style="text-align:left">Char</td><td style="text-align:left">s[2]</td></tr><tr><td>String</td><td style="text-align:left">[]</td><td style="text-align:left">得到子串(前闭后开)</td><td style="text-align:left">N/A</td><td style="text-align:left">string</td><td style="text-align:left">s = ‘abc’ s[:2] -&gt; ‘ab’ s[2:] -&gt; ‘c’</td></tr><tr><td>String</td><td style="text-align:left">len</td><td style="text-align:left">得到字符串长度</td><td style="text-align:left">N/A</td><td style="text-align:left">int</td><td style="text-align:left">num = len(s)</td></tr><tr><td>String</td><td style="text-align:left">[::-1]</td><td style="text-align:left">反转字符串</td><td style="text-align:left">N/A</td><td style="text-align:left">String</td><td style="text-align:left">new_str = s[::-1]</td></tr><tr><td>String</td><td style="text-align:left">N/A</td><td style="text-align:left">两个字符串叉乘</td><td style="text-align:left">N/A</td><td style="text-align:left">List</td><td style="text-align:left">a_list = [s + c for s in s1 for c in s2]</td></tr><tr><td>String</td><td style="text-align:left">&gt;</td><td style="text-align:left">比较两个字符串</td><td style="text-align:left">N/A</td><td style="text-align:left">boolean</td><td style="text-align:left">‘111’ &gt; ‘21’ -&gt; False, ‘21’ &gt; ‘21’ -&gt; True</td></tr><tr><td>List</td><td style="text-align:left">[]</td><td style="text-align:left">初始化列表</td><td style="text-align:left">N/A</td><td style="text-align:left">N/A</td><td style="text-align:left">list = []</td></tr><tr><td>List</td><td style="text-align:left">len</td><td style="text-align:left">大小</td><td style="text-align:left">N/A</td><td style="text-align:left">int</td><td style="text-align:left">num = len(list)</td></tr><tr><td>List</td><td style="text-align:left">append</td><td style="text-align:left">尾部加入</td><td style="text-align:left">Any</td><td style="text-align:left">N/A</td><td style="text-align:left">list.append(‘apple’)</td></tr><tr><td>List</td><td style="text-align:left">insert</td><td style="text-align:left">头部加入</td><td style="text-align:left">Any</td><td style="text-align:left">N/A</td><td style="text-align:left">list.insert(0, ‘apple’)</td></tr><tr><td>List</td><td style="text-align:left">+</td><td style="text-align:left">两个list合并</td><td style="text-align:left">N/A</td><td style="text-align:left">N/A</td><td style="text-align:left">list1 + list2</td></tr><tr><td>List</td><td style="text-align:left">join</td><td style="text-align:left">加入分隔符</td><td style="text-align:left">List</td><td style="text-align:left">String</td><td style="text-align:left">‘,’.join(list)</td></tr><tr><td>List</td><td style="text-align:left">sort</td><td style="text-align:left">排序，如果List的元素是tuple，按第一个元素排序</td><td style="text-align:left">List</td><td style="text-align:left">N/A</td><td style="text-align:left">list.sort()</td></tr><tr><td>List</td><td style="text-align:left">list</td><td style="text-align:left">复制list</td><td style="text-align:left">List</td><td style="text-align:left">List</td><td style="text-align:left">new_list = list(old_list)</td></tr><tr><td>List</td><td style="text-align:left">[]</td><td style="text-align:left">反转list</td><td style="text-align:left">List</td><td style="text-align:left">List</td><td style="text-align:left">new_list = list[::-1]跟反转string一样</td></tr><tr><td>List</td><td style="text-align:left">index</td><td style="text-align:left">list中找某个元素</td><td style="text-align:left">T</td><td style="text-align:left">int</td><td style="text-align:left">list.index(‘a’)</td></tr><tr><td>List(Queue)</td><td style="text-align:left">append</td><td style="text-align:left">入列</td><td style="text-align:left">T</td><td style="text-align:left">N/A</td><td style="text-align:left">queue = [], queue.append(node)</td></tr><tr><td>List(Queue)</td><td style="text-align:left">pop</td><td style="text-align:left">出列</td><td style="text-align:left">Num</td><td style="text-align:left">T</td><td style="text-align:left">queue = [], s = queue.pop(0) </td></tr><tr><td>List(Queue)</td><td style="text-align:left">[0]</td><td style="text-align:left">看列首元素</td><td style="text-align:left">N/A</td><td style="text-align:left">T</td><td style="text-align:left">queue = [], s = queue[0] </td></tr><tr><td>List(PQ)</td><td style="text-align:left">heapify</td><td style="text-align:left">对list最小堆排序</td><td style="text-align:left">List</td><td style="text-align:left">N/A</td><td style="text-align:left">from heapq import heapify, pq = [2, 3], heapify(pq) </td></tr><tr><td>List(PQ)</td><td style="text-align:left">heappush</td><td style="text-align:left">入堆</td><td style="text-align:left">List, T</td><td style="text-align:left">N/A</td><td style="text-align:left">from heapq import heappush, heappush(pq, 4) </td></tr><tr><td>List(PQ)</td><td style="text-align:left">heappop</td><td style="text-align:left">出堆</td><td style="text-align:left">List</td><td style="text-align:left">T</td><td style="text-align:left">from heapq import heappop, heappop(pq)</td></tr><tr><td>List(PQ)</td><td style="text-align:left">heapreplace</td><td style="text-align:left">置换堆</td><td style="text-align:left">T</td><td style="text-align:left">N/A</td><td style="text-align:left">heapq.heapreplace(pq, 4)= heappush(pq, 4) + heappop(pq)</td></tr><tr><td>List(PQ)</td><td style="text-align:left">[0]</td><td style="text-align:left">看堆顶元素</td><td style="text-align:left">N/A</td><td style="text-align:left">T</td><td style="text-align:left">pq[0]  </td></tr><tr><td>List(Stack)</td><td style="text-align:left">append</td><td style="text-align:left">入栈</td><td style="text-align:left">T</td><td style="text-align:left">N/A</td><td style="text-align:left">stack = [], stack.append(node)</td></tr><tr><td>List(Stack)</td><td style="text-align:left">pop</td><td style="text-align:left">出栈</td><td style="text-align:left">N/A</td><td style="text-align:left">T</td><td style="text-align:left">stack = [], s = stack.pop() </td></tr><tr><td>List(Stack)</td><td style="text-align:left">[]</td><td style="text-align:left">看栈顶元素</td><td style="text-align:left">N/A</td><td style="text-align:left">T</td><td style="text-align:left">stack = [], s = stack[-1] </td></tr><tr><td>Dictionary</td><td style="text-align:left">{}</td><td style="text-align:left">初始化字典</td><td style="text-align:left">N/A</td><td style="text-align:left">N/A</td><td style="text-align:left">dict = {}</td></tr><tr><td>Dictionary</td><td style="text-align:left">[]</td><td style="text-align:left">获得字典的值</td><td style="text-align:left">T</td><td style="text-align:left">T</td><td style="text-align:left">dict[key]</td></tr><tr><td>Dictionary</td><td style="text-align:left">[]</td><td style="text-align:left">插入到字典</td><td style="text-align:left">T</td><td style="text-align:left">T</td><td style="text-align:left">dict[key] = 2</td></tr><tr><td>Dictionary</td><td style="text-align:left">items</td><td style="text-align:left">Dict的所有pairs</td><td style="text-align:left">N/A</td><td style="text-align:left">K,V</td><td style="text-align:left">for k, v in dict.items()</td></tr><tr><td>Dictionary</td><td style="text-align:left">items</td><td style="text-align:left">Dict的所有keys</td><td style="text-align:left">N/A</td><td style="text-align:left">List</td><td style="text-align:left">for k in dict.keys()</td></tr><tr><td>Dictionary</td><td style="text-align:left">in</td><td style="text-align:left">是否含有某个key</td><td style="text-align:left">N/A</td><td style="text-align:left">boolean</td><td style="text-align:left">if key in dict</td></tr><tr><td>Set</td><td style="text-align:left">N/A</td><td style="text-align:left">产生一个Set</td><td style="text-align:left">N/A</td><td style="text-align:left">Set</td><td style="text-align:left">b = set(), b = set({‘a’, ‘b’})</td></tr><tr><td>Set</td><td style="text-align:left">N/A</td><td style="text-align:left">List转换成Set或反之</td><td style="text-align:left">N/A</td><td style="text-align:left">N/A</td><td style="text-align:left">s = set(l), l = list(s)</td></tr><tr><td>Lambda</td><td style="text-align:left">func/expr…for…in</td><td style="text-align:left">整型数组变字符串数组</td><td style="text-align:left">List</td><td style="text-align:left">List</td><td style="text-align:left">str(x) for x in list</td></tr><tr><td>Others</td><td style="text-align:left">Counter</td><td style="text-align:left">计算List频率</td><td style="text-align:left">List</td><td style="text-align:left">dict</td><td style="text-align:left">from collections import Counter, dict = Counter(nums)</td></tr><tr><td>Others</td><td style="text-align:left">[]</td><td style="text-align:left">初始化固定大小的列表</td><td style="text-align:left">N/A</td><td style="text-align:left">N/A</td><td style="text-align:left">a = [1] * 10</td></tr><tr><td>Others</td><td style="text-align:left">[]</td><td style="text-align:left">初始化NxM矩阵为1</td><td style="text-align:left">N/A</td><td style="text-align:left">N/A</td><td style="text-align:left">a = [[1] <em> M] </em> N</td></tr><tr><td>Others</td><td style="text-align:left">map, max</td><td style="text-align:left">求矩阵最大值</td><td style="text-align:left">[][]</td><td style="text-align:left">T</td><td style="text-align:left">max(map(max, matrix))</td></tr></tbody></table><p>i += 1没有i++<br>所有int都是long<br>22//5 = 4<br>22/5 = 4.4<br>由于Python的数字类型都是Numeric（自动识别为Integer, Float, Complex Numbers）,所以自动变成小数，不像Java是int<br><a href="https://www.geeksforgeeks.org/python-data-types/" target="_blank" rel="noopener">数据类型</a></p><p>True/False<br>and/or/not</p><p>&amp;, ^异或, ~取反(~3), |, &lt;&lt;, &gt;&gt;</p><p>elif<br>return -res if is_negative else res<br>if root/ if root is None<br>Node(0)没有new  </p><p>self.maxDepth  </p><p>三个引号就是多行comment，#是一行comment<br>from heapq import heappop, heappush, heapify</p><p><a href="https://www.runoob.com/python3/python3-basic-syntax.html" target="_blank" rel="noopener">Python基础</a><br><a href="https://visualgit.readthedocs.io/en/latest/pages/naming_convention.html" target="_blank" rel="noopener">Python命名规则</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;常用知识点&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;函数名&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;作用&lt;/th&gt;
&lt;th 
      
    
    </summary>
    
    
      <category term="Knowledge Base" scheme="https://shineboy2013.github.com/tags/Knowledge-Base/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 368 Largest Divisible Subset</title>
    <link href="https://shineboy2013.github.com/2020/05/10/lee-368/"/>
    <id>https://shineboy2013.github.com/2020/05/10/lee-368/</id>
    <published>2020-05-10T23:21:41.197Z</published>
    <updated>2020-05-10T23:43:44.547Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/largest-divisible-subset/" target="_blank" rel="noopener">LeetCode 368 Largest Divisible Subset</a></strong></p><p>Given a set of <strong>distinct</strong> positive integers, find the largest subset such that every pair (S<sub>i</sub>, S<sub>j</sub>) of elements in this subset satisfies:</p><p>S<sub>i</sub> % S<sub>j</sub> = 0 or S<sub>j</sub> % S<sub>i</sub> = 0.</p><p>If there are multiple solutions, return any subset is fine.</p><p><strong>Example 1:</strong></p><div><pre>**Input:** <span id="example-input-1-1">[1,2,3]</span>**Output:** <span id="example-output-1">[1,2]</span> (of course, [1,3] will also be ok)</pre><div><p><strong>Example 2:</strong></p><pre>**Input:** <span id="example-input-2-1">[1,2,4,8]</span>**Output:** <span id="example-output-2">[1,2,4,8]</span></pre><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>一个数组，让我们求这样一个子集合，集合中的任意两个数相互取余均为0。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>由于知道子问题有助于求解考虑用DP。它就是LIS的翻版。这道题还需要打印DP路径。    </p><ol><li>定义dp[i]为num[i-1]这个数对应的最大可整除子集合个数。  </li><li>递归式为dp[i] = max{dp[j-1] + 1}, 0&lt;j&lt;i, 若num[i-1]可被num[j-1]整除     </li><li>方向为从左到右。初始值为dp = 1。  </li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>初始值dp = 1。  </li></ol><h3 id="Java代码："><a href="#Java代码：" class="headerlink" title="Java代码："></a><strong>Java代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">largestDivisibleSubset</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line"><span class="keyword">if</span>(nums.length == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> Arrays.asList(nums[<span class="number">0</span>]);</span><br><span class="line">Arrays.sort(nums);</span><br><span class="line"><span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line"><span class="keyword">int</span> maxPos = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span>[] path = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dp.length; i++) <span class="comment">// remember to init to 1</span></span><br><span class="line">dp[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(nums[i-<span class="number">1</span>] % nums[j-<span class="number">1</span>] == <span class="number">0</span> &amp;&amp; dp[j] + <span class="number">1</span> &gt; dp[i]) &#123;</span><br><span class="line">dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">path[i] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dp[i] &gt; max) &#123;</span><br><span class="line">max = dp[i];</span><br><span class="line">maxPos = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> pos = maxPos;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dp[maxPos]; i++) &#123;</span><br><span class="line">res.add(nums[pos-<span class="number">1</span>]);</span><br><span class="line">pos = path[pos];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Collections.sort(res);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n<sup>2</sup>)</code>，空间复杂度<code>O(n<sup>2</sup>)</code>。</p></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/largest-divisible-subset/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 368 Largest Divisible S
      
    
    </summary>
    
    
      <category term="Dynamic Programming" scheme="https://shineboy2013.github.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 010 Regular Expression Matching</title>
    <link href="https://shineboy2013.github.com/2020/05/10/lee-010/"/>
    <id>https://shineboy2013.github.com/2020/05/10/lee-010/</id>
    <published>2020-05-10T16:48:10.451Z</published>
    <updated>2021-10-24T09:22:18.558Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/regular-expression-matching/" target="_blank" rel="noopener">LeetCode 010 Regular Expression Matching</a></strong></p><p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code>.</p><pre>'.' Matches any single character.'*' Matches zero or more of the preceding element.</pre><p>The matching should cover the <strong>entire</strong> input string (not partial).</p><p><strong>Note:</strong></p><ul><li><code>s</code> could be empty and contains only lowercase letters <code>a-z</code>.</li><li><code>p</code> could be empty and contains only lowercase letters <code>a-z</code>, and characters like <code>.</code> or <code>*</code>.</li></ul><p><strong>Example 1:</strong></p><pre>**Input:**s = "aa"p = "a"**Output:** false**Explanation:** "a" does not match the entire string "aa".</pre><p><strong>Example 2:</strong></p><pre>**Input:**s = "aa"p = "a*"**Output:** true**Explanation:** '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".</pre><p><strong>Example 3:</strong></p><pre>**Input:**s = "ab"p = ".*"**Output:** true**Explanation:** ".*" means "zero or more (*) of any character (.)".</pre><p><strong>Example 4:</strong></p><pre>**Input:**s = "aab"p = "c*a*b"**Output:** true**Explanation:** c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches "aab".</pre><p><strong>Example 5:</strong></p><pre>**Input:**s = "mississippi"p = "mis*is*p*."**Output:** false</pre><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>这道求正则表达式匹配的题和那道Leetocde 044 Wildcard Matching很类似，不同点在于*的意义不同，在之前那道题中，<br>*表示可以代替任意个数的不同字符，而这道题中的*表示之前一个字符（同样字符）可以有0-N个匹配。此题更难一些。    </p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>这是经典题。两字符串匹配题基本就是DP而且知道子问题答案可以推导下一个。    </p><ol><li>定义dp[i][j]为字符串s[i-1]和p[j-1]是否能匹配。  </li><li>递归式为dp[i][j] = dp[i-1][j-1] &amp;&amp; (p[j-1] == <strong>.</strong> || s[i-1] == p[j-1])<br>OR ((dp[i-1][j] &amp;&amp; <strong>(s[i-1] == p[j-2] || p[j-2] == .)</strong>) || dp[i][<strong>j-2</strong>]) &amp;&amp; p[j-1] == *<br>第一种情况为非*，通配一样字符或.<br>第二种情况为*，如果通配<strong>（有条件：与p的前一个字符相等或p为.）</strong>就是只移动s，dp[i-1][j]。若不通配就只移动p<strong>及其前一个字符</strong>。  </li><li>方向为从左到右，从上到下。初始值为dp[0][0] = true。以及若s为空，p为多个*时候，dp[0][j]=true。</li></ol><p>与Wildcard Matching不同之处用黑体标注了：  </p><ol><li>用.代替?  </li><li>*情况，不匹配p移动两位而不是一位。  </li><li>*情况，匹配带条件而不是无条件。  </li><li>初始化用dp[0][j-2]而不是j-1。  </li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>递归式含*不匹配情况dp[i][j-2]。  </li><li>初始化s为空，p为多个*。此情况其实与递归式符合，因为i=1开始，所以i=0的时候，dp[i-1][j]为负值省去，<br>只取dp[i][j-2]。   </li></ol><h3 id="Java代码："><a href="#Java代码：" class="headerlink" title="Java代码："></a><strong>Java代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length() + <span class="number">1</span>][p.length() + <span class="number">1</span>];</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; dp[<span class="number">0</span>].length; j++)</span><br><span class="line"><span class="keyword">if</span>(p.charAt(j-<span class="number">1</span>) == <span class="string">'*'</span>) <span class="comment">// remember s="", p="a*"</span></span><br><span class="line">dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j-<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; dp.length; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; dp[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(p.charAt(j-<span class="number">1</span>) == <span class="string">'*'</span>)</span><br><span class="line">dp[i][j] = (dp[i][j-<span class="number">2</span>] || ((s.charAt(i-<span class="number">1</span>) == p.charAt(j-<span class="number">2</span>) </span><br><span class="line">|| p.charAt(j-<span class="number">2</span>) == <span class="string">'.'</span>) &amp;&amp; dp[i-<span class="number">1</span>][j]));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>] &amp;&amp; (s.charAt(i-<span class="number">1</span>) == p.charAt(j-<span class="number">1</span>) </span><br><span class="line">|| p.charAt(j-<span class="number">1</span>) == <span class="string">'.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[dp.length -<span class="number">1</span>][dp[<span class="number">0</span>].length - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n*m)</code>，空间复杂度为<code>O(n*m)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/regular-expression-matching/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 010 Regular Expressi
      
    
    </summary>
    
    
      <category term="Dynamic Programming" scheme="https://shineboy2013.github.com/tags/Dynamic-Programming/"/>
    
      <category term="Classic" scheme="https://shineboy2013.github.com/tags/Classic/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 044 Wildcard Matching</title>
    <link href="https://shineboy2013.github.com/2020/05/10/lee-044/"/>
    <id>https://shineboy2013.github.com/2020/05/10/lee-044/</id>
    <published>2020-05-10T16:18:47.532Z</published>
    <updated>2021-10-24T09:13:54.793Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/wildcard-matching/" target="_blank" rel="noopener">LeetCode 044 Wildcard Matching</a></strong></p><div><br><br>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement wildcard pattern matching with support for <code>&#39;?&#39;</code> and <code>&#39;*&#39;</code>.<br><br><pre>‘?’ Matches any single character.<br>‘<em>‘ Matches any sequence of characters (including the empty sequence).<br></em></pre><br><br>The matching should cover the <strong>entire</strong> input string (not partial).<br><br><strong>Note:</strong>   <code>s</code> could be empty and contains only lowercase letters <code>a-z</code>.<br><em>   <code>p</code> could be empty and contains only lowercase letters <code>a-z</code>, and characters like <code>&lt;font face=&quot;monospace&quot;&gt;?&lt;/font&gt;</code> or `</em>`.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong><br>s = “aa”<br>p = “a”<br><strong>Output:</strong> false<br><strong>Explanation:</strong> “a” does not match the entire string “aa”.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong><br>s = “aa”<br>p = “<em>“<br><strong>Output:</strong> true<br><strong>Explanation:</strong> ‘</em>‘ matches any sequence.<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong><br>s = “cb”<br>p = “?a”<br><strong>Output:</strong> false<br><strong>Explanation:</strong> ‘?’ matches ‘c’, but the second letter is ‘a’, which does not match ‘b’.<br></pre><br><br><strong>Example 4:</strong><br><br><pre><strong>Input:</strong><br>s = “adceb”<br>p = “<em>a</em>b”<br><strong>Output:</strong> true<br><strong>Explanation:</strong> The first ‘<em>‘ matches the empty sequence, while the second ‘</em>‘ matches the substring “dce”.<br></pre><br><br><strong>Example 5:</strong><br><br><pre><strong>Input:</strong><br>s = “acdcb”<br>p = “a<em>c?b”<br><em>*Output:</em></em> false<br></pre><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>通配符外卡匹配问题，有特殊字符”*“和”?”，其中”?” 能代替任何字符，”*“能代替任何字符串。  </p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>这是经典题。两字符串匹配题基本就是DP而且知道子问题答案可以推导下一个。    </p><ol><li>定义dp[i][j]为字符串s[i-1]和p[j-1]是否能匹配。  </li><li>递归式为dp[i][j] = dp[i-1][j-1] &amp;&amp; (p[j-1]==? || s[i-1]==p[j-1])<br>OR (dp[i-1][j] || dp[i][j-1]) &amp;&amp; p[j-1]==*<br>第一种情况为非*，通配一样字符或?<br>第二种情况为*，如果通配就是只移动s，dp[i-1][j]。若不通配（通配完）就只移动p。  </li><li>方向为从左到右，从上到下。初始值为dp[0][0] = true。以及若s为空，p为多个*时候，dp[0][j]=true。</li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>递归式含*不匹配情况dp[i][j-1]，我写的时候忽略了。  </li><li>初始化s为空，p为多个*。此情况其实与递归式符合，因为i=1开始，所以i=0的时候，dp[i-1][j]为负值省去，<br>只取dp[i][j-1]。  </li><li>一开始写的corner case并入到递归式处理。  </li></ol><h3 id="Java代码："><a href="#Java代码：" class="headerlink" title="Java代码："></a><strong>Java代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line"><span class="comment">//if(s.isEmpty() &amp;&amp; p.isEmpty())</span></span><br><span class="line"><span class="comment">//return true;</span></span><br><span class="line"><span class="comment">//if(!s.isEmpty() &amp;&amp; p.isEmpty())</span></span><br><span class="line"><span class="comment">//return false;</span></span><br><span class="line"><span class="comment">//if(s.isEmpty() &amp;&amp; !p.isEmpty() &amp;&amp; isAllStars(p))</span></span><br><span class="line"><span class="comment">//return true;</span></span><br><span class="line"><span class="comment">//if(s.isEmpty() &amp;&amp; !p.isEmpty())</span></span><br><span class="line"><span class="comment">//return false;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length() + <span class="number">1</span>][p.length() + <span class="number">1</span>];</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; dp[<span class="number">0</span>].length; j++)</span><br><span class="line"><span class="comment">// remember empty s can match any prefix *** character in p making sure dp[0][j] = true</span></span><br><span class="line"><span class="keyword">if</span>(p.charAt(j-<span class="number">1</span>) == <span class="string">'*'</span>)</span><br><span class="line">dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j-<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; dp.length; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; dp[<span class="number">0</span>].length; j++)</span><br><span class="line">dp[i][j] = (dp[i-<span class="number">1</span>][j-<span class="number">1</span>] &amp;&amp; (p.charAt(j-<span class="number">1</span>) == <span class="string">'?'</span> || s.charAt(i-<span class="number">1</span>) == p.charAt(j-<span class="number">1</span>)))</span><br><span class="line"><span class="comment">// miss dp[i][j-1] means no match on *</span></span><br><span class="line">|| ((dp[i-<span class="number">1</span>][j] || dp[i][j-<span class="number">1</span>]) &amp;&amp; p.charAt(j-<span class="number">1</span>) == <span class="string">'*'</span>); </span><br><span class="line"><span class="keyword">return</span> dp[dp.length -<span class="number">1</span>][dp[<span class="number">0</span>].length - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n*m)</code>，空间复杂度为<code>O(n*m)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/wildcard-matching/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 044 Wildcard Matching&lt;/a&gt;&lt;/str
      
    
    </summary>
    
    
      <category term="Dynamic Programming" scheme="https://shineboy2013.github.com/tags/Dynamic-Programming/"/>
    
      <category term="Classic" scheme="https://shineboy2013.github.com/tags/Classic/"/>
    
  </entry>
  
  <entry>
    <title>记忆性搜索</title>
    <link href="https://shineboy2013.github.com/2020/05/09/memoization/"/>
    <id>https://shineboy2013.github.com/2020/05/09/memoization/</id>
    <published>2020-05-09T23:28:48.775Z</published>
    <updated>2020-05-09T23:34:02.380Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a><strong>算法思路：</strong></h3><p>DFS将子问题的解存于结果中。cache[st] = result. st是子问题边界。  </p><h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a><strong>应用：</strong></h3><p>用于求所有可能性，且这些可能性有重复，记忆性搜索可以用于剪枝。  </p><ol><li>Leetcode 139</li><li>Leetcode 140</li></ol><h3 id="算法步骤："><a href="#算法步骤：" class="headerlink" title="算法步骤："></a><strong>算法步骤：</strong></h3><ol><li>key为子问题索引st，value为子问题的解。  </li><li>紧跟终结条件，若在cache中，返回子问题的解。  </li><li>循环结束，将子问题的结果存于cache。  </li></ol><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(解大小)</code>，空间复杂度<code>O(解大小)</code>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;算法思路：&quot;&gt;&lt;a href=&quot;#算法思路：&quot; class=&quot;headerlink&quot; title=&quot;算法思路：&quot;&gt;&lt;/a&gt;&lt;strong&gt;算法思路：&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;DFS将子问题的解存于结果中。cache[st] = result. st是子问题
      
    
    </summary>
    
    
      <category term="Knowledge Base" scheme="https://shineboy2013.github.com/tags/Knowledge-Base/"/>
    
      <category term="Memoization" scheme="https://shineboy2013.github.com/tags/Memoization/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 140 Word Break II</title>
    <link href="https://shineboy2013.github.com/2020/05/09/lee-140/"/>
    <id>https://shineboy2013.github.com/2020/05/09/lee-140/</id>
    <published>2020-05-09T23:22:25.398Z</published>
    <updated>2020-05-10T16:42:25.730Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/word-break-ii/" target="_blank" rel="noopener">LeetCode 140 Word Break II</a></strong></p><div><br><br>Given a <strong>non-empty</strong> string <em>s</em> and a dictionary <em>wordDict</em> containing a list of <strong>non-empty</strong> words, add spaces in <em>s</em> to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.<br><br><strong>Note:</strong><br><br><em>   The same word in the dictionary may be reused multiple times in the segmentation.</em>   You may assume the dictionary does not contain duplicate words.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> s = “<code>catsanddog</code>“<br>wordDict = <code>[&quot;cat&quot;, &quot;cats&quot;, &quot;and&quot;, &quot;sand&quot;, &quot;dog&quot;]</code><br><strong>Output:</strong> <code>[  &quot;cats and dog&quot;,  &quot;cat sand dog&quot;]</code><br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> s = “pineapplepenapple”<br>wordDict = [“apple”, “pen”, “applepen”, “pine”, “pineapple”]<br><strong>Output:</strong> [<br>  “pine apple pen apple”,<br>  “pineapple pen apple”,<br>  “pine applepen apple”<br>]<br><strong>Explanation:</strong> Note that you are allowed to reuse a dictionary word.<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> s = “catsandog”<br>wordDict = [“cats”, “dog”, “sand”, “and”, “cat”]<br><strong>Output:</strong> []</pre><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>一个字符串s，求被“字典集合”（wordDict）中的单词拼接的所有方案。  </p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>这是经典题。求所有可能性想到DFS，前面Lintcode 683提到可能会有重复解。所以用Cache。    </p><p><strong>Cache模板：</strong>  </p><ol><li>key为子问题索引st，value为子问题的解。  </li><li>紧跟终结条件，若在cache中，返回子问题的解。  </li><li>循环结束，将子问题的结果存于cache。  </li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>将两个输入都转换成小写。  </li><li>复制子问题的解，不能直接在解List<string>上编辑。</string></li></ol><h3 id="Java代码："><a href="#Java代码：" class="headerlink" title="Java代码："></a><strong>Java代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span>(s == <span class="keyword">null</span> || s.isEmpty())</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">Set&lt;String&gt; wordDictLower = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(String c : wordDict)</span><br><span class="line">wordDictLower.add(c.toLowerCase());</span><br><span class="line">s = s.toLowerCase();</span><br><span class="line">Map&lt;Integer, List&lt;String&gt;&gt; cache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">return</span> dfs(s, wordDictLower, s.length(), cache);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;String&gt; <span class="title">dfs</span><span class="params">(String s, Set&lt;String&gt; wordDict, <span class="keyword">int</span> st, Map&lt;Integer, List&lt;String&gt;&gt; cache)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(st == <span class="number">0</span>) </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">""</span>));</span><br><span class="line"><span class="keyword">if</span>(cache.containsKey(st))</span><br><span class="line"><span class="keyword">return</span> cache.get(st);</span><br><span class="line">List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; st; i++) &#123;</span><br><span class="line">String word = s.substring(i, st);</span><br><span class="line"><span class="keyword">if</span>(!wordDict.contains(word))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; sub = dfs(s, wordDict, i, cache); </span><br><span class="line"><span class="comment">// copy solution for subproblem, don't edit on sub</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sub.size(); j++)</span><br><span class="line">result.add((sub.get(j) + <span class="string">" "</span> + word).trim());</span><br><span class="line">&#125;</span><br><span class="line">cache.put(st, result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(解大小)</code>，空间复杂度为<code>O(解大小)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/word-break-ii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 140 Word Break II&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="Classic" scheme="https://shineboy2013.github.com/tags/Classic/"/>
    
      <category term="Memoization" scheme="https://shineboy2013.github.com/tags/Memoization/"/>
    
  </entry>
  
  <entry>
    <title>LintCode 683 Word Break III</title>
    <link href="https://shineboy2013.github.com/2020/05/09/lin-683/"/>
    <id>https://shineboy2013.github.com/2020/05/09/lin-683/</id>
    <published>2020-05-09T20:05:20.549Z</published>
    <updated>2021-10-24T08:43:58.902Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://www.lintcode.com/problem/word-break-iii/" target="_blank" rel="noopener">LintCode 683 Word Break III</a></strong></p><div><br><br>Give a dictionary of words and a sentence with all whitespace removed, return the number of sentences you can form by inserting whitespaces to the sentence so that each word can be found in the dictionary.<br><br><strong>Example 1:</strong><br><br><pre><br>Input:<br>“CatMat”<br>[“Cat”, “Mat”, “Ca”, “tM”, “at”, “C”, “Dog”, “og”, “Do”]<br>Output: 3<br>Explanation:<br>we can form 3 sentences, as follows:<br>“CatMat” = “Cat” + “Mat”<br>“CatMat” = “Ca” + “tM” + “at”<br>“CatMat” = “C” + “at” + “Mat”<br></pre><br><br><strong>Example 2:</strong><br><br><pre><br>Input:<br>“a”<br>[]<br>Output: 0<br></pre><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>一个字符串s，被“字典集合”（wordDict）中的单词拼接而成的可能性种数。  </p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>这是经典题。如果知道s[0:n-1)很容易知道s[0:n)是否有解，既然和子问题有关，就用DP。  </p><ol><li>定义dp[i]为字符串s[0,i)是合法分解种数。</li><li>判断一个字符串是否可以合法分解，方案是尝试在每一位进行分解，若其中一个可分解，即有解，加入到dp[i]中。<br>递归式为dp[i] += dp[k] * isWord(s[k:i)), 0 &lt;= k &lt; i. </li><li>方向为从左到右i=0..n, 初始值为dp[0] = 1. </li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>将两个输入都转换成小写。 </li><li>dp[n+1]而不是dp[n]，而for循环从1开始。  </li><li>递归中dp[i]用+操作符。  </li></ol><h3 id="Java代码："><a href="#Java代码：" class="headerlink" title="Java代码："></a><strong>Java代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">wordBreak3</span><span class="params">(String s, Set&lt;String&gt; dict)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="keyword">null</span> || <span class="string">""</span>.equals(s))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; lowerDict = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(String c : dict)</span><br><span class="line">lowerDict.add(c.toLowerCase());</span><br><span class="line">dict = lowerDict;</span><br><span class="line">s = s.toLowerCase();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[s.length() + <span class="number">1</span>];</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dp[i][j] = sum(dp[i][k] * isWord(s[k,j])), i=0..n-1, j=i..n-1</span></span><br><span class="line"><span class="comment">// dp[0][n-1] = sum(dp[0][k] * isWord(s[k,n-1]))</span></span><br><span class="line"><span class="comment">// dp[n] = sum(dp[k] * isWord(s[k,n]))</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s.length(); i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; k++) &#123;</span><br><span class="line">dp[i] += dp[k] * (dict.contains(s.substring(k, i)) ? <span class="number">1</span> : <span class="number">0</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[s.length()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n<sup>2</sup>)</code>，空间复杂度为<code>O(n)</code>。  </p><p>这道题一开始走过一些弯路，首先我觉得类似于Catalan算法，左右半部都是子问题，但其实这属于单边问题。所以写了以下算法：  </p><h3 id="Java代码：-1"><a href="#Java代码：-1" class="headerlink" title="Java代码："></a><strong>Java代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">wordBreak3_wrong</span><span class="params">(String s, Set&lt;String&gt; dict)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="keyword">null</span> || <span class="string">""</span>.equals(s))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dp[i][j] = sum(dp[i][k] * dp[k][j])</span></span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[s.length() + <span class="number">1</span>][s.length() + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// use "ab" as an example</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">1</span>; len &lt;= s.length(); len++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length() - len + <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; i + len; j++) &#123;</span><br><span class="line"><span class="comment">//"a","b"</span></span><br><span class="line">dp[i][i+len] += dp[i][j] * dp[j][i+len];    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//"ab"</span></span><br><span class="line"><span class="keyword">if</span>(dict.contains(s.substring(i, i+len)))</span><br><span class="line">dp[i][i+len]++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[<span class="number">0</span>][s.length()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但这个方法会有重复解，比如<br>“abc”, “a”,”b”,”c”<br>-&gt; <code>dp[&quot;ab&quot;] * dp[&quot;c&quot;] = 1</code><br>-&gt; <code>dp[&quot;a&quot;] * dp[&quot;bc&quot;] = 1</code><br>所以解重复，因为这问题是单边子问题而不是Catalan问题。<br>更改版本为单边子问题，一开始用dp[n]导致初始化稍复杂，其实初始化可以并入到递归式，只要用dp[n+1]即可。  </p><h3 id="Java代码：-2"><a href="#Java代码：-2" class="headerlink" title="Java代码："></a><strong>Java代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">wordBreak32</span><span class="params">(String s, Set&lt;String&gt; dict)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="keyword">null</span> || <span class="string">""</span>.equals(s))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)</span><br><span class="line">dp[i] = dict.contains(s.substring(<span class="number">0</span>, i + <span class="number">1</span>)) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; k++) &#123;</span><br><span class="line">dp[i] += dp[k] * (dict.contains(s.substring(k + <span class="number">1</span>, i + <span class="number">1</span>)) ? <span class="number">1</span> : <span class="number">0</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[s.length() - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.lintcode.com/problem/word-break-iii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LintCode 683 Word Break III&lt;/a&gt;&lt;/strong
      
    
    </summary>
    
    
      <category term="Dynamic Programming" scheme="https://shineboy2013.github.com/tags/Dynamic-Programming/"/>
    
      <category term="Classic" scheme="https://shineboy2013.github.com/tags/Classic/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 139 Word Break</title>
    <link href="https://shineboy2013.github.com/2020/05/09/lee-139/"/>
    <id>https://shineboy2013.github.com/2020/05/09/lee-139/</id>
    <published>2020-05-09T18:13:14.876Z</published>
    <updated>2020-05-09T20:03:02.792Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/word-break/" target="_blank" rel="noopener">LeetCode 139 Word Break</a></strong></p><div><br><br>Given a <strong>non-empty</strong> string <em>s</em> and a dictionary <em>wordDict</em> containing a list of <strong>non-empty</strong> words, determine if <em>s</em> can be segmented into a space-separated sequence of one or more dictionary words.<br><br><strong>Note:</strong><br><br><em>   The same word in the dictionary may be reused multiple times in the segmentation.</em>   You may assume the dictionary does not contain duplicate words.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> s = “leetcode”, wordDict = [“leet”, “code”]<br><strong>Output:</strong> true<br><strong>Explanation:</strong> Return true because <code>&quot;leetcode&quot;</code> can be segmented as <code>&quot;leet code&quot;</code>.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> s = “applepenapple”, wordDict = [“apple”, “pen”]<br><strong>Output:</strong> true<br><strong>Explanation:</strong> Return true because <code>&quot;</code>applepenapple<code>&quot;</code> can be segmented as <code>&quot;</code>apple pen apple<code>&quot;</code>.<br>             Note that you are allowed to reuse a dictionary word.<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> s = “catsandog”, wordDict = [“cats”, “dog”, “sand”, “and”, “cat”]<br><strong>Output:</strong> false<br></pre><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>一个字符串s，是否能够被“字典集合”（wordDict）中的单词拼接而成。  </p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>这是经典题。如果知道s[0:n-1)很容易知道s[0:n)是否有解，既然和子问题有关，就用DP。  </p><ol><li>定义dp[i]为字符串s[0,i)是否可以合法分解。</li><li>判断一个字符串是否可以合法分解，方案是尝试在每一位进行分解，若其中一个可分解，即有解。<br>递归式为dp[i] |= dp[k] &amp;&amp; isWord(s[k:i)), 0 &lt;= k &lt; i. </li><li>方向为从左到右i=0..n, 初始值为dp[0] = true. </li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>将两个输入都转换成小写。  </li><li>递归中dp[i]用或操作符。</li></ol><h3 id="Java代码："><a href="#Java代码：" class="headerlink" title="Java代码："></a><strong>Java代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="keyword">null</span> || s.isEmpty() || wordDict == <span class="keyword">null</span> || wordDict.size() == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">Set&lt;String&gt; wordDictLower = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(String c : wordDict)</span><br><span class="line">wordDictLower.add(c.toLowerCase());</span><br><span class="line">s = s.toLowerCase();</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length() + <span class="number">1</span>];</span><br><span class="line">dp[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; dp.length; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; k++) &#123;<span class="comment">//"a"</span></span><br><span class="line">dp[i] |= dp[k] &amp;&amp; wordDictLower.contains(s.substring(k, i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[dp.length - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n<sup>2</sup>)</code>，空间复杂度为<code>O(n)</code>。</p><hr><h3 id="算法II解题思路："><a href="#算法II解题思路：" class="headerlink" title="算法II解题思路："></a><strong>算法II解题思路：</strong></h3><p>这题也可以额用DFS来解。如果可以用DP就尽量用DP，只有求所有可能性才只能用DFS而不能用DP。<br>这道题递归子问题dfs[:n]为子串[0:n)是否可合法拆解。对于子问题而言，需要对其范围内i=[0:st)的每个可能位置分解<br>dfs[:i) + word[i:st)从而求出dfs(st)的解，只有任一分解成功，dfs(st)=true，否则false。 </p><p>Cache的应用场景： 如果子问题重复就要用Cache。<br>例如dfs(10)=dfs(9)+s[9:9] = (dfs(8) + s[8:8]) + s[9:9]<br>           =dfs(8)+s[8:9]<br>dfs(8)由第一层递归第二个循环s[8:9]和第二层递归s[9:9]达到，这是重复的子问题dfs(8)。如果不cache，dfs(8)的求解<br>是重复的。  </p><p><strong>Cache模板：</strong>  </p><ol><li>key为子问题索引st，value为子问题的解。  </li><li>紧跟终结条件，若在cache中，返回子问题的解。  </li><li>循环结束，将子问题的结果存于cache。  </li></ol><h3 id="注意事项：-1"><a href="#注意事项：-1" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>将两个输入都转换成小写。</li><li>递归中先查询词是否在字典中再递归。如果顺序调转就会LTE，因为这些子问题是白费的。  </li><li>递归终结条件为st==0而不是st==s.length()因为子问题递归从右到左。  </li></ol><h3 id="Java代码：-1"><a href="#Java代码：-1" class="headerlink" title="Java代码："></a><strong>Java代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreakDFS</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="keyword">null</span> || s.isEmpty() || wordDict == <span class="keyword">null</span> || wordDict.size() == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">Set&lt;String&gt; wordDictLower = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(String c : wordDict)</span><br><span class="line">wordDictLower.add(c.toLowerCase());</span><br><span class="line">s = s.toLowerCase();</span><br><span class="line">Map&lt;Integer, Boolean&gt; cache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">return</span> dfs(s, wordDictLower, s.length(), cache);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// subproblem's answer dfs[:st)</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(String s, Set&lt;String&gt; wordDict, <span class="keyword">int</span> st, Map&lt;Integer, Boolean&gt; cache)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(st == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span>(cache.containsKey(st))</span><br><span class="line"><span class="keyword">return</span> cache.get(st);</span><br><span class="line"><span class="keyword">boolean</span> re = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; st; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(wordDict.contains(s.substring(i, st)) &amp;&amp; dfs(s, wordDict, i, cache))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">cache.put(st, re);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法分析：-1"><a href="#算法分析：-1" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n<sup>2</sup>)</code>，空间复杂度为<code>O(n)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/word-break/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 139 Word Break&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;
      
    
    </summary>
    
    
      <category term="Dynamic Programming" scheme="https://shineboy2013.github.com/tags/Dynamic-Programming/"/>
    
      <category term="Classic" scheme="https://shineboy2013.github.com/tags/Classic/"/>
    
      <category term="Memoization" scheme="https://shineboy2013.github.com/tags/Memoization/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 146 LRU Cache</title>
    <link href="https://shineboy2013.github.com/2020/05/04/lee-146/"/>
    <id>https://shineboy2013.github.com/2020/05/04/lee-146/</id>
    <published>2020-05-05T05:58:23.494Z</published>
    <updated>2021-10-25T04:25:09.406Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/lru-cache/" target="_blank" rel="noopener">LeetCode 146 LRU Cache</a></strong></p><div><br><br>Design and implement a data structure for <a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU" target="_blank" rel="noopener">Least Recently Used (LRU) cache</a>. It should support the following operations: <code>get</code> and <code>put</code>.<br><br><code>get(key)</code> - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br><code>put(key, value)</code> - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.<br><br>The cache is initialized with a <strong>positive</strong> capacity.<br><br><strong>Follow up:</strong><br>Could you do both operations in <strong>O(1)</strong> time complexity?<br><br><strong>Example:</strong><br><br><pre>LRUCache cache = new LRUCache( 2 /<em> capacity </em>/ );<br><br>cache.put(1, 1);<br>cache.put(2, 2);<br>cache.get(1);       // returns 1<br>cache.put(3, 3);    // evicts key 2<br>cache.get(2);       // returns -1 (not found)<br>cache.put(4, 4);    // evicts key 1<br>cache.get(1);       // returns -1 (not found)<br>cache.get(3);       // returns 3<br>cache.get(4);       // returns 4<br></pre><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>设计LRU。就是最就的cache会先被删除。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>因为是Cache，get是O(1)，自然想到用HashMap。如果不限容量，get，put都可以O(1)。限容量的情况下，<br>就要删除部分数据，这里要求按key的时间排序，所以考虑用一个串将keys串联起来。而key的添加和删除<br>也要O(1)，所以考虑用LinkedList。HashMap和LinkedList的组合很常见。这里value就指向LL中的Node，<br>而Node中含key和value，key又可以让Node只向HashMap，做到互相索引。分析get和set，get就只要从Map<br>中读Node的value即可。set比较复杂，含三种情况：  </p><ol><li>已有节点  </li><li>不含节点且少于容量  </li><li>不含节点且大于等于容量  </li></ol><p>对应链表操作为：  </p><ol><li>删除该节点且插入到末尾  </li><li>插入新节点到末尾  </li><li>删除头节点且插入新节点到末尾  </li></ol><p>总结链表操作为两个：  </p><ol><li>删除某节点  </li><li>插入新节点到末尾  </li></ol><p>实现上可以分为单链表和双链表。单链表要让Map指向节点的父节点。实现上很麻烦，因为更新节点都会涉及<br>两个keys上HashMap更新，即使已有节点换到末尾同样要两次更新Map。但双链表对此情况就避免了Map的更新。  </p><p>DummyNode的选择：一开始我只选用了DummyHead，但capacity=1的时候要判断末节点是否为空很麻烦，由于<br>经常性的插入末节点，所以根据若头结点涉及插入删除就应该用dummyNode的原则，末节点也增加dummyNode<br>程序就简洁很多。</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>set中，若节点存在，更新value。更新节点在链表中的顺序。  </li><li>头尾dummy node  </li><li>注意删除顺序，先删map中的entry再删Node。否则会出现NPE。新加入是顺序相反。  </li></ol><h3 id="Java代码："><a href="#Java代码：" class="headerlink" title="Java代码："></a><strong>Java代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, ListNode&gt; map;</span><br><span class="line">ListNode head; <span class="comment">// from oldest to newest</span></span><br><span class="line">ListNode tail;</span><br><span class="line"><span class="keyword">int</span> capacity;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">L146LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">head = <span class="keyword">new</span> ListNode(-<span class="number">1</span>, -<span class="number">1</span>);</span><br><span class="line">tail = <span class="keyword">new</span> ListNode(-<span class="number">1</span>, -<span class="number">1</span>);</span><br><span class="line">head.next = tail;</span><br><span class="line">tail.prev = head;</span><br><span class="line">map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!map.containsKey(key))</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">pushback(key);</span><br><span class="line"><span class="keyword">return</span> map.get(key).val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(map.containsKey(key)) &#123;</span><br><span class="line">pushback(key);</span><br><span class="line">map.get(key).val = value; <span class="comment">// remember to update the value</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(map.size() == capacity) &#123;</span><br><span class="line">map.remove(head.next.key);</span><br><span class="line">deleteNode(head.next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// add new key</span></span><br><span class="line">ListNode newNode = <span class="keyword">new</span> ListNode(key, value);</span><br><span class="line">addNodeToTail(newNode);</span><br><span class="line">map.put(key, newNode);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushback</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">ListNode curNode = map.get(key);</span><br><span class="line">deleteNode(curNode);</span><br><span class="line">addNodeToTail(curNode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addNodeToTail</span><span class="params">(ListNode curNode)</span> </span>&#123;</span><br><span class="line">ListNode prevTailNode = tail.prev;</span><br><span class="line">prevTailNode.next = curNode;</span><br><span class="line">curNode.prev = prevTailNode;</span><br><span class="line">curNode.next = tail;</span><br><span class="line">tail.prev = curNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// delete head node and updated node</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode curNode)</span> </span>&#123;</span><br><span class="line">ListNode nextNode = curNode.next;</span><br><span class="line">ListNode prevNode = curNode.prev;</span><br><span class="line">prevNode.next = nextNode;</span><br><span class="line">nextNode.prev = prevNode;</span><br><span class="line">curNode.next = <span class="keyword">null</span>;</span><br><span class="line">curNode.prev = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> key;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">public</span> ListNode next;</span><br><span class="line"><span class="keyword">public</span> ListNode prev;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ListNode</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.key = key;</span><br><span class="line"><span class="keyword">this</span>.val = val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(1)</code>，空间复杂度为<code>O(n)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/lru-cache/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 146 LRU Cache&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;b
      
    
    </summary>
    
    
      <category term="Hash Table" scheme="https://shineboy2013.github.com/tags/Hash-Table/"/>
    
      <category term="Classic" scheme="https://shineboy2013.github.com/tags/Classic/"/>
    
      <category term="Linked List" scheme="https://shineboy2013.github.com/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 126 Word Ladder II</title>
    <link href="https://shineboy2013.github.com/2020/05/03/lee-126/"/>
    <id>https://shineboy2013.github.com/2020/05/03/lee-126/</id>
    <published>2020-05-04T01:09:53.727Z</published>
    <updated>2021-10-25T04:21:03.063Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/word-ladder-ii/" target="_blank" rel="noopener">LeetCode 126 Word Ladder</a></strong></p><div><br><br>Given two words (<em>beginWord</em> and <em>endWord</em>), and a dictionary’s word list, find all shortest transformation sequence(s) from <em>beginWord</em> to <em>endWord</em>, such that:<br><br>1.  Only one letter can be changed at a time<br>2.  Each transformed word must exist in the word list. Note that <em>beginWord</em> is <em>not</em> a transformed word.<br><br><strong>Note:</strong><br><br><em>   Return an empty list if there is no such transformation sequence.</em>   All words have the same length.<br><em>   All words contain only lowercase alphabetic characters.</em>   You may assume no duplicates in the word list.<br><em>   You may assume <em>beginWord</em> and <em>endWord</em> are non-empty and are not the same.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong><br>beginWord = “hit”,<br>endWord = “cog”,<br>wordList = [“hot”,”dot”,”dog”,”lot”,”log”,”cog”]<br><br><strong>Output:</strong><br>[<br>  [“hit”,”hot”,”dot”,”dog”,”cog”],<br>  [“hit”,”hot”,”lot”,”log”,”cog”]<br>]<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong><br>beginWord = “hit”<br>endWord = “cog”<br>wordList = [“hot”,”dot”,”dog”,”lot”,”log”]<br><br><strong>Output:</strong> []<br><br><em>*Explanation:</em></pre></em> The endWord “cog” is not in wordList, therefore no possibletransformation.<br><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>给定一个字典和两个单词。每次变换一个字母的得到新单词且该词要在字典中。求所有最少的变换路径。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>更难于Leetcode 127，BFS用于找最短路径而DFS找路径，此题正是贯彻这一思想，先用BFS找出最短路径，<br>然后根据最短路径值找出所有路径。找BFS解的同时建图用邻接表表示Map<string, list<string="">&gt;(这是<br>部分图，与解相关的图)和解集合Map<string, integer="">(从始点到不同节点的最短距离)，这两个信息正是<br>Dijkistra的图输入和解。DFS从始点开始遍历邻接节点，确保沿着最短路径走，最短路径为<br>map.get(cur)+1=map.get(next)表示当前节点到始点距离+1=儿节点到始点距离，终止条件为找到目标节点。  </string,></string,></p><ol><li>在遍历所有邻接节点的时候，如果不加筛选对所有邻接节点都做DFS会造成LTE。关键是要利用BFS中所有<br>节点到单源的最短路径来剪枝。只需DFS最短路径上的节点，否则跳过。  </li><li>利用了单源最短路径映射表distance后，不需要记录visited，因为重复的节点不会在最短路劲上。  </li><li>Cache nextWords的结果。     </li></ol><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>这题是最短路径题，第一时间想到BFS。这是一条典型的单源最短路径问题。  </p><ol><li>建字典。  </li><li>BFS访问，得到图和单源最短路径Map，以及最短路径距离。  </li><li>DFS求路径，按最短路径剪枝。    </li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>建图要先建点，再建边。若不先建点，graph.get(cur)会NPE。在BFS中发生.  </li><li>DFS中用BFS的解来剪边。  </li></ol><h3 id="Java代码："><a href="#Java代码：" class="headerlink" title="Java代码："></a><strong>Java代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; findLadders(String beginWord, String endWord, List&lt;String&gt; wordList) &#123;</span><br><span class="line">List&lt;String&gt; path = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span>(beginWord == <span class="keyword">null</span> || endWord == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is a dict and also keeps track of distance</span></span><br><span class="line">Map&lt;String, Integer&gt; dict = getDict(wordList);</span><br><span class="line"><span class="comment">// Make sure endWord is in the dict and can be the next word </span></span><br><span class="line"><span class="comment">//dict.put(endWord, 0);</span></span><br><span class="line">dict.put(beginWord, <span class="number">1</span>);</span><br><span class="line">HashMap&lt;String, List&lt;String&gt;&gt; graph = <span class="keyword">new</span> HashMap&lt;String, List&lt;String&gt;&gt;();</span><br><span class="line">ladderLength(beginWord, endWord, dict, graph);</span><br><span class="line">path.add(beginWord);</span><br><span class="line">dfs(beginWord, endWord, dict, graph, path, res);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(String cur, String endWord, Map&lt;String, Integer&gt; distance,</span></span></span><br><span class="line"><span class="function"><span class="params">HashMap&lt;String, List&lt;String&gt;&gt; graph, List&lt;String&gt; path, List&lt;List&lt;String&gt;&gt; res)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(endWord.equals(cur)) &#123;</span><br><span class="line">res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(String word : graph.get(cur)) &#123;</span><br><span class="line">path.add(word);</span><br><span class="line"><span class="keyword">if</span>(distance.get(word) - <span class="number">1</span> == distance.get(cur)) <span class="comment">// use distance, resolve LTE the most important</span></span><br><span class="line">dfs(word, endWord, distance, graph, path, res);</span><br><span class="line">path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// cache getNextWords</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ladderLength</span><span class="params">(String beginWord, String endWord, Map&lt;String, Integer&gt; dict, Map&lt;String, List&lt;String&gt;&gt; graph)</span> </span>&#123;</span><br><span class="line">Set&lt;String&gt; visited = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">Queue&lt;String&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">q.offer(beginWord);</span><br><span class="line">visited.add(beginWord);</span><br><span class="line"><span class="keyword">for</span>(String s : dict.keySet()) &#123;<span class="comment">// remember</span></span><br><span class="line">graph.put(s, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.isEmpty()) &#123;</span><br><span class="line">String word = q.poll();</span><br><span class="line"><span class="keyword">if</span>(endWord.equals(word))</span><br><span class="line"><span class="keyword">return</span> dict.get(word);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; nextWords = getNextWords(word, dict);</span><br><span class="line">graph.put(word, <span class="keyword">new</span> ArrayList&lt;&gt;(nextWords));</span><br><span class="line"><span class="keyword">for</span>(String s : nextWords) &#123;</span><br><span class="line"><span class="keyword">if</span>(visited.contains(s))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">q.offer(s);</span><br><span class="line">visited.add(s);</span><br><span class="line">dict.put(s, dict.get(word) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Map&lt;String, Integer&gt; <span class="title">getDict</span><span class="params">(List&lt;String&gt; wordList)</span> </span>&#123;</span><br><span class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(String word : wordList) &#123;</span><br><span class="line">map.put(word, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;String&gt; <span class="title">getNextWords</span><span class="params">(String word, Map&lt;String, Integer&gt; dict)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j++) &#123; </span><br><span class="line"><span class="keyword">char</span> newChar = (<span class="keyword">char</span>)(<span class="string">'a'</span> + j);</span><br><span class="line"><span class="keyword">if</span>(word.charAt(i) == newChar) <span class="comment">// exclude itself</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">String newWord = word.substring(<span class="number">0</span>, i) + </span><br><span class="line">newChar + word.substring(i + <span class="number">1</span>, word.length());</span><br><span class="line"><span class="keyword">if</span>(dict.containsKey(newWord))</span><br><span class="line">result.add(newWord);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>getNextWords是L<em>26</em>L=<code>O(<em>L</em><sup>2</sup>)</code>产生新字符串需要L<br>时间复杂度为<code>O(n<em><em>L</em><sup>2</sup> + m</em>k)</code>，空间复杂度<code>O(n)</code>，m为答案个数, k为最短路径值，n为单词数。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/word-ladder-ii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 126 Word Ladder&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Depth-first Search" scheme="https://shineboy2013.github.com/tags/Depth-first-Search/"/>
    
      <category term="Classic" scheme="https://shineboy2013.github.com/tags/Classic/"/>
    
      <category term="Breadth-first Search" scheme="https://shineboy2013.github.com/tags/Breadth-first-Search/"/>
    
  </entry>
  
  <entry>
    <title>组合</title>
    <link href="https://shineboy2013.github.com/2020/05/03/combination/"/>
    <id>https://shineboy2013.github.com/2020/05/03/combination/</id>
    <published>2020-05-03T21:53:45.466Z</published>
    <updated>2021-10-24T07:20:16.640Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a><strong>算法思路：</strong></h3><p>Leetcode 078的题目。这里作为知识点归纳。  </p><ol><li>递归中i=st开始。  </li><li>回溯： path递归后去恢复状态。  </li><li>dfs中传入i+1。  </li><li>结果要复制new ArrayList&lt;&gt;(path)  </li><li>一般来说，终止条件才加入结果，但由于子集任何path修改都是子集，所有立即加入。  </li></ol><p>和全排列的区别：  </p><ol><li>由于排列可以乱序如[1,2,3]结果是[1,3,2]也就是一个结果需要多次从左向右完全扫描，所以i=0开始且维护visited数组<br>组合的结果是按照数组顺序的，所以只要从左到右扫描一次即可，所以用i=st。  </li><li>结果方面，排列结果是满长度，而组合不是。所以在加入到res位置不同。  </li></ol><h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a><strong>应用：</strong></h3><ol><li>找所有可能性</li></ol><h3 id="Java代码："><a href="#Java代码：" class="headerlink" title="Java代码："></a><strong>Java代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">List&lt;Integer&gt; path = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path)); <span class="comment">//empty set</span></span><br><span class="line"><span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">dfs(nums, <span class="number">0</span>, path, res);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> st, List&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; res)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(st == nums.length)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = st; i &lt; nums.length; i++) &#123;</span><br><span class="line">path.add(nums[i]);</span><br><span class="line">res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">dfs(nums, i + <span class="number">1</span>, path, res);</span><br><span class="line">path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(<em>2</em><sup>n</sup>)</code> ，空间复杂度<code>O(1)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;算法思路：&quot;&gt;&lt;a href=&quot;#算法思路：&quot; class=&quot;headerlink&quot; title=&quot;算法思路：&quot;&gt;&lt;/a&gt;&lt;strong&gt;算法思路：&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Leetcode 078的题目。这里作为知识点归纳。  &lt;/p&gt;
&lt;ol&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="Knowledge Base" scheme="https://shineboy2013.github.com/tags/Knowledge-Base/"/>
    
  </entry>
  
  <entry>
    <title>排列</title>
    <link href="https://shineboy2013.github.com/2020/05/03/permutation/"/>
    <id>https://shineboy2013.github.com/2020/05/03/permutation/</id>
    <published>2020-05-03T21:48:49.111Z</published>
    <updated>2020-05-03T21:57:41.620Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a><strong>算法思路：</strong></h3><p>Leetcode 046的题目。这里作为知识点归纳。  </p><ol><li>类似于组合题，但用到了visited数组且递归中从i=0开始。  </li></ol><h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a><strong>应用：</strong></h3><ol><li>找所有可能性</li></ol><h3 id="Java代码："><a href="#Java代码：" class="headerlink" title="Java代码："></a><strong>Java代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">List&lt;Integer&gt; path = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span>(nums == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">dfs(nums, <span class="keyword">new</span> HashSet&lt;&gt;(), path, res);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] nums, Set&lt;Integer&gt; visited, List&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; res)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(path.size() == nums.length) &#123;</span><br><span class="line">res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(visited.contains(i))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">visited.add(i);</span><br><span class="line">path.add(nums[i]);</span><br><span class="line">dfs(nums, visited, path, res);</span><br><span class="line">visited.remove(i);</span><br><span class="line">path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n!)</code>，空间复杂度<code>O(1)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;算法思路：&quot;&gt;&lt;a href=&quot;#算法思路：&quot; class=&quot;headerlink&quot; title=&quot;算法思路：&quot;&gt;&lt;/a&gt;&lt;strong&gt;算法思路：&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Leetcode 046的题目。这里作为知识点归纳。  &lt;/p&gt;
&lt;ol&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="Knowledge Base" scheme="https://shineboy2013.github.com/tags/Knowledge-Base/"/>
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="https://shineboy2013.github.com/2020/04/26/quick-sort/"/>
    <id>https://shineboy2013.github.com/2020/04/26/quick-sort/</id>
    <published>2020-04-27T06:45:44.547Z</published>
    <updated>2021-10-30T06:16:51.942Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a><strong>算法思路：</strong></h3><ol><li>递归找pivot，然后按小于pivot和大于等于pivot分成两组。每轮递归，pivot肯定在正确（最终）位置上</li><li>partition方法类似于Leetcode75的sort colors一样用两个指针i和noSmallerIdx。i是循环指针，而<br>noSmallerIdx是第二组大于等于pivot的首元素，或者理解为比pivot小的元素（指针i指着）将要被交换<br>的位置（比pivot大的元素）=比pivot小的元素的最后一个+1.  </li><li>循环结束后，将pivot交换到正确的位置上。  </li></ol><p><img src="/images/quicksort.png" alt=""><br>i指向4，因为4小于pivot，所以要换到前面去，跟6置换，noSmallerIdx向后移。  </p><h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a><strong>应用：</strong></h3><ol><li>排序</li><li>快速选择quick select</li><li>partition，如Leetcode 75</li></ol><h3 id="Java代码："><a href="#Java代码：" class="headerlink" title="Java代码："></a><strong>Java代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(arr == <span class="keyword">null</span> || arr.length == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(left &gt;= right)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> pivotPos = partition(arr, left, right);</span><br><span class="line">quickSort(arr, left, pivotPos - <span class="number">1</span>);</span><br><span class="line">quickSort(arr, pivotPos + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> noSmallerIdx = left;</span><br><span class="line"><span class="keyword">int</span> pivot = arr[right];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = left; i &lt; right; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i] &lt; pivot) </span><br><span class="line">swap(arr, noSmallerIdx++, i);</span><br><span class="line">&#125;</span><br><span class="line">swap(arr, noSmallerIdx, right);</span><br><span class="line"><span class="keyword">return</span> noSmallerIdx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(nlogn)</code>，空间复杂度<code>O(1)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;算法思路：&quot;&gt;&lt;a href=&quot;#算法思路：&quot; class=&quot;headerlink&quot; title=&quot;算法思路：&quot;&gt;&lt;/a&gt;&lt;strong&gt;算法思路：&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;递归找pivot，然后按小于pivot和大于等于pivot分成两组。每
      
    
    </summary>
    
    
      <category term="Knowledge Base" scheme="https://shineboy2013.github.com/tags/Knowledge-Base/"/>
    
  </entry>
  
  <entry>
    <title>BST的非递归中序遍历</title>
    <link href="https://shineboy2013.github.com/2020/04/26/bst-iterative/"/>
    <id>https://shineboy2013.github.com/2020/04/26/bst-iterative/</id>
    <published>2020-04-26T18:52:08.235Z</published>
    <updated>2021-10-31T09:22:18.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a><strong>算法思路：</strong></h3><ol><li>首先初始化将root的所有左儿子加入到stack。</li><li>开始循环，取出节点，判断其右儿子不为空，因为左儿子已经访问过。  </li><li>若右子树不为空，跟初始化一样，将右子树的所有左儿子加入到栈中。  </li><li>用到两个指针node和n，分别指向出栈节点和遍历所有左儿子节点。  </li></ol><p>若前序遍历，只要把打印语句从出栈时打印移到入栈时打印即可。见L144</p><h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a><strong>应用：</strong></h3><ol><li>BST的关于Iterator的题目<a href="https://shineboy2013.github.io/2020/04/26/lee-173/" target="_blank" rel="noopener">Leetcode 173</a></li><li>不需要遍历所有节点而需要遍历某些节点的题目如求某target最接近N个节点。<a href="https://shineboy2013.github.io/2020/04/26/lee-272/" target="_blank" rel="noopener">Leetcode 272</a></li></ol><h3 id="Java代码："><a href="#Java代码：" class="headerlink" title="Java代码："></a><strong>Java代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">iterativeInorder</span><span class="params">(BinaryNode p)</span> </span>&#123;  </span><br><span class="line">Stack&lt;BinaryNode&gt; stack = <span class="keyword">new</span> Stack&lt;BinaryNode&gt;();  </span><br><span class="line">BinaryNode head = p;</span><br><span class="line"><span class="keyword">while</span>(head != <span class="keyword">null</span>) &#123;</span><br><span class="line">stack.push(head);</span><br><span class="line">head = head.left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BinaryNode node = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span> (stack.size() &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">node = stack.pop();</span><br><span class="line">System.out.print(node.data);</span><br><span class="line"><span class="keyword">if</span>(node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">BinaryNode n = node.right; </span><br><span class="line"><span class="keyword">while</span>(n != <span class="keyword">null</span>) &#123;</span><br><span class="line">stack.push(n);</span><br><span class="line">n = n.left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，n为字符串长度，空间复杂度<code>O(logn)</code>，最差为<code>O(n)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;算法思路：&quot;&gt;&lt;a href=&quot;#算法思路：&quot; class=&quot;headerlink&quot; title=&quot;算法思路：&quot;&gt;&lt;/a&gt;&lt;strong&gt;算法思路：&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;首先初始化将root的所有左儿子加入到stack。&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="Knowledge Base" scheme="https://shineboy2013.github.com/tags/Knowledge-Base/"/>
    
  </entry>
  
</feed>
