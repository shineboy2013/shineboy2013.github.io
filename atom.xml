<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jiajie&#39;s blog</title>
  
  <subtitle>每天积累多一些</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shineboy2013.github.com/"/>
  <updated>2021-11-15T07:05:44.969Z</updated>
  <id>https://shineboy2013.github.com/</id>
  
  <author>
    <name>KK Shum</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Heap</title>
    <link href="https://shineboy2013.github.com/2021/11/14/heap/"/>
    <id>https://shineboy2013.github.com/2021/11/14/heap/</id>
    <published>2021-11-15T07:01:39.803Z</published>
    <updated>2021-11-15T07:05:44.969Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a><strong>算法思路：</strong></h3><p>最小堆可以维持堆顶元素为最小值。    </p><h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a><strong>应用：</strong></h3><ol><li>求数组第k个大的数  </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> heapreplace, heappush</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">min_heap</span><span class="params">(self, nums: List[int], k: int)</span> -&gt; List[int]:</span></span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line"><span class="keyword">if</span> i &lt; k:</span><br><span class="line">heappush(res, nums[i])</span><br><span class="line"><span class="keyword">elif</span> nums[i] &gt; res[<span class="number">0</span>]:</span><br><span class="line">heapreplace(res, nums[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(nlogk)</code>，空间复杂度<code>O(1)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;算法思路：&quot;&gt;&lt;a href=&quot;#算法思路：&quot; class=&quot;headerlink&quot; title=&quot;算法思路：&quot;&gt;&lt;/a&gt;&lt;strong&gt;算法思路：&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;最小堆可以维持堆顶元素为最小值。    &lt;/p&gt;
&lt;h3 id=&quot;应用：&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="Knowledge Base" scheme="https://shineboy2013.github.com/tags/Knowledge-Base/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 378 Kth Smallest Element in a Sorted Matrix</title>
    <link href="https://shineboy2013.github.com/2021/11/14/lee-378/"/>
    <id>https://shineboy2013.github.com/2021/11/14/lee-378/</id>
    <published>2021-11-14T10:06:23.335Z</published>
    <updated>2021-11-14T10:49:43.873Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/" target="_blank" rel="noopener">LeetCode 378 Kth Smallest Element in a Sorted Matrix</a></strong></p><p>Given an <code>n x n</code> <code>matrix</code> where each of the rows and columns is sorted in ascending order, return <em>the</em> <code>k&lt;sup&gt;th&lt;/sup&gt;</code> <em>smallest element in the matrix</em>.</p><p>Note that it is the <code>k&lt;sup&gt;th&lt;/sup&gt;</code> smallest element <strong>in the sorted order</strong>, not the <code>k&lt;sup&gt;th&lt;/sup&gt;</code> <strong>distinct</strong> element.</p><p>You must find a solution with complexity better than <code>O(n&lt;sup&gt;2&lt;/sup&gt;)</code>.</p><p><strong>Example 1:</strong></p><pre>**Input:** matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8**Output:** 13**Explanation:** The elements in the matrix are [1,5,9,10,11,12,13,<u>**13**</u>,15], and the 8<sup>th</sup> smallest number is 13</pre><p><strong>Example 2:</strong></p><pre>**Input:** matrix = [[-5]], k = 1**Output:** -5</pre><p><strong>Constraints:</strong></p><ul><li><code>n == matrix.length == matrix[i].length</code></li><li><code>1 &lt;= n &lt;= 300</code></li><li><code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= matrix[i][j] &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code></li><li>All the rows and columns of <code>matrix</code> are <strong>guaranteed</strong> to be sorted in <strong>non-decreasing order</strong>.</li><li><code>1 &lt;= k &lt;= n&lt;sup&gt;2&lt;/sup&gt;</code></li></ul><p><strong>Follow up:</strong> Could you solve the problem in <code>O(n)</code> time complexity?</p><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>按行按列有序矩阵中，找第k大的数。  </p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>第k的数运用数值二分法  </p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><ol><li>数值二分法  </li><li>难点在于统计小于mid的个数。若遍历全矩阵比较慢，采用按行遍历，每行再用二分法找到小于mid的数的个数，再求和。  </li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>注意k–, k从1开始</li><li>每行统计小于mid个数用find smaller的模板     </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kthSmallest</span><span class="params">(self, matrix: List[List[int]], k: int)</span> -&gt; int:</span></span><br><span class="line">k -= <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> matrix <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> len(matrix) == <span class="number">0</span> <span class="keyword">or</span> len(matrix[<span class="number">0</span>]) == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">N, M = len(matrix), len(matrix[<span class="number">0</span>])</span><br><span class="line">start, end, epsilon = matrix[<span class="number">0</span>][<span class="number">0</span>], matrix[N - <span class="number">1</span>][M - <span class="number">1</span>], <span class="number">0.5</span></span><br><span class="line"><span class="keyword">while</span> end - start &gt; epsilon:</span><br><span class="line">mid = start + (end - start) / <span class="number">2</span></span><br><span class="line">count = sum([self.get_count(matrix[i], mid) <span class="keyword">for</span> i <span class="keyword">in</span> range(N)])</span><br><span class="line"><span class="keyword">if</span> count &lt;= k:</span><br><span class="line">start = mid</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">end = mid</span><br><span class="line"><span class="keyword">return</span> math.floor(end)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_count</span><span class="params">(self, nums: List[int], target: float)</span> -&gt; int:</span></span><br><span class="line">start, end = <span class="number">0</span>, len(nums) - <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> start + <span class="number">1</span> &lt; end:</span><br><span class="line">mid = start + (end - start) // <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> target &gt; nums[mid]:</span><br><span class="line">start = mid</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">end = mid</span><br><span class="line"><span class="keyword">if</span> nums[end] &lt; target:</span><br><span class="line"><span class="keyword">return</span> end + <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> nums[start] &lt; target:</span><br><span class="line"><span class="keyword">return</span> start + <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>while循环有log[(max - min)/epsilon]个，假设数字平均分布，复杂度是log(n), 每个循环按每行(n行)统计小于mid的个数，<br>每次统计调用get_count用了log(n)，<br>所以总时间复杂度为<code>O(log(n) * nlogn)</code>，空间复杂度<code>O(1)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 378 Kth 
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Python KB" scheme="https://shineboy2013.github.com/tags/Python-KB/"/>
    
      <category term="Binary Search" scheme="https://shineboy2013.github.com/tags/Binary-Search/"/>
    
      <category term="Matrix" scheme="https://shineboy2013.github.com/tags/Matrix/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 2073 Time Needed to Buy Tickets</title>
    <link href="https://shineboy2013.github.com/2021/11/14/lee-2073/"/>
    <id>https://shineboy2013.github.com/2021/11/14/lee-2073/</id>
    <published>2021-11-14T08:10:54.262Z</published>
    <updated>2021-11-14T08:27:35.484Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/time-needed-to-buy-tickets/" target="_blank" rel="noopener">LeetCode 2073 Time Needed to Buy Tickets</a></strong></p><div><br><br>There are <code>n</code> people in a line queuing to buy tickets, where the <code>0&lt;sup&gt;th&lt;/sup&gt;</code> person is at the <strong>front</strong> of the line and the <code>(n - 1)&lt;sup&gt;th&lt;/sup&gt;</code> person is at the <strong>back</strong> of the line.<br><br>You are given a <strong>0-indexed</strong> integer array <code>tickets</code> of length <code>n</code> where the number of tickets that the <code>i&lt;sup&gt;th&lt;/sup&gt;</code> person would like to buy is <code>tickets[i]</code>.<br><br>Each person takes <strong>exactly 1 second</strong> to buy a ticket. A person can only buy <strong>1 ticket at a time</strong> and has to go back to <strong>the end</strong> of the line (which happens <strong>instantaneously</strong>) in order to buy more tickets. If a person does not have any tickets left to buy, the person will <strong>leave</strong> the line.<br><br>Return <em>the <strong>time taken</strong> for the person at position</em> <code>k</code><strong><em>(0-indexed)</em> </strong><em>to finish buying tickets</em>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> tickets = [2,3,2], k = 2<br><strong>Output:</strong> 6<br><strong>Explanation:</strong><br>- In the first pass, everyone in the line buys a ticket and the line becomes [1, 2, 1].<br>- In the second pass, everyone in the line buys a ticket and the line becomes [0, 1, 0].<br>The person at position 2 has successfully bought 2 tickets and it took 3 + 3 = 6 seconds.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> tickets = [5,1,1,1], k = 0<br><strong>Output:</strong> 8<br><strong>Explanation:</strong><br>- In the first pass, everyone in the line buys a ticket and the line becomes [4, 0, 0, 0].<br>- In the next 4 passes, only the person in position 0 is buying tickets.<br>The person at position 0 has successfully bought 5 tickets and it took 4 + 1 + 1 + 1 + 1 = 8 seconds.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>n == tickets.length</code></em>   <code>1 &lt;= n &lt;= 100</code><br><em>   <code>1 &lt;= tickets[i] &lt;= 100</code></em>   <code>0 &lt;= k &lt; n</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>排队买票，每个人都有不同的票数需求。每人每次只能买一张，买完后重新排队。买一张票需要1秒，求第k个人买票的总时间。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>一开始按照题目要求老老实实每个元素减一，按照流程计算，但效率较低。考虑若所有人票数大于0，每轮计算结果是一样的：<br>当前排队人数乘以排队的人中的最小票数。当最小票数人离队后，公式会改变。如此循环直到第k个人票数也变成0为止。         </p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><ol><li>求最小值  </li><li>计算票数</li><li>更新人数，继续循环</li><li>结果减去排在第k个人后的人数  </li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>结果要减去排在第k个人后的还在排队的人数（tickets数不为负数，可以等于0，因为是同时在同一轮买到足够票）。  </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeRequiredToBuy</span><span class="params">(self, tickets: List[int], k: int)</span> -&gt; int:</span></span><br><span class="line">sum, ppl, min_tickets = <span class="number">0</span>, len(tickets), <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> tickets[k] &gt; <span class="number">0</span>:</span><br><span class="line">min_tickets = min(t <span class="keyword">for</span> t <span class="keyword">in</span> tickets <span class="keyword">if</span> t &gt; <span class="number">0</span>)</span><br><span class="line">sum += min_tickets * ppl</span><br><span class="line">tickets = [t - min_tickets <span class="keyword">for</span> t <span class="keyword">in</span> tickets]</span><br><span class="line">ppl -= tickets.count(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">after_k = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(k + <span class="number">1</span>, len(tickets)) <span class="keyword">if</span> tickets[i] &gt;= <span class="number">0</span>]</span><br><span class="line"><span class="keyword">return</span> sum - len(after_k)</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/time-needed-to-buy-tickets/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 2073 Time Needed to B
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Python KB" scheme="https://shineboy2013.github.com/tags/Python-KB/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 2074 Reverse Nodes in Even Length Groups</title>
    <link href="https://shineboy2013.github.com/2021/11/13/lee-2074/"/>
    <id>https://shineboy2013.github.com/2021/11/13/lee-2074/</id>
    <published>2021-11-14T07:22:24.952Z</published>
    <updated>2021-11-14T07:40:50.248Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/reverse-nodes-in-even-length-groups/" target="_blank" rel="noopener">LeetCode 2074 Reverse Nodes in Even Length Groups</a></strong></p><div><br><br>You are given the <code>head</code> of a linked list.<br><br>The nodes in the linked list are <strong>sequentially</strong> assigned to <strong>non-empty</strong> groups whose lengths form the sequence of the natural numbers (<code>1, 2, 3, 4, ...</code>). The <strong>length</strong> of a group is the number of nodes assigned to it. In other words,<br><br><em>   The <code>1&lt;sup&gt;st&lt;/sup&gt;</code> node is assigned to the first group.</em>   The <code>2&lt;sup&gt;nd&lt;/sup&gt;</code> and the <code>3&lt;sup&gt;rd&lt;/sup&gt;</code> nodes are assigned to the second group.<br><em>   The <code>4&lt;sup&gt;th&lt;/sup&gt;</code>, <code>5&lt;sup&gt;th&lt;/sup&gt;</code>, and <code>6&lt;sup&gt;th&lt;/sup&gt;</code> nodes are assigned to the third group, and so on.<br><br>Note that the length of the last group may be less than or equal to <code>1 + the length of the second to last group</code>.<br><br><strong>Reverse</strong> the nodes in each group with an <strong>even</strong> length, and return <em>the</em> <code>head</code> <em>of the modified linked list</em>.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/10/25/eg1.png" alt=""><br><br><pre><strong>Input:</strong> head = [5,2,6,3,9,1,7,3,8,4]<br><strong>Output:</strong> [5,6,2,3,9,1,4,8,3,7]<br><strong>Explanation:</strong><br>- The length of the first group is 1, which is odd, hence no reversal occurrs.<br>- The length of the second group is 2, which is even, hence the nodes are reversed.<br>- The length of the third group is 3, which is odd, hence no reversal occurrs.<br>- The length of the last group is 4, which is even, hence the nodes are reversed.<br></pre><br><br><strong>Example 2:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/10/25/eg2.png" alt=""><br><br><pre><strong>Input:</strong> head = [1,1,0,6]<br><strong>Output:</strong> [1,0,1,6]<br><strong>Explanation:</strong><br>- The length of the first group is 1. No reversal occurrs.<br>- The length of the second group is 2. The nodes are reversed.<br>- The length of the last group is 1. No reversal occurrs.<br></pre><br><br><strong>Example 3:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/10/28/eg3.png" alt=""><br><br><pre><strong>Input:</strong> head = [2,1]<br><strong>Output:</strong> [2,1]<br><strong>Explanation:</strong><br>- The length of the first group is 1. No reversal occurrs.<br>- The length of the last group is 1. No reversal occurrs.<br></pre><br><br><strong>Example 4:</strong><br><br><pre><strong>Input:</strong> head = [8]<br><strong>Output:</strong> [8]<br><strong>Explanation:</strong> There is only one group whose length is 1. No reversal occurrs.<br></pre><br><br><strong>Constraints:</strong></em>   The number of nodes in the list is in the range <code>[1, 10&lt;sup&gt;5&lt;/sup&gt;]</code>.<br>*   <code>0 &lt;= Node.val &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>把链表分成1,2,3..n大小的组。若该组大小为偶数，反转链表。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>一开始考虑分奇偶组来处理，但忽略了最后一组也可能为偶数。用stack来，先做统计，若为偶数，就出栈且反转。<br>后来为了程序更加简洁，就独立一个函数出来按组处理。而每组用迭代将后续节点一个个加到上一组末节点和首节点之间。    </p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><ol><li>按组处理  </li><li>每组先统计个数，如果为偶数，反转链表  </li></ol><p>tail_of_last(group n) -&gt; tail(group n+1, head of group n+1 will become new tail after reversed)  -&gt; …<br>不断将tail后面的节点加到tail_of_last之后<br>tail_of_last(group n) -&gt; NodeA （新状态） -&gt; … -&gt; tail(group n+1)  -&gt; NodeA （前状态） -&gt; …   </p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>若最后一组不满为偶数，也要逆转。    </li><li>反转链表时，个数为这组大小减一，因为该组的首节点不用反转。  </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseEvenLengthGroups</span><span class="params">(self, head: Optional[ListNode])</span> -&gt; Optional[ListNode]:</span></span><br><span class="line">group, cur = <span class="number">2</span>, head</span><br><span class="line"><span class="keyword">while</span> cur.next:</span><br><span class="line">cur = self.process_one_group(cur, group)</span><br><span class="line">group += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_one_group</span><span class="params">(self, tail_of_last: ListNode, n: int)</span> -&gt; ListNode:</span></span><br><span class="line">cur, count = tail_of_last, <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> cur.next <span class="keyword">and</span> count &lt; n:</span><br><span class="line">cur = cur.next</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> count % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">tail = tail_of_last.next</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(count - <span class="number">1</span>):</span><br><span class="line">tmp = tail.next</span><br><span class="line">tail.next = tmp.next</span><br><span class="line">a = tail_of_last.next</span><br><span class="line">tail_of_last.next = tmp</span><br><span class="line">tmp.next = a</span><br><span class="line">cur = tail_of_last</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(count):</span><br><span class="line">cur = cur.next</span><br><span class="line"><span class="keyword">return</span> cur</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-nodes-in-even-length-groups/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 2074 Reverse
      
    
    </summary>
    
    
      <category term="Python KB" scheme="https://shineboy2013.github.com/tags/Python-KB/"/>
    
      <category term="Linked List" scheme="https://shineboy2013.github.com/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 275 H-Index II</title>
    <link href="https://shineboy2013.github.com/2021/11/13/lee-275/"/>
    <id>https://shineboy2013.github.com/2021/11/13/lee-275/</id>
    <published>2021-11-14T02:02:07.986Z</published>
    <updated>2021-11-14T10:42:19.286Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/h-index-ii/" target="_blank" rel="noopener">LeetCode 275 H-Index II</a></strong></p><p>Given an array of integers <code>citations</code> where <code>citations[i]</code> is the number of citations a researcher received for their <code>i&lt;sup&gt;th&lt;/sup&gt;</code> paper and <code>citations</code> is sorted in an <strong>ascending order</strong>, return compute the researcher's <code>h</code><strong>-index</strong>.</p><p>According to the <a href="https://en.wikipedia.org/wiki/H-index" target="_blank" rel="noopener">definition of h-index on Wikipedia</a>: A scientist has an index <code>h</code> if <code>h</code> of their <code>n</code> papers have at least <code>h</code> citations each, and the other <code>n − h</code> papers have no more than <code>h</code> citations each.</p><p>If there are several possible values for <code>h</code>, the maximum one is taken as the <code>h</code><strong>-index</strong>.</p><p>You must write an algorithm that runs in logarithmic time.</p><p><strong>Example 1:</strong></p><p>&lt;pre&gt;<strong>Input:</strong> citations = [0,1,3,5,6]<strong>Output:</strong> 3<strong>Explanation:</strong> [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.&lt;/pre&gt;</p><p><strong>Example 2:</strong></p><p>&lt;pre&gt;<strong>Input:</strong> citations = [1,2,100]<strong>Output:</strong> 2&lt;/pre&gt;</p><p><strong>Constraints:</strong></p><ul><li><code>n == citations.length</code></li><li><code>1 &lt;= n &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></li><li><code>0 &lt;= citations[i] &lt;= 1000</code></li><li><code>citations</code> is sorted in <strong>ascending order</strong>.</li></ul><h3><strong>题目大意：</strong></h3><p>一个人的学术文章有n篇分别被引用了n次及以上，那么H指数就是n</p><h3><strong>解题思路：</strong></h3><p>数组有序，论文数从小到大有序(符合引用次数的论文数从右向左递减)，引用次数由小到大排序，所以只要从右向左遍历数组，数值和索引相交的值就是所求。</p><h3><strong>解题步骤：</strong></h3><p>二分法可提高效率，用的是</p><h3><strong>注意事项：</strong></h3><ol><li>此题是寻找单一目标，所以等号可以并入任一个if statement，但循环出来后，start必须先比较，因为贪婪法，下标越向左，越容易获得更大的结果。从这一意义上看，此题接近于first_position</li></ol><h3><strong>Python代码：</strong></h3><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hIndex</span><span class="params">(self, citations: List[int])</span> -&gt; int:</span></span><br><span class="line"><span class="keyword">if</span> citations <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> len(citations) == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">start, end = <span class="number">0</span>, len(citations) - <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> start + <span class="number">1</span> &lt; end:</span><br><span class="line">mid = start + (end - start) // <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> citations[mid] &gt;= len(citations) - mid:</span><br><span class="line">end = mid</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">start = mid</span><br><span class="line"><span class="keyword">if</span> citations[start] &gt;= len(citations) - start:</span><br><span class="line"><span class="keyword">return</span> len(citations) - start</span><br><span class="line"><span class="keyword">if</span> citations[end] &gt;= len(citations) - end:</span><br><span class="line"><span class="keyword">return</span> len(citations) - end</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></p><h3><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(logn)</code>，空间复杂度<code>O(1)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/h-index-ii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 275 H-Index II&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Gi
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Python KB" scheme="https://shineboy2013.github.com/tags/Python-KB/"/>
    
      <category term="Binary Search" scheme="https://shineboy2013.github.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>算法知识点目录</title>
    <link href="https://shineboy2013.github.com/2021/11/13/kb-alg/"/>
    <id>https://shineboy2013.github.com/2021/11/13/kb-alg/</id>
    <published>2021-11-13T08:50:08.342Z</published>
    <updated>2021-11-15T09:27:37.287Z</updated>
    
    <content type="html"><![CDATA[<p><strong>数组题</strong><br><a href="https://shineboy2013.github.io/2018/03/13/lee-001/" target="_blank" rel="noopener">LeetCode 001 Two Sum</a><br><a href="https://shineboy2013.github.io/2021/11/14/lee-2073/" target="_blank" rel="noopener">LeetCode 2073 Time Needed to Buy Tickets</a></p><p><strong>整数题</strong><br><a href="https://shineboy2013.github.io/2021/10/21/lee-007/" target="_blank" rel="noopener">LeetCode 007 Reverse Integer</a></p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a><strong>Map</strong></h3><p><a href="https://shineboy2013.github.io/2021/07/27/lee-003/" target="_blank" rel="noopener">LeetCode 003 Longest Substring Without Repeating Characters</a></p><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a><strong>LinkedList</strong></h3><p><a href="https://shineboy2013.github.io/2021/07/27/lee-138/" target="_blank" rel="noopener">LeetCode 138 Copy List with Random Pointer</a><br><a href="https://shineboy2013.github.io/2021/11/13/lee-2074/" target="_blank" rel="noopener">LeetCode 2074 Reverse Nodes in Even Length Groups</a></p><h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a><strong>Stack</strong></h3><p><a href="https://shineboy2013.github.io/2021/10/30/stack/" target="_blank" rel="noopener">Stack</a><br><a href="https://shineboy2013.github.io/2018/01/28/lee-503/" target="_blank" rel="noopener">LeetCode 503 Next Greater Element II</a><br><a href="https://shineboy2013.github.io/2018/01/29/lee-253/" target="_blank" rel="noopener">LeetCode 253 Meeting Rooms II</a><br><a href="https://shineboy2013.github.io/2018/07/12/lee-042/" target="_blank" rel="noopener">LeetCode 042 Trapping Rain Water</a></p><h3 id="BST的非递归遍历"><a href="#BST的非递归遍历" class="headerlink" title="BST的非递归遍历"></a><strong>BST的非递归遍历</strong></h3><p><a href="https://shineboy2013.github.io/2020/04/26/bst-iterative/" target="_blank" rel="noopener">BST的非递归中序，前序，后序遍历</a> </p><h3 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a><strong>Heap</strong></h3><p><a href="https://shineboy2013.github.io/2021/11/14/heap/" target="_blank" rel="noopener">Heap</a><br><a href="https://shineboy2013.github.io/2017/12/31/lee-347/" target="_blank" rel="noopener">LeetCode 347 Top K Frequent Elements</a></p><h3 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a><strong>Binary Search</strong></h3><p><a href="https://shineboy2013.github.io/2020/04/21/binary-search/" target="_blank" rel="noopener">Binary Search</a><br><a href="https://shineboy2013.github.io/2021/11/13/lee-275/" target="_blank" rel="noopener">LeetCode 275 H-Index II</a><br><a href="https://shineboy2013.github.io/2021/11/14/lee-378/" target="_blank" rel="noopener">LeetCode 378 Kth Smallest Element in a Sorted Matrix</a></p><h3 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a><strong>Tree</strong></h3><p><a href="https://shineboy2013.github.io/2021/07/27/lee-104/" target="_blank" rel="noopener">LeetCode 104 Maximum Depth of Binary Tree</a></p><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a><strong>DFS</strong></h3><p><a href="https://shineboy2013.github.io/2021/10/21/lee-017/" target="_blank" rel="noopener">LeetCode 017 Letter Combinations of a Phone Number</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;数组题&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://shineboy2013.github.io/2018/03/13/lee-001/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 001 Two Sum&lt;
      
    
    </summary>
    
    
      <category term="Knowledge Base" scheme="https://shineboy2013.github.com/tags/Knowledge-Base/"/>
    
  </entry>
  
  <entry>
    <title>Stack</title>
    <link href="https://shineboy2013.github.com/2021/10/30/stack/"/>
    <id>https://shineboy2013.github.com/2021/10/30/stack/</id>
    <published>2021-10-30T08:10:59.930Z</published>
    <updated>2021-11-13T04:52:01.261Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a><strong>算法思路：</strong></h3><p>定义： 栈里元素维持由栈底到栈顶从大到小的顺序叫递减栈。跟最小堆一样，递减栈的<strong>栈首元素最小</strong>。<br><img src="/images/stack.png" alt="">  </p><p>反之是递增栈，不过此法因为用递减栈比较多，所以统称递减栈。通常是将下标而不是值放入到栈中，这样还可以知道元素间的距离。  </p><h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a><strong>应用：</strong></h3><ol><li>数组不能打乱顺序且求极值</li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>跟最小堆一样，当元素大于栈顶元素的时候才倒逼栈内元素出栈。    </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stack = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(list)):</span><br><span class="line"><span class="keyword">while</span> stack <span class="keyword">and</span> list[i] &gt; list[stack[<span class="number">-1</span>]]:</span><br><span class="line">index = stack.pop()</span><br><span class="line"></span><br><span class="line">stack.append(i)</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;算法思路：&quot;&gt;&lt;a href=&quot;#算法思路：&quot; class=&quot;headerlink&quot; title=&quot;算法思路：&quot;&gt;&lt;/a&gt;&lt;strong&gt;算法思路：&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;定义： 栈里元素维持由栈底到栈顶从大到小的顺序叫递减栈。跟最小堆一样，递减栈的&lt;s
      
    
    </summary>
    
    
      <category term="Knowledge Base" scheme="https://shineboy2013.github.com/tags/Knowledge-Base/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 017 Letter Combinations of a Phone Number</title>
    <link href="https://shineboy2013.github.com/2021/10/21/lee-017/"/>
    <id>https://shineboy2013.github.com/2021/10/21/lee-017/</id>
    <published>2021-10-21T08:32:45.432Z</published>
    <updated>2021-11-12T07:49:59.078Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener">LeetCode 017 Letter Combinations of a Phone Number</a></strong></p><p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent. Return the answer in <strong>any order</strong>.</p><p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt=""></p><p><strong>Example 1:</strong></p><pre>**Input:** digits = "23"**Output:** ["ad","ae","af","bd","be","bf","cd","ce","cf"]</pre><p><strong>Example 2:</strong></p><pre>**Input:** digits = ""**Output:** []</pre><p><strong>Example 3:</strong></p><pre>**Input:** digits = "2"**Output:** ["a","b","c"]</pre><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= digits.length &lt;= 4</code></li><li><code>digits[i]</code> is a digit in the range <code>[&#39;2&#39;, &#39;9&#39;]</code>.</li></ul><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>在拨号键盘上按下了几个键，问能打出来的字符串的所有组合是多少。。</p><h3 id="递归法解题思路："><a href="#递归法解题思路：" class="headerlink" title="递归法解题思路："></a><strong>递归法解题思路：</strong></h3><p>DFS的典型题目。  </p><p>与Java的区别：  </p><ol><li>直接用Str作为临时结果，不需要用char array，因为str可以含有array的性质  </li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>输入值为空的情况  </li><li>终止条件记得return</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">letterCombinations</span><span class="params">(self, digits: str)</span> -&gt; List[str]:</span></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">if</span> digits == <span class="string">''</span>:</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">digit2char = &#123;</span><br><span class="line"><span class="string">'0'</span>: <span class="string">''</span>,</span><br><span class="line"><span class="string">'1'</span>: <span class="string">''</span>,</span><br><span class="line"><span class="string">'2'</span>: <span class="string">'abc'</span>,</span><br><span class="line"><span class="string">'3'</span>: <span class="string">'def'</span>,</span><br><span class="line"><span class="string">'4'</span>: <span class="string">'ghi'</span>,</span><br><span class="line"><span class="string">'5'</span>: <span class="string">'jkl'</span>,</span><br><span class="line"><span class="string">'6'</span>: <span class="string">'mno'</span>,</span><br><span class="line"><span class="string">'7'</span>: <span class="string">'pqrs'</span>,</span><br><span class="line"><span class="string">'8'</span>: <span class="string">'tuv'</span>,</span><br><span class="line"><span class="string">'9'</span>: <span class="string">'wxyz'</span>,</span><br><span class="line">&#125;</span><br><span class="line">self.dfs(digits, <span class="number">0</span>, <span class="string">''</span>, result, digit2char)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, digits, start, path, result, digit2char)</span>:</span></span><br><span class="line"><span class="keyword">if</span> start == len(digits):</span><br><span class="line">result.append(path)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> digit2char[digits[start]]:</span><br><span class="line">self.dfs(digits, start + <span class="number">1</span>, path + letter, result, digit2char)</span><br></pre></td></tr></table></figure><h3 id="迭代法解题思路："><a href="#迭代法解题思路：" class="headerlink" title="迭代法解题思路："></a><strong>迭代法解题思路：</strong></h3><p>第二种方法，用迭代法，三种循环，输入数字串的每个数字，每个数字对应的字符加到当前的结果字符串列表中。 </p><h3 id="注意事项：-1"><a href="#注意事项：-1" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>要[‘’]而不是[]否则循环不会进行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">letterCombinations</span><span class="params">(self, digits: str)</span> -&gt; List[str]:</span></span><br><span class="line"><span class="keyword">if</span> digits == <span class="string">''</span>:</span><br><span class="line"><span class="keyword">return</span> []</span><br><span class="line">digit2char = &#123;</span><br><span class="line"><span class="string">'0'</span>: <span class="string">''</span>,</span><br><span class="line"><span class="string">'1'</span>: <span class="string">''</span>,</span><br><span class="line"><span class="string">'2'</span>: <span class="string">'abc'</span>,</span><br><span class="line"><span class="string">'3'</span>: <span class="string">'def'</span>,</span><br><span class="line"><span class="string">'4'</span>: <span class="string">'ghi'</span>,</span><br><span class="line"><span class="string">'5'</span>: <span class="string">'jkl'</span>,</span><br><span class="line"><span class="string">'6'</span>: <span class="string">'mno'</span>,</span><br><span class="line"><span class="string">'7'</span>: <span class="string">'pqrs'</span>,</span><br><span class="line"><span class="string">'8'</span>: <span class="string">'tuv'</span>,</span><br><span class="line"><span class="string">'9'</span>: <span class="string">'wxyz'</span>,</span><br><span class="line">&#125;</span><br><span class="line">result = [<span class="string">''</span>]</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> digits:</span><br><span class="line">result = [s + c <span class="keyword">for</span> s <span class="keyword">in</span> result <span class="keyword">for</span> c <span class="keyword">in</span> digit2char[d]]</span><br><span class="line"><span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>这是NP问题。时间复杂度为<code>O(<em>4</em><sup>n</sup>)</code>，空间复杂度<code>O(1)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/letter-combinations-of-a-phone-number/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 017 Letter
      
    
    </summary>
    
    
      <category term="Hash Table" scheme="https://shineboy2013.github.com/tags/Hash-Table/"/>
    
      <category term="Python KB" scheme="https://shineboy2013.github.com/tags/Python-KB/"/>
    
      <category term="String" scheme="https://shineboy2013.github.com/tags/String/"/>
    
      <category term="Backtracking" scheme="https://shineboy2013.github.com/tags/Backtracking/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 007 Reverse Integer</title>
    <link href="https://shineboy2013.github.com/2021/10/21/lee-007/"/>
    <id>https://shineboy2013.github.com/2021/10/21/lee-007/</id>
    <published>2021-10-21T08:13:52.713Z</published>
    <updated>2021-11-12T07:49:42.304Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/reverse-integer/" target="_blank" rel="noopener">LeetCode 007 Reverse Integer</a></strong></p><p>Given a signed 32-bit integer <code>x</code>, return <code>x</code> <em>with its digits reversed</em>. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range <code>[-2&lt;sup&gt;31&lt;/sup&gt;, 2&lt;sup&gt;31&lt;/sup&gt; - 1]</code>, then return <code>0</code>.</p><p><strong>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</strong></p><p><strong>Example 1:</strong></p><pre>**Input:** x = 123**Output:** 321</pre><p><strong>Example 2:</strong></p><pre>**Input:** x = -123**Output:** -321</pre><p><strong>Example 3:</strong></p><pre>**Input:** x = 120**Output:** 21</pre><p><strong>Example 4:</strong></p><pre>**Input:** x = 0**Output:** 0</pre><p><strong>Constraints:</strong></p><ul><li><code>-2&lt;sup&gt;31&lt;/sup&gt; &lt;= x &lt;= 2&lt;sup&gt;31&lt;/sup&gt; - 1</code></li></ul><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>反转整数中的数字。</p><h3 id="数学法解题思路："><a href="#数学法解题思路：" class="headerlink" title="数学法解题思路："></a><strong>数学法解题思路：</strong></h3><p>用数学方法每位取余，余数左移。另一种方法是转成字符串然后用字符串反转的方法。  </p><p>与Java的区别：  </p><ol><li>不需要定义long，因为Python3所有int默认都是long  </li><li>反转str一行完成，非常简洁  </li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>负值  </li><li>溢出    </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line">res, is_negative = <span class="number">0</span>, <span class="keyword">False</span></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">is_negative = <span class="keyword">True</span></span><br><span class="line">x = -x</span><br><span class="line"><span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">digit = x % <span class="number">10</span></span><br><span class="line">res = res * <span class="number">10</span> + digit</span><br><span class="line">x //= <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> res &gt; pow(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> is_negative:</span><br><span class="line">res = -res</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="字符串法解题思路："><a href="#字符串法解题思路：" class="headerlink" title="字符串法解题思路："></a><strong>字符串法解题思路：</strong></h3><p>转为字符串，然后反转。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line">res, is_negative = <span class="number">0</span>, <span class="keyword">False</span></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">is_negative = <span class="keyword">True</span></span><br><span class="line">x = -x</span><br><span class="line">res = int(str(x)[::<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">if</span> res &gt; pow(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> -res <span class="keyword">if</span> is_negative <span class="keyword">else</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><ol><li>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>。  </li><li>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-integer/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 007 Reverse Integer&lt;/a&gt;&lt;/strong&gt;
      
    
    </summary>
    
    
      <category term="Python KB" scheme="https://shineboy2013.github.com/tags/Python-KB/"/>
    
      <category term="Math" scheme="https://shineboy2013.github.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 104 Maximum Depth of Binary Tree</title>
    <link href="https://shineboy2013.github.com/2021/07/27/lee-104/"/>
    <id>https://shineboy2013.github.com/2021/07/27/lee-104/</id>
    <published>2021-07-28T04:03:44.554Z</published>
    <updated>2021-11-12T07:48:22.224Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noopener">LeetCode 104 Maximum Depth of Binary Tree</a></strong></p><p>Given the <code>root</code> of a binary tree, return <em>its maximum depth</em>.</p><p>A binary tree’s <strong>maximum depth</strong> is the number of nodes along the longest path from the root node down to the farthest leaf node.</p><p><strong>Example 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg" alt=""></p><pre>**Input:** root = [3,9,20,null,null,15,7]**Output:** 3</pre><p><strong>Example 2:</strong></p><pre>**Input:** root = [1,null,2]**Output:** 2</pre><p><strong>Example 3:</strong></p><pre>**Input:** root = []**Output:** 0</pre><p><strong>Example 4:</strong></p><pre>**Input:** root = [0]**Output:** 1</pre><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is in the range <code>[0, 10&lt;sup&gt;4&lt;/sup&gt;]</code>.</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求二叉树高度。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>公式dfs(root)=1+max(dfs(root.left),dfs(root.right))  </p><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line"><span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + max(self.maxDepth(root.left), self.maxDepth(root.right))</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/maximum-depth-of-binary-tree/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 104 Maximum Depth o
      
    
    </summary>
    
    
      <category term="Python KB" scheme="https://shineboy2013.github.com/tags/Python-KB/"/>
    
      <category term="Tree" scheme="https://shineboy2013.github.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 003 Longest Substring Without Repeating Characters</title>
    <link href="https://shineboy2013.github.com/2021/07/27/lee-003/"/>
    <id>https://shineboy2013.github.com/2021/07/27/lee-003/</id>
    <published>2021-07-27T09:14:55.922Z</published>
    <updated>2021-11-12T07:48:00.721Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">LeetCode 003 Longest Substring Without Repeating Characters</a></strong></p><p>Given a string <code>s</code>, find the length of the <strong>longest substring</strong> without repeating characters.</p><p><strong>Example 1:</strong></p><pre>**Input:** s = "abcabcbb"**Output:** 3**Explanation:** The answer is "abc", with the length of 3.</pre><p><strong>Example 2:</strong></p><pre>**Input:** s = "bbbbb"**Output:** 1**Explanation:** The answer is "b", with the length of 1.</pre><p><strong>Example 3:</strong></p><pre>**Input:** s = "pwwkew"**Output:** 3**Explanation:** The answer is "wke", with the length of 3.Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.</pre><p><strong>Example 4:</strong></p><pre>**Input:** s = ""**Output:** 0</pre><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= s.length &lt;= 5 * 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>s</code> consists of English letters, digits, symbols and spaces.</li></ul><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求最长不重复子串。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>HashMap和滑动窗口法，利用HashMap来记录这个窗口中所有字符的下标，该窗口中所有字符都不重复。<br>start_idx表示窗口的左界，而i是右界。左界=上次一次出现该字符的下标和目前左界的较大值，<br>因为Map中的某些字符可能已经不在窗口中，我没有把它从窗口中去掉，而是用start_idx来限制。  </p><p>要计算长度就要先计算start_idx，步骤：  </p><ol><li>计算start_idx  </li><li>计算长度  </li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>start_idx和前值比较  </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">start_idx, max_len = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">char_map = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line"><span class="keyword">if</span> s[i] <span class="keyword">in</span> char_map:</span><br><span class="line">start_idx = max(start_idx, char_map[s[i]] + <span class="number">1</span>)</span><br><span class="line">max_len = max(max_len, i - start_idx + <span class="number">1</span>)</span><br><span class="line">char_map[s[i]] = i</span><br><span class="line"><span class="keyword">return</span> max_len</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-substring-without-repeating-characters/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 0
      
    
    </summary>
    
    
      <category term="Hash Table" scheme="https://shineboy2013.github.com/tags/Hash-Table/"/>
    
      <category term="Python KB" scheme="https://shineboy2013.github.com/tags/Python-KB/"/>
    
      <category term="String" scheme="https://shineboy2013.github.com/tags/String/"/>
    
      <category term="Sliding window" scheme="https://shineboy2013.github.com/tags/Sliding-window/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 138 Copy List with Random Pointer</title>
    <link href="https://shineboy2013.github.com/2021/07/27/lee-138/"/>
    <id>https://shineboy2013.github.com/2021/07/27/lee-138/</id>
    <published>2021-07-27T09:14:55.918Z</published>
    <updated>2021-11-12T07:47:28.975Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/copy-list-with-random-pointer/" target="_blank" rel="noopener">LeetCode 138 Copy List with Random Pointer</a></strong></p><p>A linked list of length <code>n</code> is given such that each node contains an additional random pointer, which could point to any node in the list, or <code>null</code>.</p><p>Construct a <a href="https://en.wikipedia.org/wiki/Object_copying#Deep_copy" target="_blank" rel="noopener"><strong>deep copy</strong></a> of the list. The deep copy should consist of exactly <code>n</code> <strong>brand new</strong> nodes, where each new node has its value set to the value of its corresponding original node. Both the <code>next</code> and <code>random</code> pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. <strong>None of the pointers in the new list should point to nodes in the original list</strong>.</p><p>For example, if there are two nodes <code>X</code> and <code>Y</code> in the original list, where <code>X.random --&gt; Y</code>, then for the corresponding two nodes <code>x</code> and <code>y</code> in the copied list, <code>x.random --&gt; y</code>.</p><p>Return <em>the head of the copied linked list</em>.</p><p>The linked list is represented in the input/output as a list of <code>n</code> nodes. Each node is represented as a pair of <code>[val, random_index]</code> where:</p><ul><li><code>val</code>: an integer representing <code>Node.val</code></li><li><code>random_index</code>: the index of the node (range from <code>0</code> to <code>n-1</code>) that the <code>random</code> pointer points to, or <code>null</code> if it does not point to any node.</li></ul><p>Your code will <strong>only</strong> be given the <code>head</code> of the original linked list.</p><p><strong>Example 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2019/12/18/e1.png" alt=""></p><pre>**Input:** head = [[7,null],[13,0],[11,4],[10,2],[1,0]]**Output:** [[7,null],[13,0],[11,4],[10,2],[1,0]]</pre><p><strong>Example 2:</strong></p><p><img src="https://assets.leetcode.com/uploads/2019/12/18/e2.png" alt=""></p><pre>**Input:** head = [[1,1],[2,1]]**Output:** [[1,1],[2,1]]</pre><p><strong>Example 3:</strong></p><p><strong><img src="https://assets.leetcode.com/uploads/2019/12/18/e3.png" alt=""></strong></p><pre>**Input:** head = [[3,null],[3,0],[3,null]]**Output:** [[3,null],[3,0],[3,null]]</pre><p><strong>Example 4:</strong></p><pre>**Input:** head = []**Output:** []**Explanation:** The given linked list is empty (null pointer), so return null.</pre><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= n &lt;= 1000</code></li><li><code>-10000 &lt;= Node.val &lt;= 10000</code></li><li><code>Node.random</code> is <code>null</code> or is pointing to some node in the linked list.</li></ul><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>复制含next和random的链表。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>先复制next指针，然后利用HashMap存储旧新节点，来复制random指针。  </p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>复制next指针和Map中</li><li>Random指针不空才copy</li><li>加it = it.next，否则死循环</li><li>如果创建新Node用while it.next表示用它的父节点，否则某个field赋值如random用while it</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copyRandomList</span><span class="params">(self, head: <span class="string">'Node'</span>)</span> -&gt; 'Node':</span></span><br><span class="line">node_map = &#123;&#125;</span><br><span class="line">fake_head, fake_head_copy = Node(<span class="number">0</span>), Node(<span class="number">0</span>)</span><br><span class="line">fake_head.next = head</span><br><span class="line">it, it_copy = fake_head, fake_head_copy</span><br><span class="line"><span class="keyword">while</span> it.next:</span><br><span class="line">        it_copy.next = Node(it.next.val)</span><br><span class="line">        node_map[it.next] = it_copy.next</span><br><span class="line">it, it_copy = it.next, it_copy.next</span><br><span class="line"></span><br><span class="line">it, it_copy = fake_head.next, fake_head_copy.next</span><br><span class="line"><span class="keyword">while</span> it:</span><br><span class="line"><span class="keyword">if</span> it.random:</span><br><span class="line">node_map[it].random = node_map[it.random]</span><br><span class="line">it, it_copy = it.next, it_copy.next</span><br><span class="line"><span class="keyword">return</span> fake_head_copy.next</span><br></pre></td></tr></table></figure><h3 id="梅花间竹解题思路："><a href="#梅花间竹解题思路：" class="headerlink" title="梅花间竹解题思路："></a><strong>梅花间竹解题思路：</strong></h3><p>第二种方法，梅花间竹，分3部走。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copyRandomList</span><span class="params">(self, head: <span class="string">'Node'</span>)</span> -&gt; 'Node':</span></span><br><span class="line">fake_head, fake_head_copy = Node(<span class="number">0</span>), Node(<span class="number">0</span>)</span><br><span class="line">fake_head.next = head</span><br><span class="line"></span><br><span class="line"><span class="comment"># insert</span></span><br><span class="line">it = fake_head.next</span><br><span class="line"><span class="keyword">while</span> it:</span><br><span class="line">temp = it.next</span><br><span class="line">it.next = Node(it.val)</span><br><span class="line">it.next.next = temp</span><br><span class="line">it = it.next.next</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy random</span></span><br><span class="line">it = fake_head.next</span><br><span class="line"><span class="keyword">while</span> it:</span><br><span class="line"><span class="keyword">if</span> it.random <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">it.next.random = it.random.next</span><br><span class="line">it = it.next.next</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete</span></span><br><span class="line">it, it_copy = fake_head.next, fake_head_copy</span><br><span class="line"><span class="keyword">while</span> it:</span><br><span class="line">temp = it.next</span><br><span class="line">it.next = it.next.next</span><br><span class="line">it_copy.next = temp</span><br><span class="line">temp.next = <span class="keyword">None</span></span><br><span class="line">it, it_copy = it.next, it_copy.next</span><br><span class="line"><span class="keyword">return</span> fake_head_copy.next</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><ol><li>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>。</li><li>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/copy-list-with-random-pointer/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 138 Copy List with
      
    
    </summary>
    
    
      <category term="Hash Table" scheme="https://shineboy2013.github.com/tags/Hash-Table/"/>
    
      <category term="Python KB" scheme="https://shineboy2013.github.com/tags/Python-KB/"/>
    
      <category term="Linked List" scheme="https://shineboy2013.github.com/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>Python知识点</title>
    <link href="https://shineboy2013.github.com/2021/06/07/kb-Python/"/>
    <id>https://shineboy2013.github.com/2021/06/07/kb-Python/</id>
    <published>2021-06-08T04:47:48.429Z</published>
    <updated>2021-11-15T06:49:08.656Z</updated>
    
    <content type="html"><![CDATA[<p><strong>常用知识点</strong></p><table><thead><tr><th>类型</th><th style="text-align:left">函数名</th><th style="text-align:left">作用</th><th style="text-align:left">输入参数</th><th style="text-align:left">返回值</th><th style="text-align:left">例子</th></tr></thead><tbody><tr><td>for</td><td style="text-align:left">range</td><td style="text-align:left">和len结合使用相当于取某范围List下标,第三个参数为步长</td><td style="text-align:left">N/A</td><td style="text-align:left">N/A</td><td style="text-align:left">for i in range(0<strong>,</strong> len(nums))前闭后开,用逗号</td></tr><tr><td>for</td><td style="text-align:left">range</td><td style="text-align:left">逆序遍历</td><td style="text-align:left">N/A</td><td style="text-align:left">N/A</td><td style="text-align:left">for i in range(len(nums) - 1, -1, -1)前闭后开</td></tr><tr><td>for</td><td style="text-align:left">enumerate</td><td style="text-align:left">枚举List的下标和数值，与range不同的是它不能指定范围和步长</td><td style="text-align:left">N/A</td><td style="text-align:left">N/A</td><td style="text-align:left">for i, n in enumerate(nums)</td></tr><tr><td>Math</td><td style="text-align:left">max/min</td><td style="text-align:left">取最大值</td><td style="text-align:left">Num</td><td style="text-align:left">Num</td><td style="text-align:left">max_len = max(2, 3) 或min(1, 2, 3)</td></tr><tr><td>Math</td><td style="text-align:left">pow</td><td style="text-align:left">求幂值</td><td style="text-align:left">Num</td><td style="text-align:left">Num</td><td style="text-align:left">val = pow(2, 3)</td></tr><tr><td>Math</td><td style="text-align:left">int</td><td style="text-align:left">str转int</td><td style="text-align:left">String</td><td style="text-align:left">Num</td><td style="text-align:left">val = int(‘123’)</td></tr><tr><td>Math</td><td style="text-align:left">math.ceil/floor</td><td style="text-align:left">求向上或下取整</td><td style="text-align:left">Num</td><td style="text-align:left">Num</td><td style="text-align:left">import math, val = math.ceil(5/2), math.floor(5/2)</td></tr><tr><td>Math</td><td style="text-align:left">int</td><td style="text-align:left">str转int</td><td style="text-align:left">String</td><td style="text-align:left">Num</td><td style="text-align:left">val = int(‘123’)</td></tr><tr><td>Math</td><td style="text-align:left">sys.maxsize</td><td style="text-align:left">Numeric最大值</td><td style="text-align:left">N/A</td><td style="text-align:left">Num</td><td style="text-align:left">import sys, val = sys.maxsize</td></tr><tr><td>Math</td><td style="text-align:left">min</td><td style="text-align:left"><strong>求数组中的正数的最小值</strong></td><td style="text-align:left">N/A</td><td style="text-align:left">Num</td><td style="text-align:left">min(n for n in nums if n &gt; 0)</td></tr><tr><td>Math</td><td style="text-align:left">len</td><td style="text-align:left"><strong>求数组中的正数的个数</strong></td><td style="text-align:left">N/A</td><td style="text-align:left">Num</td><td style="text-align:left">len([n for n in nums if n &gt; 0])</td></tr><tr><td>Math</td><td style="text-align:left">sum</td><td style="text-align:left">求数组和</td><td style="text-align:left">N/A</td><td style="text-align:left">Num</td><td style="text-align:left">sum(nums)</td></tr><tr><td>String</td><td style="text-align:left">str</td><td style="text-align:left">任意类型变成字符串</td><td style="text-align:left">Any</td><td style="text-align:left">String</td><td style="text-align:left">str(2)</td></tr><tr><td>String</td><td style="text-align:left">replace</td><td style="text-align:left">替换</td><td style="text-align:left">String</td><td style="text-align:left">String</td><td style="text-align:left">‘abc’.replace(‘c’, ‘d’)</td></tr><tr><td>String</td><td style="text-align:left">format</td><td style="text-align:left">格式化字符串</td><td style="text-align:left">Any</td><td style="text-align:left">String</td><td style="text-align:left">‘{} of {}’.format(a, b)</td></tr><tr><td>String</td><td style="text-align:left">[]</td><td style="text-align:left">得到某一个字符</td><td style="text-align:left">N/A</td><td style="text-align:left">Char</td><td style="text-align:left">s[2]</td></tr><tr><td>String</td><td style="text-align:left">[]</td><td style="text-align:left">得到子串(前闭后开)</td><td style="text-align:left">N/A</td><td style="text-align:left">string</td><td style="text-align:left">s = ‘abc’, s[:2] -&gt; ‘ab’, s[2:] -&gt; ‘c’</td></tr><tr><td>String</td><td style="text-align:left">len</td><td style="text-align:left">得到字符串长度</td><td style="text-align:left">N/A</td><td style="text-align:left">int</td><td style="text-align:left">num = len(s)</td></tr><tr><td>String</td><td style="text-align:left">[::-1]</td><td style="text-align:left">反转字符串</td><td style="text-align:left">N/A</td><td style="text-align:left">String</td><td style="text-align:left">new_str = s[::-1]</td></tr><tr><td>String</td><td style="text-align:left">N/A</td><td style="text-align:left">两个字符串叉乘</td><td style="text-align:left">N/A</td><td style="text-align:left">List</td><td style="text-align:left">a_list = [s + c for s in s1 for c in s2]</td></tr><tr><td>String</td><td style="text-align:left">&gt;</td><td style="text-align:left">比较两个字符串</td><td style="text-align:left">N/A</td><td style="text-align:left">boolean</td><td style="text-align:left">‘111’ &gt; ‘21’ -&gt; False, ‘21’ = ‘21’ -&gt; True</td></tr><tr><td>List</td><td style="text-align:left">[]</td><td style="text-align:left">初始化列表</td><td style="text-align:left">N/A</td><td style="text-align:left">N/A</td><td style="text-align:left">list = []，这是空列表，不能通过索引取值  </td></tr><tr><td>List</td><td style="text-align:left">[]</td><td style="text-align:left">初始化固定大小的列表</td><td style="text-align:left">N/A</td><td style="text-align:left">N/A</td><td style="text-align:left">list = [0] * 10</td></tr><tr><td>List</td><td style="text-align:left">len</td><td style="text-align:left">大小</td><td style="text-align:left">N/A</td><td style="text-align:left">int</td><td style="text-align:left">num = len(list)</td></tr><tr><td>List</td><td style="text-align:left">append</td><td style="text-align:left">尾部加入</td><td style="text-align:left">Any</td><td style="text-align:left">N/A</td><td style="text-align:left">list.append(‘apple’)</td></tr><tr><td>List</td><td style="text-align:left">insert</td><td style="text-align:left">头部加入</td><td style="text-align:left">Any</td><td style="text-align:left">N/A</td><td style="text-align:left">list.insert(0, ‘apple’)</td></tr><tr><td>List</td><td style="text-align:left">+</td><td style="text-align:left">两个list合并</td><td style="text-align:left">N/A</td><td style="text-align:left">N/A</td><td style="text-align:left">list1 + list2</td></tr><tr><td>List</td><td style="text-align:left">join</td><td style="text-align:left">加入分隔符</td><td style="text-align:left">List</td><td style="text-align:left">String</td><td style="text-align:left">‘,’.join(list)</td></tr><tr><td>List</td><td style="text-align:left">sort</td><td style="text-align:left">排序，如果List的元素是tuple，按第一个元素排序</td><td style="text-align:left">List</td><td style="text-align:left">N/A</td><td style="text-align:left">list.sort()</td></tr><tr><td>List</td><td style="text-align:left">list</td><td style="text-align:left">复制list</td><td style="text-align:left">List</td><td style="text-align:left">List</td><td style="text-align:left">new_list = list(old_list)</td></tr><tr><td>List</td><td style="text-align:left">list</td><td style="text-align:left">扩展一倍一样的list</td><td style="text-align:left">List</td><td style="text-align:left">List</td><td style="text-align:left">new_list = nums * 2</td></tr><tr><td>List</td><td style="text-align:left">[]</td><td style="text-align:left">反转list</td><td style="text-align:left">List</td><td style="text-align:left">List</td><td style="text-align:left">new_list = list[::-1]跟反转string一样</td></tr><tr><td>List</td><td style="text-align:left">index</td><td style="text-align:left">list中找某个元素</td><td style="text-align:left">T</td><td style="text-align:left">int</td><td style="text-align:left">list.index(‘a’)</td></tr><tr><td>List</td><td style="text-align:left">count</td><td style="text-align:left">list中计算某个元素值的个数</td><td style="text-align:left">T</td><td style="text-align:left">int</td><td style="text-align:left">list.count(‘a’)</td></tr><tr><td>List(Queue)</td><td style="text-align:left">append</td><td style="text-align:left">入列</td><td style="text-align:left">T</td><td style="text-align:left">N/A</td><td style="text-align:left">queue = [], queue.append(node)</td></tr><tr><td>List(Queue)</td><td style="text-align:left">pop</td><td style="text-align:left">出列</td><td style="text-align:left">Num</td><td style="text-align:left">T</td><td style="text-align:left">queue = [], s = queue.pop(0) </td></tr><tr><td>List(Queue)</td><td style="text-align:left">[0]</td><td style="text-align:left">看列首元素</td><td style="text-align:left">N/A</td><td style="text-align:left">T</td><td style="text-align:left">queue = [], s = queue[0] </td></tr><tr><td>List(Heap)</td><td style="text-align:left">heapify</td><td style="text-align:left">对list最小堆排序</td><td style="text-align:left">List</td><td style="text-align:left">N/A</td><td style="text-align:left">from heapq import heapify, pq = [2, 3], heapify(pq) 若最大堆，则将所有值取负加入堆</td></tr><tr><td>List(Heap)</td><td style="text-align:left">heappush</td><td style="text-align:left">入堆</td><td style="text-align:left">List, T</td><td style="text-align:left">N/A</td><td style="text-align:left">from heapq import heappush, heappush(pq, 4) </td></tr><tr><td>List(Heap)</td><td style="text-align:left">heappop</td><td style="text-align:left">出堆</td><td style="text-align:left">List</td><td style="text-align:left">T</td><td style="text-align:left">from heapq import heappop, heappop(pq)</td></tr><tr><td>List(Heap)</td><td style="text-align:left">heapreplace</td><td style="text-align:left">置换堆</td><td style="text-align:left">T</td><td style="text-align:left">N/A</td><td style="text-align:left">heapq.heapreplace(pq, 4)= heappush(pq, 4) + heappop(pq)</td></tr><tr><td>List(Heap)</td><td style="text-align:left">[0]</td><td style="text-align:left">看堆顶元素</td><td style="text-align:left">N/A</td><td style="text-align:left">T</td><td style="text-align:left">pq[0]  </td></tr><tr><td>List(Stack)</td><td style="text-align:left">append</td><td style="text-align:left">入栈</td><td style="text-align:left">T</td><td style="text-align:left">N/A</td><td style="text-align:left">stack = [], stack.append(node)</td></tr><tr><td>List(Stack)</td><td style="text-align:left">pop</td><td style="text-align:left">出栈</td><td style="text-align:left">N/A</td><td style="text-align:left">T</td><td style="text-align:left">stack = [], s = stack.pop() </td></tr><tr><td>List(Stack)</td><td style="text-align:left">[]</td><td style="text-align:left">看栈顶元素</td><td style="text-align:left">N/A</td><td style="text-align:left">T</td><td style="text-align:left">stack = [], s = stack[-1] </td></tr><tr><td>Dictionary</td><td style="text-align:left">{}</td><td style="text-align:left">初始化字典</td><td style="text-align:left">N/A</td><td style="text-align:left">N/A</td><td style="text-align:left">dict = {}</td></tr><tr><td>Dictionary</td><td style="text-align:left">[]</td><td style="text-align:left">获得字典的值</td><td style="text-align:left">T</td><td style="text-align:left">T</td><td style="text-align:left">dict[key]</td></tr><tr><td>Dictionary</td><td style="text-align:left">[]</td><td style="text-align:left">插入到字典</td><td style="text-align:left">T</td><td style="text-align:left">T</td><td style="text-align:left">dict[key] = 2</td></tr><tr><td>Dictionary</td><td style="text-align:left">items</td><td style="text-align:left">Dict的所有pairs</td><td style="text-align:left">N/A</td><td style="text-align:left">K,V</td><td style="text-align:left">for k, v in dict.items()</td></tr><tr><td>Dictionary</td><td style="text-align:left">items</td><td style="text-align:left">Dict的所有keys</td><td style="text-align:left">N/A</td><td style="text-align:left">List</td><td style="text-align:left">for k in dict.keys()</td></tr><tr><td>Dictionary</td><td style="text-align:left">in</td><td style="text-align:left">是否含有某个key</td><td style="text-align:left">N/A</td><td style="text-align:left">boolean</td><td style="text-align:left">if key in dict</td></tr><tr><td>Set</td><td style="text-align:left">N/A</td><td style="text-align:left">产生一个Set</td><td style="text-align:left">N/A</td><td style="text-align:left">Set</td><td style="text-align:left">b = set(), b = set({‘a’, ‘b’})</td></tr><tr><td>Set</td><td style="text-align:left">N/A</td><td style="text-align:left">List转换成Set或反之</td><td style="text-align:left">N/A</td><td style="text-align:left">N/A</td><td style="text-align:left">s = set(l), l = list(s)</td></tr><tr><td>Lambda</td><td style="text-align:left">func/expr…for…in</td><td style="text-align:left">整型数组变字符串数组</td><td style="text-align:left">List</td><td style="text-align:left">List</td><td style="text-align:left">str(x) for x in list</td></tr><tr><td>Others</td><td style="text-align:left">Counter</td><td style="text-align:left">计算List频率</td><td style="text-align:left">List</td><td style="text-align:left">dict</td><td style="text-align:left">from collections import Counter, dict = Counter(nums)</td></tr><tr><td>Others</td><td style="text-align:left">[]</td><td style="text-align:left">初始化固定大小的列表</td><td style="text-align:left">N/A</td><td style="text-align:left">N/A</td><td style="text-align:left">a = [1] * 10</td></tr><tr><td>Others</td><td style="text-align:left">[]</td><td style="text-align:left">初始化NxM矩阵为1</td><td style="text-align:left">N/A</td><td style="text-align:left">N/A</td><td style="text-align:left">a = [[1] * M] * N</td></tr><tr><td>Others</td><td style="text-align:left">map, max</td><td style="text-align:left">求矩阵最大值</td><td style="text-align:left">[][]</td><td style="text-align:left">T</td><td style="text-align:left">max(map(max, matrix))</td></tr></tbody></table><p>总结：<br>Stack, List, Queue的实现都是List<br>插入append, insert<br>删除pop  </p><p>i += 1没有i++<br>if 0 &lt; i &lt; len(nums) 不像Java一样，Python可以连续比较范围<br>所有int都是long<br>22//5 = 4<br>22/5 = 4.4<br>由于Python的数字类型都是Numeric（自动识别为Integer, Float, Complex Numbers）,所以自动变成小数，不像Java是int<br><a href="https://www.geeksforgeeks.org/python-data-types/" target="_blank" rel="noopener">数据类型</a></p><p>True/False<br>and/or/not</p><p>&amp;, ^异或, ~取反(~3), |, &lt;&lt;, &gt;&gt;</p><p>elif<br>return -res if is_negative else res<br>if root/ if root is None<br>Node(0)没有new  </p><p>self.maxDepth  </p><p>三个引号就是多行comment，#是一行comment<br>from heapq import heappop, heappush, heapify</p><p><a href="https://www.runoob.com/python3/python3-basic-syntax.html" target="_blank" rel="noopener">Python基础</a><br><a href="https://visualgit.readthedocs.io/en/latest/pages/naming_convention.html" target="_blank" rel="noopener">Python命名规则</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;常用知识点&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;函数名&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;作用&lt;/th&gt;
&lt;th 
      
    
    </summary>
    
    
      <category term="Knowledge Base" scheme="https://shineboy2013.github.com/tags/Knowledge-Base/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 368 Largest Divisible Subset</title>
    <link href="https://shineboy2013.github.com/2020/05/10/lee-368/"/>
    <id>https://shineboy2013.github.com/2020/05/10/lee-368/</id>
    <published>2020-05-10T23:21:41.197Z</published>
    <updated>2020-05-10T23:43:44.547Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/largest-divisible-subset/" target="_blank" rel="noopener">LeetCode 368 Largest Divisible Subset</a></strong></p><p>Given a set of <strong>distinct</strong> positive integers, find the largest subset such that every pair (S<sub>i</sub>, S<sub>j</sub>) of elements in this subset satisfies:</p><p>S<sub>i</sub> % S<sub>j</sub> = 0 or S<sub>j</sub> % S<sub>i</sub> = 0.</p><p>If there are multiple solutions, return any subset is fine.</p><p><strong>Example 1:</strong></p><div><pre>**Input:** <span id="example-input-1-1">[1,2,3]</span>**Output:** <span id="example-output-1">[1,2]</span> (of course, [1,3] will also be ok)</pre><div><p><strong>Example 2:</strong></p><pre>**Input:** <span id="example-input-2-1">[1,2,4,8]</span>**Output:** <span id="example-output-2">[1,2,4,8]</span></pre><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>一个数组，让我们求这样一个子集合，集合中的任意两个数相互取余均为0。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>由于知道子问题有助于求解考虑用DP。它就是LIS的翻版。这道题还需要打印DP路径。    </p><ol><li>定义dp[i]为num[i-1]这个数对应的最大可整除子集合个数。  </li><li>递归式为dp[i] = max{dp[j-1] + 1}, 0&lt;j&lt;i, 若num[i-1]可被num[j-1]整除     </li><li>方向为从左到右。初始值为dp = 1。  </li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>初始值dp = 1。  </li></ol><h3 id="Java代码："><a href="#Java代码：" class="headerlink" title="Java代码："></a><strong>Java代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">largestDivisibleSubset</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line"><span class="keyword">if</span>(nums.length == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> Arrays.asList(nums[<span class="number">0</span>]);</span><br><span class="line">Arrays.sort(nums);</span><br><span class="line"><span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line"><span class="keyword">int</span> maxPos = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span>[] path = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dp.length; i++) <span class="comment">// remember to init to 1</span></span><br><span class="line">dp[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(nums[i-<span class="number">1</span>] % nums[j-<span class="number">1</span>] == <span class="number">0</span> &amp;&amp; dp[j] + <span class="number">1</span> &gt; dp[i]) &#123;</span><br><span class="line">dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">path[i] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dp[i] &gt; max) &#123;</span><br><span class="line">max = dp[i];</span><br><span class="line">maxPos = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> pos = maxPos;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dp[maxPos]; i++) &#123;</span><br><span class="line">res.add(nums[pos-<span class="number">1</span>]);</span><br><span class="line">pos = path[pos];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Collections.sort(res);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n<sup>2</sup>)</code>，空间复杂度<code>O(n<sup>2</sup>)</code>。</p></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/largest-divisible-subset/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 368 Largest Divisible S
      
    
    </summary>
    
    
      <category term="Dynamic Programming" scheme="https://shineboy2013.github.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 010 Regular Expression Matching</title>
    <link href="https://shineboy2013.github.com/2020/05/10/lee-010/"/>
    <id>https://shineboy2013.github.com/2020/05/10/lee-010/</id>
    <published>2020-05-10T16:48:10.451Z</published>
    <updated>2021-10-24T09:22:18.558Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/regular-expression-matching/" target="_blank" rel="noopener">LeetCode 010 Regular Expression Matching</a></strong></p><p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code>.</p><pre>'.' Matches any single character.'*' Matches zero or more of the preceding element.</pre><p>The matching should cover the <strong>entire</strong> input string (not partial).</p><p><strong>Note:</strong></p><ul><li><code>s</code> could be empty and contains only lowercase letters <code>a-z</code>.</li><li><code>p</code> could be empty and contains only lowercase letters <code>a-z</code>, and characters like <code>.</code> or <code>*</code>.</li></ul><p><strong>Example 1:</strong></p><pre>**Input:**s = "aa"p = "a"**Output:** false**Explanation:** "a" does not match the entire string "aa".</pre><p><strong>Example 2:</strong></p><pre>**Input:**s = "aa"p = "a*"**Output:** true**Explanation:** '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".</pre><p><strong>Example 3:</strong></p><pre>**Input:**s = "ab"p = ".*"**Output:** true**Explanation:** ".*" means "zero or more (*) of any character (.)".</pre><p><strong>Example 4:</strong></p><pre>**Input:**s = "aab"p = "c*a*b"**Output:** true**Explanation:** c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches "aab".</pre><p><strong>Example 5:</strong></p><pre>**Input:**s = "mississippi"p = "mis*is*p*."**Output:** false</pre><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>这道求正则表达式匹配的题和那道Leetocde 044 Wildcard Matching很类似，不同点在于*的意义不同，在之前那道题中，<br>*表示可以代替任意个数的不同字符，而这道题中的*表示之前一个字符（同样字符）可以有0-N个匹配。此题更难一些。    </p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>这是经典题。两字符串匹配题基本就是DP而且知道子问题答案可以推导下一个。    </p><ol><li>定义dp[i][j]为字符串s[i-1]和p[j-1]是否能匹配。  </li><li>递归式为dp[i][j] = dp[i-1][j-1] &amp;&amp; (p[j-1] == <strong>.</strong> || s[i-1] == p[j-1])<br>OR ((dp[i-1][j] &amp;&amp; <strong>(s[i-1] == p[j-2] || p[j-2] == .)</strong>) || dp[i][<strong>j-2</strong>]) &amp;&amp; p[j-1] == *<br>第一种情况为非*，通配一样字符或.<br>第二种情况为*，如果通配<strong>（有条件：与p的前一个字符相等或p为.）</strong>就是只移动s，dp[i-1][j]。若不通配就只移动p<strong>及其前一个字符</strong>。  </li><li>方向为从左到右，从上到下。初始值为dp[0][0] = true。以及若s为空，p为多个*时候，dp[0][j]=true。</li></ol><p>与Wildcard Matching不同之处用黑体标注了：  </p><ol><li>用.代替?  </li><li>*情况，不匹配p移动两位而不是一位。  </li><li>*情况，匹配带条件而不是无条件。  </li><li>初始化用dp[0][j-2]而不是j-1。  </li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>递归式含*不匹配情况dp[i][j-2]。  </li><li>初始化s为空，p为多个*。此情况其实与递归式符合，因为i=1开始，所以i=0的时候，dp[i-1][j]为负值省去，<br>只取dp[i][j-2]。   </li></ol><h3 id="Java代码："><a href="#Java代码：" class="headerlink" title="Java代码："></a><strong>Java代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length() + <span class="number">1</span>][p.length() + <span class="number">1</span>];</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; dp[<span class="number">0</span>].length; j++)</span><br><span class="line"><span class="keyword">if</span>(p.charAt(j-<span class="number">1</span>) == <span class="string">'*'</span>) <span class="comment">// remember s="", p="a*"</span></span><br><span class="line">dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j-<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; dp.length; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; dp[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(p.charAt(j-<span class="number">1</span>) == <span class="string">'*'</span>)</span><br><span class="line">dp[i][j] = (dp[i][j-<span class="number">2</span>] || ((s.charAt(i-<span class="number">1</span>) == p.charAt(j-<span class="number">2</span>) </span><br><span class="line">|| p.charAt(j-<span class="number">2</span>) == <span class="string">'.'</span>) &amp;&amp; dp[i-<span class="number">1</span>][j]));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>] &amp;&amp; (s.charAt(i-<span class="number">1</span>) == p.charAt(j-<span class="number">1</span>) </span><br><span class="line">|| p.charAt(j-<span class="number">1</span>) == <span class="string">'.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[dp.length -<span class="number">1</span>][dp[<span class="number">0</span>].length - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n*m)</code>，空间复杂度为<code>O(n*m)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/regular-expression-matching/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 010 Regular Expressi
      
    
    </summary>
    
    
      <category term="Dynamic Programming" scheme="https://shineboy2013.github.com/tags/Dynamic-Programming/"/>
    
      <category term="Classic" scheme="https://shineboy2013.github.com/tags/Classic/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 044 Wildcard Matching</title>
    <link href="https://shineboy2013.github.com/2020/05/10/lee-044/"/>
    <id>https://shineboy2013.github.com/2020/05/10/lee-044/</id>
    <published>2020-05-10T16:18:47.532Z</published>
    <updated>2021-10-24T09:13:54.793Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/wildcard-matching/" target="_blank" rel="noopener">LeetCode 044 Wildcard Matching</a></strong></p><div><br><br>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement wildcard pattern matching with support for <code>&#39;?&#39;</code> and <code>&#39;*&#39;</code>.<br><br><pre>‘?’ Matches any single character.<br>‘<em>‘ Matches any sequence of characters (including the empty sequence).<br></em></pre><br><br>The matching should cover the <strong>entire</strong> input string (not partial).<br><br><strong>Note:</strong>   <code>s</code> could be empty and contains only lowercase letters <code>a-z</code>.<br><em>   <code>p</code> could be empty and contains only lowercase letters <code>a-z</code>, and characters like <code>&lt;font face=&quot;monospace&quot;&gt;?&lt;/font&gt;</code> or `</em>`.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong><br>s = “aa”<br>p = “a”<br><strong>Output:</strong> false<br><strong>Explanation:</strong> “a” does not match the entire string “aa”.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong><br>s = “aa”<br>p = “<em>“<br><strong>Output:</strong> true<br><strong>Explanation:</strong> ‘</em>‘ matches any sequence.<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong><br>s = “cb”<br>p = “?a”<br><strong>Output:</strong> false<br><strong>Explanation:</strong> ‘?’ matches ‘c’, but the second letter is ‘a’, which does not match ‘b’.<br></pre><br><br><strong>Example 4:</strong><br><br><pre><strong>Input:</strong><br>s = “adceb”<br>p = “<em>a</em>b”<br><strong>Output:</strong> true<br><strong>Explanation:</strong> The first ‘<em>‘ matches the empty sequence, while the second ‘</em>‘ matches the substring “dce”.<br></pre><br><br><strong>Example 5:</strong><br><br><pre><strong>Input:</strong><br>s = “acdcb”<br>p = “a<em>c?b”<br><em>*Output:</em></em> false<br></pre><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>通配符外卡匹配问题，有特殊字符”*“和”?”，其中”?” 能代替任何字符，”*“能代替任何字符串。  </p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>这是经典题。两字符串匹配题基本就是DP而且知道子问题答案可以推导下一个。    </p><ol><li>定义dp[i][j]为字符串s[i-1]和p[j-1]是否能匹配。  </li><li>递归式为dp[i][j] = dp[i-1][j-1] &amp;&amp; (p[j-1]==? || s[i-1]==p[j-1])<br>OR (dp[i-1][j] || dp[i][j-1]) &amp;&amp; p[j-1]==*<br>第一种情况为非*，通配一样字符或?<br>第二种情况为*，如果通配就是只移动s，dp[i-1][j]。若不通配（通配完）就只移动p。  </li><li>方向为从左到右，从上到下。初始值为dp[0][0] = true。以及若s为空，p为多个*时候，dp[0][j]=true。</li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>递归式含*不匹配情况dp[i][j-1]，我写的时候忽略了。  </li><li>初始化s为空，p为多个*。此情况其实与递归式符合，因为i=1开始，所以i=0的时候，dp[i-1][j]为负值省去，<br>只取dp[i][j-1]。  </li><li>一开始写的corner case并入到递归式处理。  </li></ol><h3 id="Java代码："><a href="#Java代码：" class="headerlink" title="Java代码："></a><strong>Java代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line"><span class="comment">//if(s.isEmpty() &amp;&amp; p.isEmpty())</span></span><br><span class="line"><span class="comment">//return true;</span></span><br><span class="line"><span class="comment">//if(!s.isEmpty() &amp;&amp; p.isEmpty())</span></span><br><span class="line"><span class="comment">//return false;</span></span><br><span class="line"><span class="comment">//if(s.isEmpty() &amp;&amp; !p.isEmpty() &amp;&amp; isAllStars(p))</span></span><br><span class="line"><span class="comment">//return true;</span></span><br><span class="line"><span class="comment">//if(s.isEmpty() &amp;&amp; !p.isEmpty())</span></span><br><span class="line"><span class="comment">//return false;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length() + <span class="number">1</span>][p.length() + <span class="number">1</span>];</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; dp[<span class="number">0</span>].length; j++)</span><br><span class="line"><span class="comment">// remember empty s can match any prefix *** character in p making sure dp[0][j] = true</span></span><br><span class="line"><span class="keyword">if</span>(p.charAt(j-<span class="number">1</span>) == <span class="string">'*'</span>)</span><br><span class="line">dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j-<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; dp.length; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; dp[<span class="number">0</span>].length; j++)</span><br><span class="line">dp[i][j] = (dp[i-<span class="number">1</span>][j-<span class="number">1</span>] &amp;&amp; (p.charAt(j-<span class="number">1</span>) == <span class="string">'?'</span> || s.charAt(i-<span class="number">1</span>) == p.charAt(j-<span class="number">1</span>)))</span><br><span class="line"><span class="comment">// miss dp[i][j-1] means no match on *</span></span><br><span class="line">|| ((dp[i-<span class="number">1</span>][j] || dp[i][j-<span class="number">1</span>]) &amp;&amp; p.charAt(j-<span class="number">1</span>) == <span class="string">'*'</span>); </span><br><span class="line"><span class="keyword">return</span> dp[dp.length -<span class="number">1</span>][dp[<span class="number">0</span>].length - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n*m)</code>，空间复杂度为<code>O(n*m)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/wildcard-matching/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 044 Wildcard Matching&lt;/a&gt;&lt;/str
      
    
    </summary>
    
    
      <category term="Dynamic Programming" scheme="https://shineboy2013.github.com/tags/Dynamic-Programming/"/>
    
      <category term="Classic" scheme="https://shineboy2013.github.com/tags/Classic/"/>
    
  </entry>
  
  <entry>
    <title>记忆性搜索</title>
    <link href="https://shineboy2013.github.com/2020/05/09/memoization/"/>
    <id>https://shineboy2013.github.com/2020/05/09/memoization/</id>
    <published>2020-05-09T23:28:48.775Z</published>
    <updated>2020-05-09T23:34:02.380Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a><strong>算法思路：</strong></h3><p>DFS将子问题的解存于结果中。cache[st] = result. st是子问题边界。  </p><h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a><strong>应用：</strong></h3><p>用于求所有可能性，且这些可能性有重复，记忆性搜索可以用于剪枝。  </p><ol><li>Leetcode 139</li><li>Leetcode 140</li></ol><h3 id="算法步骤："><a href="#算法步骤：" class="headerlink" title="算法步骤："></a><strong>算法步骤：</strong></h3><ol><li>key为子问题索引st，value为子问题的解。  </li><li>紧跟终结条件，若在cache中，返回子问题的解。  </li><li>循环结束，将子问题的结果存于cache。  </li></ol><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(解大小)</code>，空间复杂度<code>O(解大小)</code>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;算法思路：&quot;&gt;&lt;a href=&quot;#算法思路：&quot; class=&quot;headerlink&quot; title=&quot;算法思路：&quot;&gt;&lt;/a&gt;&lt;strong&gt;算法思路：&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;DFS将子问题的解存于结果中。cache[st] = result. st是子问题
      
    
    </summary>
    
    
      <category term="Knowledge Base" scheme="https://shineboy2013.github.com/tags/Knowledge-Base/"/>
    
      <category term="Memoization" scheme="https://shineboy2013.github.com/tags/Memoization/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 140 Word Break II</title>
    <link href="https://shineboy2013.github.com/2020/05/09/lee-140/"/>
    <id>https://shineboy2013.github.com/2020/05/09/lee-140/</id>
    <published>2020-05-09T23:22:25.398Z</published>
    <updated>2020-05-10T16:42:25.730Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/word-break-ii/" target="_blank" rel="noopener">LeetCode 140 Word Break II</a></strong></p><div><br><br>Given a <strong>non-empty</strong> string <em>s</em> and a dictionary <em>wordDict</em> containing a list of <strong>non-empty</strong> words, add spaces in <em>s</em> to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.<br><br><strong>Note:</strong><br><br><em>   The same word in the dictionary may be reused multiple times in the segmentation.</em>   You may assume the dictionary does not contain duplicate words.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> s = “<code>catsanddog</code>“<br>wordDict = <code>[&quot;cat&quot;, &quot;cats&quot;, &quot;and&quot;, &quot;sand&quot;, &quot;dog&quot;]</code><br><strong>Output:</strong> <code>[  &quot;cats and dog&quot;,  &quot;cat sand dog&quot;]</code><br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> s = “pineapplepenapple”<br>wordDict = [“apple”, “pen”, “applepen”, “pine”, “pineapple”]<br><strong>Output:</strong> [<br>  “pine apple pen apple”,<br>  “pineapple pen apple”,<br>  “pine applepen apple”<br>]<br><strong>Explanation:</strong> Note that you are allowed to reuse a dictionary word.<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> s = “catsandog”<br>wordDict = [“cats”, “dog”, “sand”, “and”, “cat”]<br><strong>Output:</strong> []</pre><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>一个字符串s，求被“字典集合”（wordDict）中的单词拼接的所有方案。  </p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>这是经典题。求所有可能性想到DFS，前面Lintcode 683提到可能会有重复解。所以用Cache。    </p><p><strong>Cache模板：</strong>  </p><ol><li>key为子问题索引st，value为子问题的解。  </li><li>紧跟终结条件，若在cache中，返回子问题的解。  </li><li>循环结束，将子问题的结果存于cache。  </li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>将两个输入都转换成小写。  </li><li>复制子问题的解，不能直接在解List<string>上编辑。</string></li></ol><h3 id="Java代码："><a href="#Java代码：" class="headerlink" title="Java代码："></a><strong>Java代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span>(s == <span class="keyword">null</span> || s.isEmpty())</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">Set&lt;String&gt; wordDictLower = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(String c : wordDict)</span><br><span class="line">wordDictLower.add(c.toLowerCase());</span><br><span class="line">s = s.toLowerCase();</span><br><span class="line">Map&lt;Integer, List&lt;String&gt;&gt; cache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">return</span> dfs(s, wordDictLower, s.length(), cache);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;String&gt; <span class="title">dfs</span><span class="params">(String s, Set&lt;String&gt; wordDict, <span class="keyword">int</span> st, Map&lt;Integer, List&lt;String&gt;&gt; cache)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(st == <span class="number">0</span>) </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">""</span>));</span><br><span class="line"><span class="keyword">if</span>(cache.containsKey(st))</span><br><span class="line"><span class="keyword">return</span> cache.get(st);</span><br><span class="line">List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; st; i++) &#123;</span><br><span class="line">String word = s.substring(i, st);</span><br><span class="line"><span class="keyword">if</span>(!wordDict.contains(word))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; sub = dfs(s, wordDict, i, cache); </span><br><span class="line"><span class="comment">// copy solution for subproblem, don't edit on sub</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sub.size(); j++)</span><br><span class="line">result.add((sub.get(j) + <span class="string">" "</span> + word).trim());</span><br><span class="line">&#125;</span><br><span class="line">cache.put(st, result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(解大小)</code>，空间复杂度为<code>O(解大小)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/word-break-ii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 140 Word Break II&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="Classic" scheme="https://shineboy2013.github.com/tags/Classic/"/>
    
      <category term="Memoization" scheme="https://shineboy2013.github.com/tags/Memoization/"/>
    
  </entry>
  
  <entry>
    <title>LintCode 683 Word Break III</title>
    <link href="https://shineboy2013.github.com/2020/05/09/lin-683/"/>
    <id>https://shineboy2013.github.com/2020/05/09/lin-683/</id>
    <published>2020-05-09T20:05:20.549Z</published>
    <updated>2021-10-24T08:43:58.902Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://www.lintcode.com/problem/word-break-iii/" target="_blank" rel="noopener">LintCode 683 Word Break III</a></strong></p><div><br><br>Give a dictionary of words and a sentence with all whitespace removed, return the number of sentences you can form by inserting whitespaces to the sentence so that each word can be found in the dictionary.<br><br><strong>Example 1:</strong><br><br><pre><br>Input:<br>“CatMat”<br>[“Cat”, “Mat”, “Ca”, “tM”, “at”, “C”, “Dog”, “og”, “Do”]<br>Output: 3<br>Explanation:<br>we can form 3 sentences, as follows:<br>“CatMat” = “Cat” + “Mat”<br>“CatMat” = “Ca” + “tM” + “at”<br>“CatMat” = “C” + “at” + “Mat”<br></pre><br><br><strong>Example 2:</strong><br><br><pre><br>Input:<br>“a”<br>[]<br>Output: 0<br></pre><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>一个字符串s，被“字典集合”（wordDict）中的单词拼接而成的可能性种数。  </p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>这是经典题。如果知道s[0:n-1)很容易知道s[0:n)是否有解，既然和子问题有关，就用DP。  </p><ol><li>定义dp[i]为字符串s[0,i)是合法分解种数。</li><li>判断一个字符串是否可以合法分解，方案是尝试在每一位进行分解，若其中一个可分解，即有解，加入到dp[i]中。<br>递归式为dp[i] += dp[k] * isWord(s[k:i)), 0 &lt;= k &lt; i. </li><li>方向为从左到右i=0..n, 初始值为dp[0] = 1. </li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>将两个输入都转换成小写。 </li><li>dp[n+1]而不是dp[n]，而for循环从1开始。  </li><li>递归中dp[i]用+操作符。  </li></ol><h3 id="Java代码："><a href="#Java代码：" class="headerlink" title="Java代码："></a><strong>Java代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">wordBreak3</span><span class="params">(String s, Set&lt;String&gt; dict)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="keyword">null</span> || <span class="string">""</span>.equals(s))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; lowerDict = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(String c : dict)</span><br><span class="line">lowerDict.add(c.toLowerCase());</span><br><span class="line">dict = lowerDict;</span><br><span class="line">s = s.toLowerCase();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[s.length() + <span class="number">1</span>];</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dp[i][j] = sum(dp[i][k] * isWord(s[k,j])), i=0..n-1, j=i..n-1</span></span><br><span class="line"><span class="comment">// dp[0][n-1] = sum(dp[0][k] * isWord(s[k,n-1]))</span></span><br><span class="line"><span class="comment">// dp[n] = sum(dp[k] * isWord(s[k,n]))</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s.length(); i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; k++) &#123;</span><br><span class="line">dp[i] += dp[k] * (dict.contains(s.substring(k, i)) ? <span class="number">1</span> : <span class="number">0</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[s.length()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n<sup>2</sup>)</code>，空间复杂度为<code>O(n)</code>。  </p><p>这道题一开始走过一些弯路，首先我觉得类似于Catalan算法，左右半部都是子问题，但其实这属于单边问题。所以写了以下算法：  </p><h3 id="Java代码：-1"><a href="#Java代码：-1" class="headerlink" title="Java代码："></a><strong>Java代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">wordBreak3_wrong</span><span class="params">(String s, Set&lt;String&gt; dict)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="keyword">null</span> || <span class="string">""</span>.equals(s))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dp[i][j] = sum(dp[i][k] * dp[k][j])</span></span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[s.length() + <span class="number">1</span>][s.length() + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// use "ab" as an example</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">1</span>; len &lt;= s.length(); len++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length() - len + <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; i + len; j++) &#123;</span><br><span class="line"><span class="comment">//"a","b"</span></span><br><span class="line">dp[i][i+len] += dp[i][j] * dp[j][i+len];    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//"ab"</span></span><br><span class="line"><span class="keyword">if</span>(dict.contains(s.substring(i, i+len)))</span><br><span class="line">dp[i][i+len]++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[<span class="number">0</span>][s.length()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但这个方法会有重复解，比如<br>“abc”, “a”,”b”,”c”<br>-&gt; <code>dp[&quot;ab&quot;] * dp[&quot;c&quot;] = 1</code><br>-&gt; <code>dp[&quot;a&quot;] * dp[&quot;bc&quot;] = 1</code><br>所以解重复，因为这问题是单边子问题而不是Catalan问题。<br>更改版本为单边子问题，一开始用dp[n]导致初始化稍复杂，其实初始化可以并入到递归式，只要用dp[n+1]即可。  </p><h3 id="Java代码：-2"><a href="#Java代码：-2" class="headerlink" title="Java代码："></a><strong>Java代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">wordBreak32</span><span class="params">(String s, Set&lt;String&gt; dict)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="keyword">null</span> || <span class="string">""</span>.equals(s))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)</span><br><span class="line">dp[i] = dict.contains(s.substring(<span class="number">0</span>, i + <span class="number">1</span>)) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; k++) &#123;</span><br><span class="line">dp[i] += dp[k] * (dict.contains(s.substring(k + <span class="number">1</span>, i + <span class="number">1</span>)) ? <span class="number">1</span> : <span class="number">0</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[s.length() - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.lintcode.com/problem/word-break-iii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LintCode 683 Word Break III&lt;/a&gt;&lt;/strong
      
    
    </summary>
    
    
      <category term="Dynamic Programming" scheme="https://shineboy2013.github.com/tags/Dynamic-Programming/"/>
    
      <category term="Classic" scheme="https://shineboy2013.github.com/tags/Classic/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 139 Word Break</title>
    <link href="https://shineboy2013.github.com/2020/05/09/lee-139/"/>
    <id>https://shineboy2013.github.com/2020/05/09/lee-139/</id>
    <published>2020-05-09T18:13:14.876Z</published>
    <updated>2020-05-09T20:03:02.792Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/word-break/" target="_blank" rel="noopener">LeetCode 139 Word Break</a></strong></p><div><br><br>Given a <strong>non-empty</strong> string <em>s</em> and a dictionary <em>wordDict</em> containing a list of <strong>non-empty</strong> words, determine if <em>s</em> can be segmented into a space-separated sequence of one or more dictionary words.<br><br><strong>Note:</strong><br><br><em>   The same word in the dictionary may be reused multiple times in the segmentation.</em>   You may assume the dictionary does not contain duplicate words.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> s = “leetcode”, wordDict = [“leet”, “code”]<br><strong>Output:</strong> true<br><strong>Explanation:</strong> Return true because <code>&quot;leetcode&quot;</code> can be segmented as <code>&quot;leet code&quot;</code>.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> s = “applepenapple”, wordDict = [“apple”, “pen”]<br><strong>Output:</strong> true<br><strong>Explanation:</strong> Return true because <code>&quot;</code>applepenapple<code>&quot;</code> can be segmented as <code>&quot;</code>apple pen apple<code>&quot;</code>.<br>             Note that you are allowed to reuse a dictionary word.<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> s = “catsandog”, wordDict = [“cats”, “dog”, “sand”, “and”, “cat”]<br><strong>Output:</strong> false<br></pre><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>一个字符串s，是否能够被“字典集合”（wordDict）中的单词拼接而成。  </p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>这是经典题。如果知道s[0:n-1)很容易知道s[0:n)是否有解，既然和子问题有关，就用DP。  </p><ol><li>定义dp[i]为字符串s[0,i)是否可以合法分解。</li><li>判断一个字符串是否可以合法分解，方案是尝试在每一位进行分解，若其中一个可分解，即有解。<br>递归式为dp[i] |= dp[k] &amp;&amp; isWord(s[k:i)), 0 &lt;= k &lt; i. </li><li>方向为从左到右i=0..n, 初始值为dp[0] = true. </li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>将两个输入都转换成小写。  </li><li>递归中dp[i]用或操作符。</li></ol><h3 id="Java代码："><a href="#Java代码：" class="headerlink" title="Java代码："></a><strong>Java代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="keyword">null</span> || s.isEmpty() || wordDict == <span class="keyword">null</span> || wordDict.size() == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">Set&lt;String&gt; wordDictLower = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(String c : wordDict)</span><br><span class="line">wordDictLower.add(c.toLowerCase());</span><br><span class="line">s = s.toLowerCase();</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length() + <span class="number">1</span>];</span><br><span class="line">dp[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; dp.length; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; k++) &#123;<span class="comment">//"a"</span></span><br><span class="line">dp[i] |= dp[k] &amp;&amp; wordDictLower.contains(s.substring(k, i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[dp.length - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n<sup>2</sup>)</code>，空间复杂度为<code>O(n)</code>。</p><hr><h3 id="算法II解题思路："><a href="#算法II解题思路：" class="headerlink" title="算法II解题思路："></a><strong>算法II解题思路：</strong></h3><p>这题也可以额用DFS来解。如果可以用DP就尽量用DP，只有求所有可能性才只能用DFS而不能用DP。<br>这道题递归子问题dfs[:n]为子串[0:n)是否可合法拆解。对于子问题而言，需要对其范围内i=[0:st)的每个可能位置分解<br>dfs[:i) + word[i:st)从而求出dfs(st)的解，只有任一分解成功，dfs(st)=true，否则false。 </p><p>Cache的应用场景： 如果子问题重复就要用Cache。<br>例如dfs(10)=dfs(9)+s[9:9] = (dfs(8) + s[8:8]) + s[9:9]<br>           =dfs(8)+s[8:9]<br>dfs(8)由第一层递归第二个循环s[8:9]和第二层递归s[9:9]达到，这是重复的子问题dfs(8)。如果不cache，dfs(8)的求解<br>是重复的。  </p><p><strong>Cache模板：</strong>  </p><ol><li>key为子问题索引st，value为子问题的解。  </li><li>紧跟终结条件，若在cache中，返回子问题的解。  </li><li>循环结束，将子问题的结果存于cache。  </li></ol><h3 id="注意事项：-1"><a href="#注意事项：-1" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>将两个输入都转换成小写。</li><li>递归中先查询词是否在字典中再递归。如果顺序调转就会LTE，因为这些子问题是白费的。  </li><li>递归终结条件为st==0而不是st==s.length()因为子问题递归从右到左。  </li></ol><h3 id="Java代码：-1"><a href="#Java代码：-1" class="headerlink" title="Java代码："></a><strong>Java代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreakDFS</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="keyword">null</span> || s.isEmpty() || wordDict == <span class="keyword">null</span> || wordDict.size() == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">Set&lt;String&gt; wordDictLower = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(String c : wordDict)</span><br><span class="line">wordDictLower.add(c.toLowerCase());</span><br><span class="line">s = s.toLowerCase();</span><br><span class="line">Map&lt;Integer, Boolean&gt; cache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">return</span> dfs(s, wordDictLower, s.length(), cache);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// subproblem's answer dfs[:st)</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(String s, Set&lt;String&gt; wordDict, <span class="keyword">int</span> st, Map&lt;Integer, Boolean&gt; cache)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(st == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span>(cache.containsKey(st))</span><br><span class="line"><span class="keyword">return</span> cache.get(st);</span><br><span class="line"><span class="keyword">boolean</span> re = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; st; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(wordDict.contains(s.substring(i, st)) &amp;&amp; dfs(s, wordDict, i, cache))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">cache.put(st, re);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法分析：-1"><a href="#算法分析：-1" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n<sup>2</sup>)</code>，空间复杂度为<code>O(n)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/word-break/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 139 Word Break&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;
      
    
    </summary>
    
    
      <category term="Dynamic Programming" scheme="https://shineboy2013.github.com/tags/Dynamic-Programming/"/>
    
      <category term="Classic" scheme="https://shineboy2013.github.com/tags/Classic/"/>
    
      <category term="Memoization" scheme="https://shineboy2013.github.com/tags/Memoization/"/>
    
  </entry>
  
</feed>
