<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KK&#39;s blog</title>
  
  <subtitle>每天积累多一些</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shineboy2013.github.com/"/>
  <updated>2022-01-04T00:15:20.660Z</updated>
  <id>https://shineboy2013.github.com/</id>
  
  <author>
    <name>KK Shum</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 281 Zigzag Iterator</title>
    <link href="https://shineboy2013.github.com/2022/01/03/lee-281/"/>
    <id>https://shineboy2013.github.com/2022/01/03/lee-281/</id>
    <published>2022-01-04T00:10:33.027Z</published>
    <updated>2022-01-04T00:15:20.660Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/zigzag-iterator/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given two vectors of integers <code>v1</code> and <code>v2</code>, implement an iterator to return their elements alternately.<br><br>Implement the <code>ZigzagIterator</code> class:<br><br><em>   <code>ZigzagIterator(List&lt;int&gt; v1, List&lt;int&gt; v2)</code> initializes the object with the two vectors <code>v1</code> and <code>v2</code>.</em>   <code>boolean hasNext()</code> returns <code>true</code> if the iterator still has elements, and <code>false</code> otherwise.<br><em>   <code>int next()</code> returns the current element of the iterator and moves the iterator to the next element.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> v1 = [1,2], v2 = [3,4,5,6]<br><strong>Output:</strong> [1,3,2,4,5,6]<br><strong>Explanation:</strong> By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,3,2,4,5,6].<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> v1 = [1], v2 = []<br><strong>Output:</strong> [1]<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> v1 = [], v2 = [1]<br><strong>Output:</strong> [1]<br></pre><br><br><strong>Constraints:</strong></em>   <code>0 &lt;= v1.length, v2.length &lt;= 1000</code><br><em>   <code>1 &lt;= v1.length + v2.length &lt;= 2000</code></em>   <code>-2&lt;sup&gt;31&lt;/sup&gt; &lt;= v1[i], v2[i] &lt;= 2&lt;sup&gt;31&lt;/sup&gt; - 1</code><br><br><strong>Follow up:</strong> What if you are given <code>k</code> vectors? How well can your code be extended to such cases?<br><br><strong>Clarification for the follow-up question:</strong><br><br>The “Zigzag” order is not clearly defined and is ambiguous for <code>k &gt; 2</code> cases. If “Zigzag” does not look right to you, replace “Zigzag” with “Cyclic”.<br><br><strong>Follow-up Example:</strong><br><br><pre><strong>Input:</strong> v1 = [1,2,3], v2 = [4,5,6,7], v3 = [8,9]<br><strong>Output:</strong> [1,4,8,2,5,9,3,6,7]<br></pre><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求两数组轮替取值的Iterator</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>将数组和数组下标分别存于新数组中。用一个list_index来记录要取哪个数组</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>用Iterator模板，hasNext也是找到下一个元素为止，由于只有两个数组，所以不用循环。取值是一个<strong>二维数组</strong>val = self.input[self.list_index][self.index[self.list_index]]</li><li>next中取值后指针要后移。</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/zigzag-iterator/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;Gi
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Iterator" scheme="https://shineboy2013.github.com/tags/Iterator/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 284 Peeking Iterator</title>
    <link href="https://shineboy2013.github.com/2022/01/03/lee-284/"/>
    <id>https://shineboy2013.github.com/2022/01/03/lee-284/</id>
    <published>2022-01-03T23:45:41.427Z</published>
    <updated>2022-01-03T23:48:01.503Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/peeking-iterator/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Design an iterator that supports the <code>peek</code> operation on an existing iterator in addition to the <code>hasNext</code> and the <code>next</code> operations.<br><br>Implement the <code>PeekingIterator</code> class:<br><br><em>   <code>PeekingIterator(Iterator&lt;int&gt; nums)</code> Initializes the object with the given integer iterator <code>iterator</code>.</em>   <code>int next()</code> Returns the next element in the array and moves the pointer to the next element.<br><em>   <code>boolean hasNext()</code> Returns <code>true</code> if there are still elements in the array.</em>   <code>int peek()</code> Returns the next element in the array <strong>without</strong> moving the pointer.<br><br><strong>Note:</strong> Each language may have a different implementation of the constructor and <code>Iterator</code>, but they all support the <code>int next()</code> and <code>boolean hasNext()</code> functions.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input</strong><br>[“PeekingIterator”, “next”, “peek”, “next”, “next”, “hasNext”]<br>[[[1, 2, 3]], [], [], [], [], []]<br><strong>Output</strong><br>[null, 1, 2, 2, 3, false]<br><br><strong>Explanation</strong><br>PeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [<u><strong>1</strong></u>,2,3]<br>peekingIterator.next();    // return 1, the pointer moves to the next element [1,<u><strong>2</strong></u>,3].<br>peekingIterator.peek();    // return 2, the pointer does not move [1,<u><strong>2</strong></u>,3].<br>peekingIterator.next();    // return 2, the pointer moves to the next element [1,2,<u><strong>3</strong></u>]<br>peekingIterator.next();    // return 3, the pointer moves to the next element [1,2,3]<br>peekingIterator.hasNext(); // return False<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= nums.length &lt;= 1000</code></em>   <code>1 &lt;= nums[i] &lt;= 1000</code><br><em>   All the calls to <code>next</code> and <code>peek</code> are valid.</em>   At most <code>1000</code> calls will be made to <code>next</code>, <code>hasNext</code>, and <code>peek</code>.<br><br><strong>Follow up:</strong> How would you extend your design to be generic and work with all types, not just integer?</div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>实现数组的peeking Iterator。数组的Iterator是给定的。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>预读一个数</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>预读一个next数</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeekingIterator</span><span class="params">(TestCases)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, iterator)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        :type iterator: Iterator</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.iterator = iterator</span><br><span class="line">        <span class="keyword">if</span> self.iterator.hasNext():</span><br><span class="line">            self.num = self.iterator.next()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.num = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns the next element in the iteration without advancing the iterator.</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.num</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        tmp = self.num</span><br><span class="line">        <span class="keyword">if</span> self.iterator.hasNext():</span><br><span class="line">            self.num = self.iterator.next()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.num = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasNext</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.num <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(1)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/peeking-iterator/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;D
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Iterator" scheme="https://shineboy2013.github.com/tags/Iterator/"/>
    
  </entry>
  
  <entry>
    <title>Iterator</title>
    <link href="https://shineboy2013.github.com/2022/01/03/iterator/"/>
    <id>https://shineboy2013.github.com/2022/01/03/iterator/</id>
    <published>2022-01-03T21:46:50.282Z</published>
    <updated>2022-01-04T00:16:39.300Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a><strong>算法思路：</strong></h3><p>hasNext, next都涉及计算下一个元素，大部分题目是先计算再返回。只有BST是先返回再计算，因为BST的下一个节点取决于要返回的节点，若返回了，就无法知道下一个节点。</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>hasNext中，while循环找到下一个符合条件的元素</li><li>next中取值后<strong>指针要后移</strong>。</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">self.stack = []</span><br><span class="line">&lt;add to stack&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line"><span class="keyword">if</span> self.hasNext():</span><br><span class="line"><span class="keyword">return</span> self.stack.pop()</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hasNext</span><span class="params">(self)</span> -&gt; bool:</span></span><br><span class="line"><span class="keyword">while</span> &lt;until find the next element&gt;:</span><br><span class="line">   &lt;calculate&gt;</span><br><span class="line"><span class="keyword">return</span> &lt;next element&gt;</span><br></pre></td></tr></table></figure><h3 id="应用题型："><a href="#应用题型：" class="headerlink" title="应用题型："></a><strong>应用题型：</strong></h3><p>[LeetCode 251 Flatten 2D Vector]<br>[LeetCode 281 Zigzag Iterator]<br>[LeetCode 341 Flatten Nested List Iterator]<br><a href="https://shineboy2013.github.io/2020/04/26/lee-173/" target="_blank" rel="noopener">LeetCode 173 Binary Search Tree Iterator</a></p><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>next操作时间复杂度为<code>O(N + V)/N</code>或<code>O(1)</code>，N为所有数，V为复合结构数 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;算法思路：&quot;&gt;&lt;a href=&quot;#算法思路：&quot; class=&quot;headerlink&quot; title=&quot;算法思路：&quot;&gt;&lt;/a&gt;&lt;strong&gt;算法思路：&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;hasNext, next都涉及计算下一个元素，大部分题目是先计算再返回。只有BS
      
    
    </summary>
    
    
      <category term="Knowledge Base" scheme="https://shineboy2013.github.com/tags/Knowledge-Base/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 341 Flatten Nested List Iterator</title>
    <link href="https://shineboy2013.github.com/2022/01/03/lee-341/"/>
    <id>https://shineboy2013.github.com/2022/01/03/lee-341/</id>
    <published>2022-01-03T20:55:59.417Z</published>
    <updated>2022-01-03T21:20:27.310Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/flatten-nested-list-iterator" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>You are given a nested list of integers <code>nestedList</code>. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.<br><br>Implement the <code>NestedIterator</code> class:<br><br><em>   <code>NestedIterator(List&lt;NestedInteger&gt; nestedList)</code> Initializes the iterator with the nested list <code>nestedList</code>.</em>   <code>int next()</code> Returns the next integer in the nested list.<br><em>   <code>boolean hasNext()</code> Returns <code>true</code> if there are still some integers in the nested list and <code>false</code> otherwise.<br><br>Your code will be tested with the following pseudocode:<br><br><pre>initialize iterator with nestedList<br>res = []<br>while iterator.hasNext()<br>    append iterator.next() to the end of res<br>return res<br></pre><br><br>If <code>res</code> matches the expected flattened list, then your code will be judged as correct.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> nestedList = [[1,1],2,[1,1]]<br><strong>Output:</strong> [1,1,2,1,1]<br><strong>Explanation:</strong> By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> nestedList = [1,[4,[6]]]<br><strong>Output:</strong> [1,4,6]<br><strong>Explanation:</strong> By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].<br></pre><br><br><strong>Constraints:</strong></em>   <code>1 &lt;= nestedList.length &lt;= 500</code><br>*   The values of the integers in the nested list is in the range <code>[-10&lt;sup&gt;6&lt;/sup&gt;, 10&lt;sup&gt;6&lt;/sup&gt;]</code>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>实现Nested List的Iterator。Nested List是NestedInteger的数组，NestedInteger可以是int，也可以是Nested List</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>有点似括号题但区别是从前往后读取。用Queue或Stack都可以，插入或删除其一需要反序，删除nestedinteger(=list)后要将它里面所有nestedinteger加入。Queue要从队首加入和删除，Stack要从栈顶加入和删除，用Stack比较方便。</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>用Stack，<strong>逆序将nestedList中nestedinteger加入到stack，直到栈顶元素为int，hasNext才算结束</strong></li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NestedIterator</span><span class="params">(TestCases)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nestedList)</span>:</span></span><br><span class="line">        self.stack = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(len(nestedList))):</span><br><span class="line">            self.stack.append(nestedList[i])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> self.hasNext():</span><br><span class="line">            <span class="keyword">return</span> self.stack.pop().getInteger()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasNext</span><span class="params">(self)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">while</span> self.stack <span class="keyword">and</span> <span class="keyword">not</span> self.stack[<span class="number">-1</span>].isInteger():</span><br><span class="line">            nestedList = self.stack.pop().getList()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(len(nestedList))):</span><br><span class="line">                self.stack.append(nestedList[i])</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span> <span class="keyword">if</span> self.stack <span class="keyword">else</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>next操作时间复杂度为<code>O(V/N)</code>或<code>O(1)</code>，空间复杂度<code>O(L + N)</code>, N为所有数，V为nested list数，O(N + V)/N. O(1)如果不存在nested list </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/flatten-nested-list-iterator&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;di
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Stack" scheme="https://shineboy2013.github.com/tags/Stack/"/>
    
      <category term="Iterator" scheme="https://shineboy2013.github.com/tags/Iterator/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 251 Flatten 2D Vector</title>
    <link href="https://shineboy2013.github.com/2022/01/03/lee-251/"/>
    <id>https://shineboy2013.github.com/2022/01/03/lee-251/</id>
    <published>2022-01-03T18:21:06.327Z</published>
    <updated>2022-01-03T21:16:28.039Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/flatten-2d-vector/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Design an iterator to flatten a 2D vector. It should support the <code>next</code> and <code>hasNext</code> operations.<br><br>Implement the <code>Vector2D</code> class:<br><br><em>   <code>Vector2D(int[][] vec)</code> initializes the object with the 2D vector <code>vec</code>.</em>   <code>next()</code> returns the next element from the 2D vector and moves the pointer one step forward. You may assume that all the calls to <code>next</code> are valid.<br><em>   <code>hasNext()</code> returns <code>true</code> if there are still some elements in the vector, and <code>false</code> otherwise.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input</strong><br>[“Vector2D”, “next”, “next”, “next”, “hasNext”, “hasNext”, “next”, “hasNext”]<br>[[[[1, 2], [3], [4]]], [], [], [], [], [], [], []]<br><strong>Output</strong><br>[null, 1, 2, 3, true, true, 4, false]<br><br><strong>Explanation</strong><br>Vector2D vector2D = new Vector2D([[1, 2], [3], [4]]);<br>vector2D.next();    // return 1<br>vector2D.next();    // return 2<br>vector2D.next();    // return 3<br>vector2D.hasNext(); // return True<br>vector2D.hasNext(); // return True<br>vector2D.next();    // return 4<br>vector2D.hasNext(); // return False<br></pre><br><br><strong>Constraints:</strong></em>   <code>0 &lt;= vec.length &lt;= 200</code><br><em>   <code>0 &lt;= vec[i].length &lt;= 500</code></em>   <code>-500 &lt;= vec[i][j] &lt;= 500</code><br><em>   At most <code>10&lt;sup&gt;5&lt;/sup&gt;</code> calls will be made to <code>next</code> and <code>hasNext</code>.<br><br><em>*Follow up:</em></em> As an added challenge, try to code it using only <a href="http://www.cplusplus.com/reference/iterator/iterator/" target="_blank" rel="noopener">iterators in C++</a> or <a href="http://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html" target="_blank" rel="noopener">iterators in Java</a>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>实现二维Vector的Iterator</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>用两个指针</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>单一Vector可以是空，所以next要循环找到非空的vector</li><li>next要col_id加一</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector2D</span><span class="params">(TestCases)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, vec: List[List[int]])</span>:</span></span><br><span class="line">        self.vec = vec</span><br><span class="line">        self.row_id = <span class="number">0</span></span><br><span class="line">        self.col_id = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> self.hasNext():</span><br><span class="line">            val = self.vec[self.row_id][self.col_id]</span><br><span class="line">            self.col_id += <span class="number">1</span> <span class="comment"># remember</span></span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasNext</span><span class="params">(self)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">while</span> self.row_id &lt; len(self.vec) <span class="keyword">and</span> self.col_id == len(self.vec[self.row_id]): <span class="comment"># remember while coz []</span></span><br><span class="line">            self.row_id += <span class="number">1</span></span><br><span class="line">            self.col_id = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> self.row_id == len(self.vec):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>每个操作时间复杂度为<code>O(V/N)</code>或<code>O(1)</code>，空间复杂度<code>O(1)</code>, N为所有数，V为vector数，O(N + V)/N. O(1)如果vector都不会空</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/flatten-2d-vector/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Iterator" scheme="https://shineboy2013.github.com/tags/Iterator/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 036 Valid Sudoku</title>
    <link href="https://shineboy2013.github.com/2022/01/03/lee-036/"/>
    <id>https://shineboy2013.github.com/2022/01/03/lee-036/</id>
    <published>2022-01-03T10:40:17.720Z</published>
    <updated>2022-01-03T10:43:56.931Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/sudoku-solver/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Write a program to solve a Sudoku puzzle by filling the empty cells.<br><br>A sudoku solution must satisfy <strong>all of the following rules</strong>:<br><br>1.  Each of the digits <code>1-9</code> must occur exactly once in each row.<br>2.  Each of the digits <code>1-9</code> must occur exactly once in each column.<br>3.  Each of the digits <code>1-9</code> must occur exactly once in each of the 9 <code>3x3</code> sub-boxes of the grid.<br><br>The <code>&#39;.&#39;</code> character indicates empty cells.<br><br><strong>Example 1:</strong><br><br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt=""><br><br><pre><strong>Input:</strong> board = [[“5”,”3”,”.”,”.”,”7”,”.”,”.”,”.”,”.”],[“6”,”.”,”.”,”1”,”9”,”5”,”.”,”.”,”.”],[“.”,”9”,”8”,”.”,”.”,”.”,”.”,”6”,”.”],[“8”,”.”,”.”,”.”,”6”,”.”,”.”,”.”,”3”],[“4”,”.”,”.”,”8”,”.”,”3”,”.”,”.”,”1”],[“7”,”.”,”.”,”.”,”2”,”.”,”.”,”.”,”6”],[“.”,”6”,”.”,”.”,”.”,”.”,”2”,”8”,”.”],[“.”,”.”,”.”,”4”,”1”,”9”,”.”,”.”,”5”],[“.”,”.”,”.”,”.”,”8”,”.”,”.”,”7”,”9”]]<br><strong>Output:</strong> [[“5”,”3”,”4”,”6”,”7”,”8”,”9”,”1”,”2”],[“6”,”7”,”2”,”1”,”9”,”5”,”3”,”4”,”8”],[“1”,”9”,”8”,”3”,”4”,”2”,”5”,”6”,”7”],[“8”,”5”,”9”,”7”,”6”,”1”,”4”,”2”,”3”],[“4”,”2”,”6”,”8”,”5”,”3”,”7”,”9”,”1”],[“7”,”1”,”3”,”9”,”2”,”4”,”8”,”5”,”6”],[“9”,”6”,”1”,”5”,”3”,”7”,”2”,”8”,”4”],[“2”,”8”,”7”,”4”,”1”,”9”,”6”,”3”,”5”],[“3”,”4”,”5”,”2”,”8”,”6”,”1”,”7”,”9”]]<br><strong>Explanation:</strong> The input board is shown above and the only valid solution is shown below:<br><br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png" alt=""><br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>board.length == 9</code></em>   <code>board[i].length == 9</code><br><em>   <code>board[i][j]</code> is a digit or <code>&#39;.&#39;</code>.</em>   It is <strong>guaranteed</strong> that the input board has only one solution.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>判断Sudoku是否合法</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>类似于Leetcode 037，用3个global的dict</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>此题和L37有点不同，可以当版上的数是一个个填上的，所以无需初始化将数直接加入到dict中。而是每一位判断是否合法再加入。</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValidSudoku</span><span class="params">(self, board: List[List[str]])</span> -&gt; bool:</span></span><br><span class="line">row_dict = [collections.defaultdict(int) <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(board))]</span><br><span class="line">col_dict = [collections.defaultdict(int) <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(board))]</span><br><span class="line">box_dict = [collections.defaultdict(int) <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(board))]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(board)):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(board[<span class="number">0</span>])):</span><br><span class="line"><span class="keyword">if</span> board[i][j] == <span class="string">'.'</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> self.is_valid(i, j, board[i][j], row_dict, col_dict, box_dict):</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">row_dict[i][board[i][j]] = <span class="number">1</span></span><br><span class="line">col_dict[j][board[i][j]] = <span class="number">1</span></span><br><span class="line">box_dict[i // <span class="number">3</span> * <span class="number">3</span> + j // <span class="number">3</span>][board[i][j]] = <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_valid</span><span class="params">(self, i, j, val, row_dict, col_dict, box_dict)</span>:</span></span><br><span class="line"><span class="keyword">if</span> val <span class="keyword">in</span> row_dict[i] <span class="keyword">or</span> val <span class="keyword">in</span> col_dict[j] <span class="keyword">or</span> val <span class="keyword">in</span> box_dict[i // <span class="number">3</span> * <span class="number">3</span> + j // <span class="number">3</span>]:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/sudoku-solver/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;Writ
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 043 Multiply Strings</title>
    <link href="https://shineboy2013.github.com/2022/01/03/lee-043/"/>
    <id>https://shineboy2013.github.com/2022/01/03/lee-043/</id>
    <published>2022-01-03T08:43:09.176Z</published>
    <updated>2022-01-03T08:42:57.862Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/multiply-strings/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as strings, return the product of <code>num1</code> and <code>num2</code>, also represented as a string.<br><br><strong>Note:</strong> You must not use any built-in BigInteger library or convert the inputs to integer directly.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> num1 = “2”, num2 = “3”<br><strong>Output:</strong> “6”<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> num1 = “123”, num2 = “456”<br><strong>Output:</strong> “56088”<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= num1.length, num2.length &lt;= 200</code></em>   <code>num1</code> and <code>num2</code> consist of digits only.<br>*   Both <code>num1</code> and <code>num2</code> do not contain any leading zero, except the number <code>0</code> itself.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求字符串乘法结果</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>模拟小学乘法</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>模拟小学乘法，开一个大小为len(num1) + len(num2)的整数数组，内外循环计算每位结果。这位可能是大于20的数，如20, 30..。计算前先反转输入，得到最后结果后也反转。</li><li>结果要消除前缀0，但注意<strong>0乘以0的情况会返回空</strong>，所以要特别处理。</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(self, num1: str, num2: str)</span> -&gt; str:</span></span><br><span class="line">digits = [<span class="number">0</span>] * (len(num1) + len(num2))</span><br><span class="line">num1, num2 = num1[::<span class="number">-1</span>], num2[::<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(num1)):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(num2)):</span><br><span class="line">digits[i + j] += int(num1[i]) * int(num2[j])</span><br><span class="line">carry, res = <span class="number">0</span>, <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(digits)):</span><br><span class="line">n = digits[i] + carry</span><br><span class="line">carry = n // <span class="number">10</span></span><br><span class="line">res += str(n % <span class="number">10</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">'0'</span> <span class="keyword">if</span> res[::<span class="number">-1</span>].lstrip(<span class="string">'0'</span>) == <span class="string">''</span> <span class="keyword">else</span> res[::<span class="number">-1</span>].lstrip(<span class="string">'0'</span>)</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/multiply-strings/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;G
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 048 Rotate Image</title>
    <link href="https://shineboy2013.github.com/2022/01/02/lee-048/"/>
    <id>https://shineboy2013.github.com/2022/01/02/lee-048/</id>
    <published>2022-01-03T07:32:48.043Z</published>
    <updated>2022-01-03T07:35:45.790Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/rotate-image/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>You are given an <code>n x n</code> 2D <code>matrix</code> representing an image, rotate the image by <strong>90</strong> degrees (clockwise).<br><br>You have to rotate the image <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener"><strong>in-place</strong></a>, which means you have to modify the input 2D matrix directly. <strong>DO NOT</strong> allocate another 2D matrix and do the rotation.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2020/08/28/mat1.jpg" alt=""><br><br><pre><strong>Input:</strong> matrix = [[1,2,3],[4,5,6],[7,8,9]]<br><strong>Output:</strong> [[7,4,1],[8,5,2],[9,6,3]]<br></pre><br><br><strong>Example 2:</strong><br><br><img src="https://assets.leetcode.com/uploads/2020/08/28/mat2.jpg" alt=""><br><br><pre><strong>Input:</strong> matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]<br><strong>Output:</strong> [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>n == matrix.length == matrix[i].length</code></em>   <code>1 &lt;= n &lt;= 20</code><br>*   <code>-1000 &lt;= matrix[i][j] &lt;= 1000</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>顺时针循环矩阵90度</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>先上下对称，再沿正对角线(左上到右下)对称。正对角线实现比较容易</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>先上下对称，再沿正对角线(左上到右下)对称。正对角线实现比较容易</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(self, matrix: List[List[int]])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(matrix) // <span class="number">2</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(matrix[<span class="number">0</span>])):</span><br><span class="line">matrix[i][j], matrix[len(matrix) - <span class="number">1</span> - i][j] = matrix[len(matrix) - <span class="number">1</span> - i][j], matrix[i][j]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(matrix)):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(i, len(matrix[<span class="number">0</span>])):</span><br><span class="line">matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n<sup>2</sup>)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/rotate-image/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;You a
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Matrix" scheme="https://shineboy2013.github.com/tags/Matrix/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 395 Longest Substring with At Least K Repeating Characters</title>
    <link href="https://shineboy2013.github.com/2022/01/01/lee-395/"/>
    <id>https://shineboy2013.github.com/2022/01/01/lee-395/</id>
    <published>2022-01-01T23:03:35.789Z</published>
    <updated>2022-01-01T23:18:14.903Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given a string <code>s</code> and an integer <code>k</code>, return <em>the length of the longest substring of</em> <code>s</code> <em>such that the frequency of each character in this substring is greater than or equal to</em> <code>k</code>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> s = “aaabb”, k = 3<br><strong>Output:</strong> 3<br><strong>Explanation:</strong> The longest substring is “aaa”, as ‘a’ is repeated 3 times.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> s = “ababbc”, k = 2<br><strong>Output:</strong> 5<br><strong>Explanation:</strong> The longest substring is “ababb”, as ‘a’ is repeated 2 times and ‘b’ is repeated 3 times.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= s.length &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></em>   <code>s</code> consists of only lowercase English letters.<br>*   <code>1 &lt;= k &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求最长每种字符至少k个的子串  </p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>类似于L003 Longest Substring Without Repeating Characters用双指针法，难点是每种字符，用26字母存储法解决。  </p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>按多少种不同字符来做sliding window。有1-26种。  </li><li>子函数求给定种数下的最长子串，所以满足条件在外循环不在内循环，还需进一步统计每种字符是否符合k个。内循环为不满足条件的情况unique_count == n + 1   </li><li>char_count[26]记录每种字符个数, unique_count是子串[left, i]之间多少种。   </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestSubstring</span><span class="params">(self, s: str, k: int)</span> -&gt; int:</span></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">27</span>):</span><br><span class="line">res = max(res, self.longest_substring(s, k, i))</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longest_substring</span><span class="params">(self, s, k, n)</span> -&gt; int:</span></span><br><span class="line">left, char_count = <span class="number">0</span>, [<span class="number">0</span>] * <span class="number">26</span></span><br><span class="line">res, unique_count = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">char_count[ord(s[i]) - ord(<span class="string">'a'</span>)] += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> char_count[ord(s[i]) - ord(<span class="string">'a'</span>)] == <span class="number">1</span>:</span><br><span class="line">unique_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> unique_count == n + <span class="number">1</span>:</span><br><span class="line">char_count[ord(s[left]) - ord(<span class="string">'a'</span>)] -= <span class="number">1</span> <span class="comment"># use left not i</span></span><br><span class="line"><span class="keyword">if</span> char_count[ord(s[left]) - ord(<span class="string">'a'</span>)] == <span class="number">0</span>:</span><br><span class="line">unique_count -= <span class="number">1</span></span><br><span class="line">left += <span class="number">1</span></span><br><span class="line">valid_count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line"><span class="keyword">if</span> char_count[j] &gt; <span class="number">0</span> <span class="keyword">and</span> char_count[j] &gt;= k:</span><br><span class="line">valid_count += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> unique_count == valid_count:</span><br><span class="line">res = max(res, i - left + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(26*26n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Le
      
    
    </summary>
    
    
      <category term="String" scheme="https://shineboy2013.github.com/tags/String/"/>
    
      <category term="Sliding Window" scheme="https://shineboy2013.github.com/tags/Sliding-Window/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 101 Symmetric Tree</title>
    <link href="https://shineboy2013.github.com/2021/12/30/lee-101/"/>
    <id>https://shineboy2013.github.com/2021/12/30/lee-101/</id>
    <published>2021-12-30T09:48:56.828Z</published>
    <updated>2022-01-01T03:25:52.721Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/symmetric-tree/" target="_blank" rel="noopener">LeetCode</a></strong></p><p>Given the <code>root</code> of a binary tree, <em>check whether it is a mirror of itself</em> (i.e., symmetric around its center).</p><p><strong>Example 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg" alt=""></p><pre>**Input:** root = [1,2,2,3,4,4,3]**Output:** true</pre><p><strong>Example 2:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg" alt=""></p><pre>**Input:** root = [1,2,2,null,3,null,3]**Output:** false</pre><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul><p><strong>Follow up:</strong> Could you solve it both recursively and iteratively?</p><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>判断二叉树是否对称</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>Easy题，但难点是转化成比较两棵树是否对称</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>难点是转化成比较两棵树是否对称    </li><li>还要比较值相等，root.val == root2.val</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isSymmetric</span><span class="params">(self, root: TreeNode)</span> -&gt; bool:</span></span><br><span class="line"><span class="keyword">return</span> self.is_symmetric(root.left, root.right)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_symmetric</span><span class="params">(self, root, root2)</span>:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> root <span class="keyword">and</span> <span class="keyword">not</span> root2:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> root <span class="keyword">or</span> <span class="keyword">not</span> root2:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">return</span> root.val == root2.val <span class="keyword">and</span> self.is_symmetric(root.left, root2.right) <span class="keyword">and</span> self.is_symmetric(root.right, root2.left)</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/symmetric-tree/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given the &lt;co
      
    
    </summary>
    
    
      <category term="Binary Tree" scheme="https://shineboy2013.github.com/tags/Binary-Tree/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 102 Binary Tree Level Order Traversal</title>
    <link href="https://shineboy2013.github.com/2021/12/30/lee-102/"/>
    <id>https://shineboy2013.github.com/2021/12/30/lee-102/</id>
    <published>2021-12-30T09:26:06.359Z</published>
    <updated>2021-12-30T09:30:03.132Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given the <code>root</code> of a binary tree, return <em>the level order traversal of its nodes’ values</em>. (i.e., from left to right, level by level).<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg" alt=""><br><br><pre><strong>Input:</strong> root = [3,9,20,null,null,15,7]<br><strong>Output:</strong> [[3],[9,20],[15,7]]<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> root = [1]<br><strong>Output:</strong> [[1]]<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> root = []<br><strong>Output:</strong> []<br></pre><br><br><strong>Constraints:</strong><br><br><em>   The number of nodes in the tree is in the range <code>[0, 2000]</code>.</em>   <code>-1000 &lt;= Node.val &lt;= 1000</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>二叉树按层遍历</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>用BFS模板</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li></li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root: TreeNode)</span> -&gt; List[List[int]]:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line"><span class="keyword">return</span> []</span><br><span class="line">queue, res = collections.deque([root]), []</span><br><span class="line"><span class="keyword">while</span> queue:</span><br><span class="line">level = []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(len(queue)):</span><br><span class="line">node = queue.popleft()</span><br><span class="line">level.append(node.val)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> node.left:</span><br><span class="line">queue.append(node.left)</span><br><span class="line"><span class="keyword">if</span> node.right:</span><br><span class="line">queue.append(node.right)</span><br><span class="line">res.append(level)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/binary-tree-level-order-traversal/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/
      
    
    </summary>
    
    
      <category term="Binary Tree" scheme="https://shineboy2013.github.com/tags/Binary-Tree/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 103 Binary Tree Zigzag Level Order Traversal</title>
    <link href="https://shineboy2013.github.com/2021/12/30/lee-103/"/>
    <id>https://shineboy2013.github.com/2021/12/30/lee-103/</id>
    <published>2021-12-30T09:11:24.325Z</published>
    <updated>2021-12-30T09:13:49.594Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given the <code>root</code> of a binary tree, return <em>the zigzag level order traversal of its nodes’ values</em>. (i.e., from left to right, then right to left for the next level and alternate between).<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg" alt=""><br><br><pre><strong>Input:</strong> root = [3,9,20,null,null,15,7]<br><strong>Output:</strong> [[3],[20,9],[15,7]]<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> root = [1]<br><strong>Output:</strong> [[1]]<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> root = []<br><strong>Output:</strong> []<br></pre><br><br><strong>Constraints:</strong><br><br><em>   The number of nodes in the tree is in the range <code>[0, 2000]</code>.</em>   <code>-100 &lt;= Node.val &lt;= 100</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>按层遍历二叉树。偶数层逆向</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>用BFS按层遍历模板</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>多这一行level.append(node.val)   </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zigzagLevelOrder</span><span class="params">(self, root: TreeNode)</span> -&gt; List[List[int]]:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line"><span class="keyword">return</span> []</span><br><span class="line">res = []</span><br><span class="line">queue = collections.deque([root])</span><br><span class="line"><span class="keyword">while</span> queue:</span><br><span class="line">level = []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(len(queue)):</span><br><span class="line">node = queue.popleft()</span><br><span class="line">level.append(node.val)</span><br><span class="line"><span class="keyword">if</span> node.left:</span><br><span class="line">queue.append(node.left)</span><br><span class="line"><span class="keyword">if</span> node.right:</span><br><span class="line">queue.append(node.right)</span><br><span class="line"><span class="keyword">if</span> len(res) % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">res.append(level[::<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">res.append(level)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/st
      
    
    </summary>
    
    
      <category term="Binary Tree" scheme="https://shineboy2013.github.com/tags/Binary-Tree/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 114 Flatten Binary Tree to Linked List</title>
    <link href="https://shineboy2013.github.com/2021/12/29/lee-114/"/>
    <id>https://shineboy2013.github.com/2021/12/29/lee-114/</id>
    <published>2021-12-30T07:26:20.108Z</published>
    <updated>2021-12-30T07:36:57.509Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/flatten-binary-tree-to-linked-list/" target="_blank" rel="noopener">LeetCode</a></strong></p><div>Given the <code>root</code> of a binary tree, flatten the tree into a “linked list”: <em> The “linked list” should use the same <code>TreeNode</code> class where the <code>right</code> child pointer points to the next node in the list and the <code>left</code> child pointer is always <code>null</code>. </em> The “linked list” should be in the same order as a <a href="https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR" target="_blank" rel="noopener"><strong>pre-order</strong> <strong>traversal</strong></a> of the binary tree. <strong>Example 1:</strong> <img src="https://assets.leetcode.com/uploads/2021/01/14/flaten.jpg" alt=""><br><br><pre><strong>Input:</strong> root = [1,2,5,3,4,null,6]<br><strong>Output:</strong> [1,null,2,null,3,null,4,null,5,null,6]<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> root = []<br><strong>Output:</strong> []<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> root = [0]<br><strong>Output:</strong> [0]<br></pre><br><br><strong>Constraints:</strong> <em> The number of nodes in the tree is in the range <code>[0, 2000]</code>. </em> <code>-100 &lt;= Node.val &lt;= 100</code> <strong>Follow up:</strong> Can you flatten the tree in-place (with <code>O(1)</code> extra space)?</div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>将二叉树转成以右节点相连的LL</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>递归需要知道左右递归末尾节点，这样才可以将右节点的首节点接到左节点的末尾。所以递归函数输入是root，返回LL末尾节点  </p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>递归函数输入是root，返回LL末尾节点    </li><li>如果left_end是空，也就是<strong>没有左节点，就不用交换</strong>。返回right_end, left_end, root三者中非空者。  </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatten</span><span class="params">(self, root: TreeNode)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">self.dfs(root)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, root: TreeNode)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">left_end = self.dfs(root.left)</span><br><span class="line">right_end = self.dfs(root.right)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> left_end: <span class="comment"># remember</span></span><br><span class="line">left_end.right = root.right</span><br><span class="line">root.right, root.left = root.left, <span class="keyword">None</span></span><br><span class="line"><span class="keyword">if</span> right_end:</span><br><span class="line"><span class="keyword">return</span> right_end</span><br><span class="line"><span class="keyword">elif</span> left_end:</span><br><span class="line"><span class="keyword">return</span> left_end</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/flatten-binary-tree-to-linked-list/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Binary Tree" scheme="https://shineboy2013.github.com/tags/Binary-Tree/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 070 Climbing Stairs</title>
    <link href="https://shineboy2013.github.com/2021/12/29/lee-070/"/>
    <id>https://shineboy2013.github.com/2021/12/29/lee-070/</id>
    <published>2021-12-30T04:17:32.216Z</published>
    <updated>2021-12-30T04:24:03.235Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/climbing-stairs/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>You are climbing a staircase. It takes <code>n</code> steps to reach the top.<br><br>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> n = 2<br><strong>Output:</strong> 2<br><strong>Explanation:</strong> There are two ways to climb to the top.<br>1. 1 step + 1 step<br>2. 2 steps<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> n = 3<br><strong>Output:</strong> 3<br><strong>Explanation:</strong> There are three ways to climb to the top.<br>1. 1 step + 1 step + 1 step<br>2. 1 step + 2 steps<br>3. 2 steps + 1 step<br></pre><br><br><strong>Constraints:</strong><br><br>*   <code>1 &lt;= n &lt;= 45</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>爬楼梯的方法数。一次可以爬一级或二级</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>DP的经典题<br>递归式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[n] = dp[n - 1] + dp[n - 2]</span><br></pre></td></tr></table></figure></p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>递归式含两个前状态，所以用两个变量。Python的优势是可以同时赋值，所以不需要用临时变量     </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dp[n] = dp[n - 1] + dp[n - 2]</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">prev, cur = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n + <span class="number">1</span>): <span class="comment"># 4</span></span><br><span class="line">cur, prev = cur + prev, cur <span class="comment"># 5, 3</span></span><br><span class="line"><span class="keyword">return</span> cur</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/climbing-stairs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;Yo
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Dynamic Programming" scheme="https://shineboy2013.github.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 254 Factor Combinations</title>
    <link href="https://shineboy2013.github.com/2021/12/29/lee-254/"/>
    <id>https://shineboy2013.github.com/2021/12/29/lee-254/</id>
    <published>2021-12-30T03:26:48.088Z</published>
    <updated>2022-01-01T03:18:37.821Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/factor-combinations/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Numbers can be regarded as the product of their factors.<br><br><em>   For example, <code>8 = 2 x 2 x 2 = 2 x 4</code>.<br><br>Given an integer <code>n</code>, return <em>all possible combinations of its factors</em>. You may return the answer in <strong>any order</strong>.<br><br><strong>Note</strong> that the factors should be in the range <code>[2, n - 1]</code>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> n = 1<br><strong>Output:</strong> []<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> n = 12<br><strong>Output:</strong> [[2,6],[3,4],[2,2,3]]<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> n = 37<br><strong>Output:</strong> []<br></pre><br><br><strong>Constraints:</strong></em>   <code>1 &lt;= n &lt;= 10&lt;sup&gt;7&lt;/sup&gt;</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求所有因式分解</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>求所有解，所以用DFS。类似于LeetCode 039 Combination Sum元素可复用。  </p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>类似于元素可复用的组合和。但更似<strong>全组合模板，append发生在循环中</strong>，而不是终止条件中。比如12，遇到2就把商[2, 6]加入到结果  </li><li>数值区间的组合，start和target都是数值，而不是数组长度。i是从start开始，而不是从2开始，<strong>保证path里的数有序</strong>   </li><li>target // i &lt; i <strong>保证path里的数有序</strong>，否则12=232，不可行  </li><li>i从start循环到math.sqrt(n) + 1，否则会TLE   </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFactors</span><span class="params">(self, n: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">res = []</span><br><span class="line">self.dfs(n, <span class="number">2</span>, n, [], res)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, n, start, target, path, res)</span>:</span></span><br><span class="line"><span class="keyword">if</span> target == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(start, int(math.sqrt(n) + <span class="number">1</span>)): <span class="comment"># remember to use start</span></span><br><span class="line"><span class="keyword">if</span> target % i != <span class="number">0</span> <span class="keyword">or</span> target // i &lt; i: <span class="comment"># remember</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">path.append(i)</span><br><span class="line">res.append(list(path + [target // i]))</span><br><span class="line">self.dfs(n, i, target // i, path, res) </span><br><span class="line">path.pop()</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(2<sup>n</sup>)</code>，空间复杂度<code>O(# of prime factors)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/factor-combinations/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;b
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Backtracking" scheme="https://shineboy2013.github.com/tags/Backtracking/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 377 Combination Sum IV</title>
    <link href="https://shineboy2013.github.com/2021/12/29/lee-377/"/>
    <id>https://shineboy2013.github.com/2021/12/29/lee-377/</id>
    <published>2021-12-29T23:22:34.011Z</published>
    <updated>2022-01-01T03:18:58.972Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/combination-sum-iv/submissions/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given an array of <strong>distinct</strong> integers <code>nums</code> and a target integer <code>target</code>, return <em>the number of possible combinations that add up to</em> <code>target</code>.<br><br>The test cases are generated so that the answer can fit in a <strong>32-bit</strong> integer.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> nums = [1,2,3], target = 4<br><strong>Output:</strong> 7<br><strong>Explanation:</strong><br>The possible combination ways are:<br>(1, 1, 1, 1)<br>(1, 1, 2)<br>(1, 2, 1)<br>(1, 3)<br>(2, 1, 1)<br>(2, 2)<br>(3, 1)<br>Note that different sequences are counted as different combinations.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> nums = [9], target = 3<br><strong>Output:</strong> 0<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= nums.length &lt;= 200</code></em>   <code>1 &lt;= nums[i] &lt;= 1000</code><br><em>   All the elements of <code>nums</code> are <strong>unique</strong>.</em>   <code>1 &lt;= target &lt;= 1000</code><br><br><strong>Follow up:</strong> What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求所有可能组合的和等于target。元素可以复用且顺序在组合中可以任意。   </p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>这题似组合又似排列，是组合的结果再全排列。求种数另一种的方法是DP. dp[n]为target=n所有的所有组合种数。属于数值-&gt;个数型DP<br>递归公式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[n + num[i]] = dp[n], n = [1, tgt], i = [0, len(nums) - 1]</span><br></pre></td></tr></table></figure></p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>dp[i + nums[j]] += dp[i] 而不是dp[i] + 1 </li><li>dp[0] = 1表示数值为0，可以不用任何数就能获得，所以是1种     </li><li>先排序，否则如[3, 1, 2, 4]，返回dp[1] = 0, 但应该是dp[1] = 1  </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dp[n + num[i]] = dp[n], n = [1, tgt], i = [0, len(nums) - 1]</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combinationSum4</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">nums.sort() <span class="comment"># remember</span></span><br><span class="line">dp = [<span class="number">0</span>] * (target + <span class="number">1</span>)</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(dp)):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(nums)):</span><br><span class="line"><span class="keyword">if</span> i + nums[j] &gt; target:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">dp[i + nums[j]] += dp[i] <span class="comment"># remember no +1</span></span><br><span class="line"><span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n*target)</code>，空间复杂度<code>O(target)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/combination-sum-iv/submissions/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Dynamic Programming" scheme="https://shineboy2013.github.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 216 Combination Sum III</title>
    <link href="https://shineboy2013.github.com/2021/12/29/lee-216/"/>
    <id>https://shineboy2013.github.com/2021/12/29/lee-216/</id>
    <published>2021-12-29T20:38:20.462Z</published>
    <updated>2021-12-29T20:43:21.751Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/combination-sum-iii/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Find all valid combinations of <code>k</code> numbers that sum up to <code>n</code> such that the following conditions are true:<br><br><em>   Only numbers <code>1</code> through <code>9</code> are used.</em>   Each number is used <strong>at most once</strong>.<br><br>Return <em>a list of all possible valid combinations</em>. The list must not contain the same combination twice, and the combinations may be returned in any order.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> k = 3, n = 7<br><strong>Output:</strong> [[1,2,4]]<br><strong>Explanation:</strong><br>1 + 2 + 4 = 7<br>There are no other valid combinations.</pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> k = 3, n = 9<br><strong>Output:</strong> [[1,2,6],[1,3,5],[2,3,4]]<br><strong>Explanation:</strong><br>1 + 2 + 6 = 9<br>1 + 3 + 5 = 9<br>2 + 3 + 4 = 9<br>There are no other valid combinations.<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> k = 4, n = 1<br><strong>Output:</strong> []<br><strong>Explanation:</strong> There are no valid combinations.<br>Using 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 &gt; 1, there are no valid combination.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>2 &lt;= k &lt;= 9</code></em>   <code>1 &lt;= n &lt;= 60</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>数字1-9的组合个数为k的组合和等于k，每个元素最多用一次</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>用组合模板，先排序</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>Leetcode 40和77的结合。个数和target都要达到。用if k == 0 and target == 0   </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combinationSum3</span><span class="params">(self, k: int, n: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">nums = [_ <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line">res = []</span><br><span class="line">self.dfs(nums, <span class="number">0</span>, k, n, [], res)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, nums, start, k, target, path, res)</span>:</span></span><br><span class="line"><span class="keyword">if</span> k == <span class="number">0</span> <span class="keyword">and</span> target == <span class="number">0</span>:</span><br><span class="line">res.append(list(path))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(start, len(nums)):</span><br><span class="line">path.append(nums[i])</span><br><span class="line">self.dfs(nums, i + <span class="number">1</span>, k - <span class="number">1</span>, target - nums[i], path, res)</span><br><span class="line">path.pop()</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(2<sup>k</sup>)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/combination-sum-iii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;b
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 077 Combinations</title>
    <link href="https://shineboy2013.github.com/2021/12/29/lee-077/"/>
    <id>https://shineboy2013.github.com/2021/12/29/lee-077/</id>
    <published>2021-12-29T19:45:45.667Z</published>
    <updated>2021-12-29T20:42:43.303Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/combinations/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given two integers <code>n</code> and <code>k</code>, return <em>all possible combinations of</em> <code>k</code> <em>numbers out of the range</em> <code>[1, n]</code>.<br><br>You may return the answer in <strong>any order</strong>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> n = 4, k = 2<br><strong>Output:</strong><br>[<br>  [2,4],<br>  [3,4],<br>  [2,3],<br>  [1,2],<br>  [1,3],<br>  [1,4],<br>]<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> n = 1, k = 1<br><strong>Output:</strong> [[1]]<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= n &lt;= 20</code></em>   <code>1 &lt;= k &lt;= n</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求大小为k的所有可能组合</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>用组合模板，先排序</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>引入k作为模板API中的target，<strong>k为0作为终止条件</strong>。   </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combine</span><span class="params">(self, n: int, k: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">nums = [_ <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1</span>, n + <span class="number">1</span>)]</span><br><span class="line">path, result = [], []</span><br><span class="line">self.dfs(nums, <span class="number">0</span>, k, path, result)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, nums, st, k, path, result)</span>:</span></span><br><span class="line"><span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">result.append(list(path))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(st, len(nums)):</span><br><span class="line">path.append(nums[i])</span><br><span class="line">self.dfs(nums, i + <span class="number">1</span>, k - <span class="number">1</span>, path, result)</span><br><span class="line">path.pop()</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(2<sup>k</sup>)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/combinations/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;Given
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 040 Combination Sum II</title>
    <link href="https://shineboy2013.github.com/2021/12/29/lee-040/"/>
    <id>https://shineboy2013.github.com/2021/12/29/lee-040/</id>
    <published>2021-12-29T19:32:00.919Z</published>
    <updated>2021-12-29T19:36:12.239Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/combination-sum-ii/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given a collection of candidate numbers (<code>candidates</code>) and a target number (<code>target</code>), find all unique combinations in <code>candidates</code> where the candidate numbers sum to <code>target</code>.<br><br>Each number in <code>candidates</code> may only be used <strong>once</strong> in the combination.<br><br><strong>Note:</strong> The solution set must not contain duplicate combinations.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> candidates = [10,1,2,7,6,1,5], target = 8<br><strong>Output:</strong><br>[<br>[1,1,6],<br>[1,2,5],<br>[1,7],<br>[2,6]<br>]<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> candidates = [2,5,2,1,2], target = 5<br><strong>Output:</strong><br>[<br>[1,2,2],<br>[5]<br>]<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= candidates.length &lt;= 100</code></em>   <code>1 &lt;= candidates[i] &lt;= 50</code><br>*   <code>1 &lt;= target &lt;= 30</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求组合和等于目标。元素不可复用且结果去重</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>用组合模板，先排序</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>类似于Leetcode 39，有两点不同。要去重，<strong>i &gt; start</strong>并不是i &gt; 0, 且比较前一个元素  </li><li>因为元素不可重复，下一轮递归i + 1    </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combinationSum</span><span class="params">(self, candidates: List[int], target: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">candidates.sort()</span><br><span class="line">res = []</span><br><span class="line">self.dfs(candidates, <span class="number">0</span>, target, [], res)</span><br><span class="line"><span class="keyword">return</span> list(res)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, candidates, start, target, path, res)</span>:</span> <span class="comment"># [1, 2], 0, 0, [1, 1], [1, 1]</span></span><br><span class="line"><span class="keyword">if</span> target &lt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">if</span> target == <span class="number">0</span>:</span><br><span class="line">res.append(list(path))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(start, len(candidates)): <span class="comment"># [2]</span></span><br><span class="line"><span class="keyword">if</span> i &gt; start <span class="keyword">and</span> candidates[i - <span class="number">1</span>] == candidates[i]:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">path.append(candidates[i]) <span class="comment"># [1,1]</span></span><br><span class="line">self.dfs(candidates, i + <span class="number">1</span>, target - candidates[i], path, res)</span><br><span class="line">path.pop()</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(2<sup>n</sup>)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/combination-sum-ii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 039 Combination Sum</title>
    <link href="https://shineboy2013.github.com/2021/12/29/lee-039/"/>
    <id>https://shineboy2013.github.com/2021/12/29/lee-039/</id>
    <published>2021-12-29T18:51:22.510Z</published>
    <updated>2021-12-29T19:09:32.224Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/combination-sum/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given an array of <strong>distinct</strong> integers <code>candidates</code> and a target integer <code>target</code>, return <em>a list of all <strong>unique combinations</strong> of</em> <code>candidates</code> <em>where the chosen numbers sum to</em> <code>target</code><em>.</em> You may return the combinations in <strong>any order</strong>.<br><br>The <strong>same</strong> number may be chosen from <code>candidates</code> an <strong>unlimited number of times</strong>. Two combinations are unique if the frequency of at least one of the chosen numbers is different.<br><br>It is <strong>guaranteed</strong> that the number of unique combinations that sum up to <code>target</code> is less than <code>150</code> combinations for the given input.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> candidates = [2,3,6,7], target = 7<br><strong>Output:</strong> [[2,2,3],[7]]<br><strong>Explanation:</strong><br>2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.<br>7 is a candidate, and 7 = 7.<br>These are the only two combinations.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> candidates = [2,3,5], target = 8<br><strong>Output:</strong> [[2,2,2,2],[2,3,3],[3,5]]<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> candidates = [2], target = 1<br><strong>Output:</strong> []<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= candidates.length &lt;= 30</code></em>   <code>1 &lt;= candidates[i] &lt;= 200</code><br><em>   All elements of <code>candidates</code> are <strong>distinct</strong>.</em>   <code>1 &lt;= target &lt;= 500</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求组合和等于目标。元素可以复用</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>用组合模板，先排序</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>用标准组合模板dfs(self, candidates, start, target, path, res)，元素可以复用，所以下一轮递归从i开始</li><li>Python中path.pop()没有参数   </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combinationSum</span><span class="params">(self, candidates: List[int], target: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">candidates.sort()</span><br><span class="line">res = []</span><br><span class="line">self.dfs(candidates, <span class="number">0</span>, target, [], res)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, candidates, start, target, path, res)</span>:</span> <span class="comment"># [1, 2], 0, 0, [1, 1], [1, 1]</span></span><br><span class="line"><span class="keyword">if</span> target &lt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">if</span> target == <span class="number">0</span>:</span><br><span class="line">res.append(list(path))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(start, len(candidates)): <span class="comment"># [2]</span></span><br><span class="line">path.append(candidates[i]) <span class="comment"># [1,1]</span></span><br><span class="line">self.dfs(candidates, i, target - candidates[i], path, res)</span><br><span class="line">path.pop()</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(2<sup>n</sup>)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/combination-sum/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;Gi
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Facebook" scheme="https://shineboy2013.github.com/tags/Facebook/"/>
    
  </entry>
  
</feed>
