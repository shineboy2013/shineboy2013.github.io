<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jiajie&#39;s blog</title>
  
  <subtitle>每天积累多一些</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shineboy2013.github.com/"/>
  <updated>2021-12-13T21:07:00.009Z</updated>
  <id>https://shineboy2013.github.com/</id>
  
  <author>
    <name>KK Shum</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode</title>
    <link href="https://shineboy2013.github.com/2021/12/13/lee-031/"/>
    <id>https://shineboy2013.github.com/2021/12/13/lee-031/</id>
    <published>2021-12-13T21:00:12.500Z</published>
    <updated>2021-12-13T21:07:00.009Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/next-permutation/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Implement <strong>next permutation</strong>, which rearranges numbers into the lexicographically next greater permutation of numbers.<br><br>If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).<br><br>The replacement must be <strong><a href="http://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener">in place</a></strong> and use only constant extra memory.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> nums = [1,2,3]<br><strong>Output:</strong> [1,3,2]<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> nums = [3,2,1]<br><strong>Output:</strong> [1,2,3]<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> nums = [1,1,5]<br><strong>Output:</strong> [1,5,1]<br></pre><br><br><strong>Example 4:</strong><br><br><pre><strong>Input:</strong> nums = [1]<br><strong>Output:</strong> [1]<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= nums.length &lt;= 100</code></em>   <code>0 &lt;= nums[i] &lt;= 100</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>下一个全排列数</p><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h2><p>N/A</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><ol><li>找到从后往前升序的第一个非升序数，如135864的5     </li><li>找到从后往前比步骤1中大的数，调换，如6，变成136854</li><li>后边部分按升序排列或者做reverse(更高效)</li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>Python语法问题： reverse子列表，跟倒序遍历数组一样，要指明前后边界，前面边界值更大    </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 135864 -&gt; 136854 -&gt; 136458</span></span><br><span class="line"><span class="comment"># 1355864 -&gt; 1356458</span></span><br><span class="line"><span class="comment"># 99</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nextPermutation</span><span class="params">(self, nums: List[int])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">to_be_swapped_index, greater_index = <span class="number">-1</span>, <span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums) - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line"><span class="keyword">if</span> nums[i] &lt; nums[i + <span class="number">1</span>]: <span class="comment"># 5 &lt; 8</span></span><br><span class="line">to_be_swapped_index = i <span class="comment"># 2</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> to_be_swapped_index == <span class="number">-1</span>:</span><br><span class="line">nums.sort()</span><br><span class="line"><span class="keyword">return</span> nums</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums) - <span class="number">1</span>, to_be_swapped_index, <span class="number">-1</span>): <span class="comment">#</span></span><br><span class="line"><span class="keyword">if</span> nums[to_be_swapped_index] &lt; nums[i]: <span class="comment"># 5 &lt; 6</span></span><br><span class="line">greater_index = i <span class="comment"># 4</span></span><br><span class="line"><span class="keyword">break</span> <span class="comment"># 136854</span></span><br><span class="line">nums[to_be_swapped_index], nums[greater_index] = nums[greater_index], nums[to_be_swapped_index]</span><br><span class="line"><span class="comment"># nums[to_be_swapped_index + 1:] = sorted(nums[to_be_swapped_index + 1:]) # 136458</span></span><br><span class="line">nums[to_be_swapped_index + <span class="number">1</span>:] = nums[:to_be_swapped_index:<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/next-permutation/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;I
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode</title>
    <link href="https://shineboy2013.github.com/2021/12/13/lee-000/"/>
    <id>https://shineboy2013.github.com/2021/12/13/lee-000/</id>
    <published>2021-12-13T19:38:49.724Z</published>
    <updated>2021-12-13T19:41:02.540Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="">LeetCode</a></strong></p><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>N/A</p><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h2><p>N/A</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li></li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;&lt;strong&gt;题目大意：&lt;/strong&gt;&lt;
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 014 Longest Common Prefix</title>
    <link href="https://shineboy2013.github.com/2021/12/13/lee-014/"/>
    <id>https://shineboy2013.github.com/2021/12/13/lee-014/</id>
    <published>2021-12-13T18:47:54.419Z</published>
    <updated>2021-12-13T18:56:54.462Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/longest-common-prefix/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Write a function to find the longest common prefix string amongst an array of strings.<br><br>If there is no common prefix, return an empty string <code>&quot;&quot;</code>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> strs = [“flower”,”flow”,”flight”]<br><strong>Output:</strong> “fl”<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> strs = [“dog”,”racecar”,”car”]<br><strong>Output:</strong> “”<br><strong>Explanation:</strong> There is no common prefix among the input strings.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= strs.length &lt;= 200</code></em>   <code>0 &lt;= strs[i].length &lt;= 200</code><br>*   <code>strs[i]</code> consists of only lower-case English letters.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>字符串列表的最长前缀</p><h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a><strong>算法思路：</strong></h3><p>N/A  </p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>求最小值len初始值用最大值而不是0  </li><li>char = strs[0][i]而不是char = strs[i]   </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs: List[str])</span> -&gt; str:</span></span><br><span class="line">min_len, res = sys.maxsize, <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">min_len = min(min_len, len(s))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(min_len):</span><br><span class="line">char = strs[<span class="number">0</span>][i]</span><br><span class="line">same_char = <span class="keyword">True</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(strs)):</span><br><span class="line"><span class="keyword">if</span> char != strs[j][i]:</span><br><span class="line">same_char = <span class="keyword">False</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> same_char:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">res += char</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(nm)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-common-prefix/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;
      
    
    </summary>
    
    
      <category term="String" scheme="https://shineboy2013.github.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 002 Add Two Numbers</title>
    <link href="https://shineboy2013.github.com/2021/12/12/lee-002/"/>
    <id>https://shineboy2013.github.com/2021/12/12/lee-002/</id>
    <published>2021-12-12T20:24:32.934Z</published>
    <updated>2021-12-13T19:01:51.547Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/add-two-numbers" target="_blank" rel="noopener">LeetCode</a></strong></p><div><p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong>, and each of their nodes contains a single digit. Add the two numbers and return the sum&nbsp;as a linked list.</p><br><br><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><br><br><p>&nbsp;</p><br><p><strong>Example 1:</strong></p><br><img alt="" src="https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg" style="width: 483px; height: 342px;"><br><pre><strong>Input:</strong> l1 = [2,4,3], l2 = [5,6,4]<br><strong>Output:</strong> [7,0,8]<br><strong>Explanation:</strong> 342 + 465 = 807.<br></pre><br><br><p><strong>Example 2:</strong></p><br><br><pre><strong>Input:</strong> l1 = [0], l2 = [0]<br><strong>Output:</strong> [0]<br></pre><br><br><p><strong>Example 3:</strong></p><br><br><pre><strong>Input:</strong> l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]<br><strong>Output:</strong> [8,9,9,9,0,0,0,1]<br></pre><br><br><p>&nbsp;</p><br><p><strong>Constraints:</strong></p><br><br><ul><br>    <li>The number of nodes in each linked list is in the range <code>[1, 100]</code>.</li><br>    <li><code>0 &lt;= Node.val &lt;= 9</code></li><br>    <li>It is guaranteed that the list represents a number that does not have leading zeros.</li><br></ul><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>数位链表(从最低位到最高位)相加</p><h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a><strong>算法思路：</strong></h3><p>类似于merge sort  </p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>其中一个可能较长，所以主循环出来后还要继续循环较长的链表，类似于merge sort</li><li>所有链表遍历完后，carry可能还会是1，要加一个if语句特别处理     </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1: <span class="string">'ListNode'</span>, l2: <span class="string">'ListNode'</span>)</span> -&gt; 'ListNode':</span></span><br><span class="line">fake_head = ListNode(<span class="number">0</span>)</span><br><span class="line">carry = <span class="number">0</span></span><br><span class="line">it, it2, it_res = l1, l2, fake_head</span><br><span class="line"><span class="keyword">while</span> it <span class="keyword">and</span> it2:</span><br><span class="line">value = it.val + it2.val + carry</span><br><span class="line">carry = <span class="number">1</span> <span class="keyword">if</span> value &gt;= <span class="number">10</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">value %= <span class="number">10</span></span><br><span class="line">it_res.next = ListNode(value)</span><br><span class="line">it, it2, it_res = it.next, it2.next, it_res.next</span><br><span class="line"><span class="keyword">while</span> it:  <span class="comment"># remember it can be longer than it2</span></span><br><span class="line">value = it.val + carry</span><br><span class="line">carry = <span class="number">1</span> <span class="keyword">if</span> value &gt;= <span class="number">10</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">value %= <span class="number">10</span></span><br><span class="line">it_res.next = ListNode(value)</span><br><span class="line">it, it_res = it.next, it_res.next</span><br><span class="line"><span class="keyword">while</span> it2:</span><br><span class="line">value = it2.val + carry</span><br><span class="line">carry = <span class="number">1</span> <span class="keyword">if</span> value &gt;= <span class="number">10</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">value %= <span class="number">10</span></span><br><span class="line">it_res.next = ListNode(value)</span><br><span class="line">it2, it_res = it2.next, it_res.next</span><br><span class="line"><span class="keyword">if</span> carry == <span class="number">1</span>:</span><br><span class="line">it_res.next = ListNode(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> fake_head.next</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n + m)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/add-two-numbers&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;p&gt;You are 
      
    
    </summary>
    
    
      <category term="Linked List" scheme="https://shineboy2013.github.com/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 2106 Maximum Fruits Harvested After at Most K Steps</title>
    <link href="https://shineboy2013.github.com/2021/12/12/lee-2106/"/>
    <id>https://shineboy2013.github.com/2021/12/12/lee-2106/</id>
    <published>2021-12-12T11:23:19.584Z</published>
    <updated>2021-12-13T19:02:37.691Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/maximum-fruits-harvested-after-at-most-k-steps/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Fruits are available at some positions on an infinite x-axis. You are given a 2D integer array <code>fruits</code> where <code>fruits[i] = [position&lt;sub&gt;i&lt;/sub&gt;, amount&lt;sub&gt;i&lt;/sub&gt;]</code> depicts <code>amount&lt;sub&gt;i&lt;/sub&gt;</code> fruits at the position <code>position&lt;sub&gt;i&lt;/sub&gt;</code>. <code>fruits</code> is already <strong>sorted</strong> by <code>position&lt;sub&gt;i&lt;/sub&gt;</code> in <strong>ascending order</strong>, and each <code>position&lt;sub&gt;i&lt;/sub&gt;</code> is <strong>unique</strong>.<br><br>You are also given an integer <code>startPos</code> and an integer <code>k</code>. Initially, you are at the position <code>startPos</code>. From any position, you can either walk to the <strong>left or right</strong>. It takes <strong>one step</strong> to move <strong>one unit</strong> on the x-axis, and you can walk <strong>at most</strong> <code>k</code> steps in total. For every position you reach, you harvest all the fruits at that position, and the fruits will disappear from that position.<br><br>Return <em>the <strong>maximum total number</strong> of fruits you can harvest</em>.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/11/21/1.png" alt=""><br><br><pre><strong>Input:</strong> fruits = [[2,8],[6,3],[8,6]], startPos = 5, k = 4<br><strong>Output:</strong> 9<br><strong>Explanation:</strong><br>The optimal way is to:<br>- Move right to position 6 and harvest 3 fruits<br>- Move right to position 8 and harvest 6 fruits<br>You moved 3 steps and harvested 3 + 6 = 9 fruits in total.<br></pre><br><br><strong>Example 2:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/11/21/2.png" alt=""><br><br><pre><strong>Input:</strong> fruits = [[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]], startPos = 5, k = 4<br><strong>Output:</strong> 14<br><strong>Explanation:</strong><br>You can move at most k = 4 steps, so you cannot reach position 0 nor 10.<br>The optimal way is to:<br>- Harvest the 7 fruits at the starting position 5<br>- Move left to position 4 and harvest 1 fruit<br>- Move right to position 6 and harvest 2 fruits<br>- Move right to position 7 and harvest 4 fruits<br>You moved 1 + 3 = 4 steps and harvested 7 + 1 + 2 + 4 = 14 fruits in total.<br></pre><br><br><strong>Example 3:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/11/21/3.png" alt=""><br><br><pre><strong>Input:</strong> fruits = [[0,3],[6,4],[8,5]], startPos = 3, k = 2<br><strong>Output:</strong> 0<br><strong>Explanation:</strong><br>You can move at most k = 2 steps and cannot reach any position with fruits.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= fruits.length &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></em>   <code>fruits[i].length == 2</code><br><em>   `0 &lt;= startPos, position<sub>i</sub> &lt;= 2 </em> 10<sup>5</sup><code>*</code>position<sub>i-1</sub> &lt; position<sub>i</sub><code>for any</code>i &gt; 0<code>(**0-indexed**)*</code>1 &lt;= amount<sub>i</sub> &lt;= 10<sup>4</sup><code>*</code>0 &lt;= k &lt;= 2 * 10<sup>5</sup>`<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>向左向右在规定步数内采集每一格的水果，求最大水果数  </p><h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a><strong>算法思路：</strong></h3><p>一开始考虑用BFS，但由于每个点可以走两次，如先往左再往右，所以不能用BFS<br>每个点不能走3次，因为贪婪法。所以只要计算单向路径的水果数，单向路径水果数只要计算[startPos - k - 1, startPos + k + 1]的这个区间即可<br>然后重复路径的范围是[0, k/2 + 1], 枚举这些值然后用<strong>presum</strong>得到单向路径水果数。</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>先判断不合法的情况sum(gas) &lt; sum(cost)   </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxTotalFruits</span><span class="params">(self, fruits: List[List[int]], startPos: int, k: int)</span> -&gt; int:</span></span><br><span class="line">pos_to_fruits = collections.defaultdict(int)</span><br><span class="line"><span class="keyword">for</span> pair <span class="keyword">in</span> fruits:</span><br><span class="line">pos_to_fruits[pair[<span class="number">0</span>]] = pair[<span class="number">1</span>]</span><br><span class="line">presum = collections.defaultdict(int)</span><br><span class="line">presum[startPos - k - <span class="number">1</span>] = pos_to_fruits[startPos - k - <span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(startPos - k, startPos + k + <span class="number">1</span>):</span><br><span class="line">presum[i] += presum[i<span class="number">-1</span>] + pos_to_fruits[i]</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(k//<span class="number">2</span> + <span class="number">1</span>):</span><br><span class="line">res = max(res, presum[startPos + k - i * <span class="number">2</span>] - presum[startPos - i - <span class="number">1</span>])</span><br><span class="line">res = max(res, presum[startPos + i] - presum[startPos - k + i * <span class="number">2</span> - <span class="number">1</span>])</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(k + n)</code>，空间复杂度<code>O(n + k)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/maximum-fruits-harvested-after-at-most-k-steps/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 2104 Sum of Subarray Ranges</title>
    <link href="https://shineboy2013.github.com/2021/12/12/lee-2104/"/>
    <id>https://shineboy2013.github.com/2021/12/12/lee-2104/</id>
    <published>2021-12-12T11:07:08.056Z</published>
    <updated>2021-12-13T19:03:13.668Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/sum-of-subarray-ranges/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>You are given an integer array <code>nums</code>. The <strong>range</strong> of a subarray of <code>nums</code> is the difference between the largest and smallest element in the subarray.<br><br>Return <em>the <strong>sum of all</strong> subarray ranges of</em> <code>nums</code><em>.</em><br><br>A subarray is a contiguous <strong>non-empty</strong> sequence of elements within an array.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> nums = [1,2,3]<br><strong>Output:</strong> 4<br><strong>Explanation:</strong> The 6 subarrays of nums are the following:<br>[1], range = largest - smallest = 1 - 1 = 0<br>[2], range = 2 - 2 = 0<br>[3], range = 3 - 3 = 0<br>[1,2], range = 2 - 1 = 1<br>[2,3], range = 3 - 2 = 1<br>[1,2,3], range = 3 - 1 = 2<br>So the sum of all ranges is 0 + 0 + 0 + 1 + 1 + 2 = 4.</pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> nums = [1,3,3]<br><strong>Output:</strong> 4<br><strong>Explanation:</strong> The 6 subarrays of nums are the following:<br>[1], range = largest - smallest = 1 - 1 = 0<br>[3], range = 3 - 3 = 0<br>[3], range = 3 - 3 = 0<br>[1,3], range = 3 - 1 = 2<br>[3,3], range = 3 - 3 = 0<br>[1,3,3], range = 3 - 1 = 2<br>So the sum of all ranges is 0 + 0 + 0 + 2 + 0 + 2 = 4.<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> nums = [4,-2,-3,4,1]<br><strong>Output:</strong> 59<br><strong>Explanation:</strong> The sum of all subarray ranges of nums is 59.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= nums.length &lt;= 1000</code></em>   <code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= nums[i] &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求所有子数组的最大值最小值之差的和</p><h3 id="Stack算法思路："><a href="#Stack算法思路：" class="headerlink" title="Stack算法思路："></a><strong>Stack算法思路：</strong></h3><p>参考Leetcode 907，分别求子数组最小值的相反数，子数组的最大值，这两个值的和即为所求  </p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>最小值用递增栈，最大值用递减栈       </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subArrayRanges</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">arr = list(nums)</span><br><span class="line">arr.insert(<span class="number">0</span>, -sys.maxsize)</span><br><span class="line">arr.append(-sys.maxsize)</span><br><span class="line">stack, res, = [], <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line"><span class="keyword">while</span> stack <span class="keyword">and</span> arr[i] &lt; arr[stack[<span class="number">-1</span>]]:</span><br><span class="line">prev_idx = stack.pop()</span><br><span class="line">res -= arr[prev_idx] * (prev_idx - stack[<span class="number">-1</span>]) * (i - prev_idx)</span><br><span class="line">stack.append(i)</span><br><span class="line"></span><br><span class="line">arr = list(nums)</span><br><span class="line">arr.insert(<span class="number">0</span>, sys.maxsize)</span><br><span class="line">arr.append(sys.maxsize)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line"><span class="keyword">while</span> stack <span class="keyword">and</span> arr[i] &gt; arr[stack[<span class="number">-1</span>]]:</span><br><span class="line">prev_idx = stack.pop()</span><br><span class="line">res += arr[prev_idx] * (prev_idx - stack[<span class="number">-1</span>]) * (i - prev_idx)</span><br><span class="line">stack.append(i)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p><hr><h3 id="累计和算法II解题思路："><a href="#累计和算法II解题思路：" class="headerlink" title="累计和算法II解题思路："></a><strong>累计和算法II解题思路：</strong></h3><p>比暴力法稍优，两重循环覆盖所有子数组[i, j]，每轮循环得到最大最小值，然后O(1)内求该区间内所有最大最小值差值和。</p><h3 id="Python代码：-1"><a href="#Python代码：-1" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subArrayRanges</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums) - <span class="number">1</span>):</span><br><span class="line">min_value, max_value = nums[i], nums[i]</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(nums)):</span><br><span class="line">min_value = min(min_value, nums[j])</span><br><span class="line">max_value = max(max_value, nums[j])</span><br><span class="line">sum += max_value - min_value</span><br><span class="line"><span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure><h3 id="算法分析：-1"><a href="#算法分析：-1" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n^2)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/sum-of-subarray-ranges/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br
      
    
    </summary>
    
    
      <category term="Stack" scheme="https://shineboy2013.github.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 907 Sum of Subarray Minimums</title>
    <link href="https://shineboy2013.github.com/2021/12/12/lee-907/"/>
    <id>https://shineboy2013.github.com/2021/12/12/lee-907/</id>
    <published>2021-12-12T10:25:34.880Z</published>
    <updated>2021-12-13T19:04:59.171Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/sum-of-subarray-minimums/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><p>Given an array of integers arr, find the sum of <code>min(b)</code>, where <code>b</code> ranges over every (contiguous) subarray of <code>arr</code>. Since the answer may be large, return the answer <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p><br><br><p>&nbsp;</p><br><p><strong>Example 1:</strong></p><br><br><pre><strong>Input:</strong> arr = [3,1,2,4]<br><strong>Output:</strong> 17<br><strong>Explanation:</strong><br>Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4].<br>Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.<br>Sum is 17.<br></pre><br><br><p><strong>Example 2:</strong></p><br><br><pre><strong>Input:</strong> arr = [11,81,94,43,3]<br><strong>Output:</strong> 444<br></pre><br><br><p>&nbsp;</p><br><p><strong>Constraints:</strong></p><br><br><ul><br>    <li><code>1 &lt;= arr.length &lt;= 3 <em> 10<sup>4</sup></em></code></li><br>    <li><code>1 &lt;= arr[i] &lt;= 3  10<sup>4</sup></code></li><br></ul><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求所有子数组的最小值的和</p><h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a><strong>算法思路：</strong></h3><p>求区间最值用Stack，因为是最小值，所以用<strong>递增栈</strong><br>一开始考虑用类似DP，因为若知道[3, 2, 6]栈为[2, 6], 8入栈，8与每一个栈内元素计算最小值，优化是用栈内的累计和，如2和6对应的累计和而不用每个元素计算。<br>参考了网上算法，<strong>栈内每个元素向左向右区间内（包括自己）均是最小值</strong>，所以出栈时候进行计算即可。<br>如[3, 2, 8, 7, 6, 9, 10, 4]栈是[2, 6, 9, 10]对应的下标，现在4入栈，9和10出栈后，6准备出栈。<br>prev_idx为6的下标4， i是7，6是[8, 7, 6], [7, 6], [6]三个区间的最小值prev_idx - stack[-1] = 3个区间，<br>而这些区间的最小值的和还要再乘以后面的大于它的数，如[7, 6]这个区间可以和这些区间合并[7, 6], [7, 6, 9], [7, 6, 9, 10], 所以(i - prev_idx) = 3<br>这就是arr[prev_idx] <em> (prev_idx - stack[-1]) </em> (i - prev_idx)的精髓  </p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>头尾加入最小值，加入头部因为公式需要栈内的前元素，这样可以处理只有一个元素出栈的情况。尾部加入最小值因为确保所有元素都出栈。     </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumSubarrayMins</span><span class="params">(self, arr: List[int])</span> -&gt; int:</span></span><br><span class="line">arr.insert(<span class="number">0</span>, -sys.maxsize)</span><br><span class="line">arr.append(-sys.maxsize)</span><br><span class="line">stack, res = [], <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line"><span class="keyword">while</span> stack <span class="keyword">and</span> arr[i] &lt; arr[stack[<span class="number">-1</span>]]:</span><br><span class="line">prev_idx = stack.pop()</span><br><span class="line">res += arr[prev_idx] * (prev_idx - stack[<span class="number">-1</span>]) * (i - prev_idx)</span><br><span class="line">res = res % (pow(<span class="number">10</span>, <span class="number">9</span>) + <span class="number">7</span>)</span><br><span class="line">stack.append(i)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/sum-of-subarray-minimums/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;
      
    
    </summary>
    
    
      <category term="Stack" scheme="https://shineboy2013.github.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 215 Kth Largest Element in an Array</title>
    <link href="https://shineboy2013.github.com/2021/12/11/lee-215/"/>
    <id>https://shineboy2013.github.com/2021/12/11/lee-215/</id>
    <published>2021-12-12T00:45:50.424Z</published>
    <updated>2021-12-13T19:05:45.179Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/kth-largest-element-in-an-array/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the</em> <code>k&lt;sup&gt;th&lt;/sup&gt;</code> <em>largest element in the array</em>.<br><br>Note that it is the <code>k&lt;sup&gt;th&lt;/sup&gt;</code> largest element in the sorted order, not the <code>k&lt;sup&gt;th&lt;/sup&gt;</code> distinct element.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> nums = [3,2,1,5,6,4], k = 2<br><strong>Output:</strong> 5<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> nums = [3,2,3,1,2,4,5,5,6], k = 4<br><strong>Output:</strong> 4<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= k &lt;= nums.length &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></em>   <code>-10&lt;sup&gt;4&lt;/sup&gt; &lt;= nums[i] &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求第k大的数(1th index)</p><h3 id="Heap算法思路："><a href="#Heap算法思路：" class="headerlink" title="Heap算法思路："></a><strong>Heap算法思路：</strong></h3><p>求第k个最大也就是用最小堆(大-&gt;小)  </p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><p>N/A</p><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findKthLargest</span><span class="params">(self, nums: List[int], k: int)</span> -&gt; int:</span></span><br><span class="line">res = []  <span class="comment"># min heap</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line"><span class="keyword">if</span> i &lt; k:</span><br><span class="line">heapq.heappush(res, nums[i])</span><br><span class="line"><span class="keyword">elif</span> nums[i] &gt; res[<span class="number">0</span>]:</span><br><span class="line">heapq.heapreplace(res, nums[i])</span><br><span class="line"><span class="keyword">return</span> res[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(nlogk)</code>，空间复杂度<code>O(k)</code> </p><hr><h3 id="Quickselect算法II解题思路："><a href="#Quickselect算法II解题思路：" class="headerlink" title="Quickselect算法II解题思路："></a><strong>Quickselect算法II解题思路：</strong></h3><p>N/A  </p><h3 id="注意事项：-1"><a href="#注意事项：-1" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>递归调用仍用m，而不是跟pivot_pos相关，因为m是下标位置  </li><li>partition中range用[start, end)而不是len    </li></ol><h3 id="Python代码：-1"><a href="#Python代码：-1" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findKthLargest</span><span class="params">(self, nums: List[int], k: int)</span> -&gt; int:</span></span><br><span class="line">m = len(nums) - k</span><br><span class="line"><span class="keyword">return</span> self.quick_select(nums, <span class="number">0</span>, len(nums) - <span class="number">1</span>, m)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_select</span><span class="params">(self, nums, start, end, m)</span>:</span></span><br><span class="line"><span class="keyword">if</span> start &gt; end:</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">pivot_pos = self.partition(nums, start, end)</span><br><span class="line"><span class="keyword">if</span> m == pivot_pos:</span><br><span class="line"><span class="keyword">return</span> nums[pivot_pos]</span><br><span class="line"><span class="keyword">elif</span> m &lt; pivot_pos:</span><br><span class="line"><span class="keyword">return</span> self.quick_select(nums, start, pivot_pos - <span class="number">1</span>, m)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> self.quick_select(nums, pivot_pos + <span class="number">1</span>, end, m)  <span class="comment"># remember use m not related to pivot_pos</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(self, nums, start, end)</span>:</span></span><br><span class="line">pivot, no_smaller_index = nums[end], start</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(start, end):  <span class="comment"># remember use start and end not len</span></span><br><span class="line"><span class="keyword">if</span> nums[i] &lt; pivot:</span><br><span class="line">nums[i], nums[no_smaller_index] = nums[no_smaller_index], nums[i]</span><br><span class="line">no_smaller_index += <span class="number">1</span></span><br><span class="line">nums[no_smaller_index], nums[end] = nums[end], nums[no_smaller_index]</span><br><span class="line"><span class="keyword">return</span> no_smaller_index</span><br></pre></td></tr></table></figure><h3 id="算法分析：-1"><a href="#算法分析：-1" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>T(n) = T(n/2)+n, 时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code> </p><hr><h3 id="排序算法III解题思路："><a href="#排序算法III解题思路：" class="headerlink" title="排序算法III解题思路："></a><strong>排序算法III解题思路：</strong></h3><p>先排序  </p><h3 id="算法分析：-2"><a href="#算法分析：-2" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(nlogn)</code>，空间复杂度<code>O(1)</code> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/kth-largest-element-in-an-array/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="Heap" scheme="https://shineboy2013.github.com/tags/Heap/"/>
    
      <category term="Quickselect" scheme="https://shineboy2013.github.com/tags/Quickselect/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 022 Generate Parentheses</title>
    <link href="https://shineboy2013.github.com/2021/12/11/lee-022/"/>
    <id>https://shineboy2013.github.com/2021/12/11/lee-022/</id>
    <published>2021-12-11T22:10:40.293Z</published>
    <updated>2021-12-13T19:06:24.466Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/generate-parentheses/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given <code>n</code> pairs of parentheses, write a function to <em>generate all combinations of well-formed parentheses</em>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> n = 3<br><strong>Output:</strong> [“((()))”,”(()())”,”(())()”,”()(())”,”()()()”]<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> n = 1<br><strong>Output:</strong> [“()”]<br></pre><br><br><strong>Constraints:</strong><br><br>*   <code>1 &lt;= n &lt;= 8</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>产生n对括号的所有可能</p><h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a><strong>算法思路：</strong></h3><p>DFS填位法，运用括号定律1： 左括号数 &gt;= 右括号数，也就是左括号剩余数 &lt; 右括号剩余数    </p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>复杂度的计算     </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateParenthesis</span><span class="params">(self, n: int)</span> -&gt; List[str]:</span></span><br><span class="line">res = []</span><br><span class="line">self.dfs(n, n, <span class="string">''</span>, res)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, left_paren_left, right_paren_left, path, res)</span>:</span></span><br><span class="line"><span class="keyword">if</span> left_paren_left == <span class="number">0</span> <span class="keyword">and</span> right_paren_left == <span class="number">0</span>:</span><br><span class="line">res.append(path)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">if</span> left_paren_left &gt; <span class="number">0</span>:</span><br><span class="line">path += <span class="string">'('</span></span><br><span class="line">self.dfs(left_paren_left - <span class="number">1</span>, right_paren_left, path, res)</span><br><span class="line">path = path[:<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">if</span> right_paren_left &gt; <span class="number">0</span> <span class="keyword">and</span> left_paren_left &lt; right_paren_left:</span><br><span class="line">path += <span class="string">')'</span></span><br><span class="line">self.dfs(left_paren_left, right_paren_left - <span class="number">1</span>, path, res)</span><br><span class="line">path = path[:<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>n个括号，有2n位，时间复杂度为Catalan数<code>O[C(n,2n)/n+1]</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/generate-parentheses/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
    
      <category term="Backtracking" scheme="https://shineboy2013.github.com/tags/Backtracking/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 053 Maximum Subarray</title>
    <link href="https://shineboy2013.github.com/2021/12/11/lee-053/"/>
    <id>https://shineboy2013.github.com/2021/12/11/lee-053/</id>
    <published>2021-12-11T10:26:30.420Z</published>
    <updated>2021-12-13T19:06:58.915Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/maximum-subarray" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given an integer array <code>nums</code>, find the contiguous subarray (containing at least one number) which has the largest sum and return <em>its sum</em>.<br><br>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> nums = [-2,1,-3,4,-1,2,1,-5,4]<br><strong>Output:</strong> 6<br><strong>Explanation:</strong> [4,-1,2,1] has the largest sum = 6.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> nums = [1]<br><strong>Output:</strong> 1<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> nums = [5,4,-1,7,8]<br><strong>Output:</strong> 23<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= nums.length &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></em>   <code>-10&lt;sup&gt;4&lt;/sup&gt; &lt;= nums[i] &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code><br><br><strong>Follow up:</strong> If you have figured out the <code>O(n)</code> solution, try coding another solution using the <strong>divide and conquer</strong> approach, which is more subtle.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>最大子数组和</p><h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a><strong>算法思路：</strong></h3><p>dp[i] = max(dp[i-1] + nums[i], nums[i])    </p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>引入全局最大的res，因为递归式是以末位为结尾的最大和   </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dp[i] = max(dp[i-1] + nums[i], nums[i])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">sum, res = -sys.maxsize, -sys.maxsize</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line"><span class="keyword">if</span> sum &gt; <span class="number">0</span>:</span><br><span class="line">sum += num</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">sum = num</span><br><span class="line">res = max(sum, res)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/maximum-subarray&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;Gi
      
    
    </summary>
    
    
      <category term="Dynamic Programming" scheme="https://shineboy2013.github.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 423 Reconstruct Original Digits from English</title>
    <link href="https://shineboy2013.github.com/2021/12/11/lee-423/"/>
    <id>https://shineboy2013.github.com/2021/12/11/lee-423/</id>
    <published>2021-12-11T09:59:45.757Z</published>
    <updated>2021-12-11T08:50:22.806Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/reconstruct-original-digits-from-english/" target="_blank" rel="noopener">LeetCode</a></strong></p><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>数字用英语单词表示如12 -&gt; onetwo, 但打乱顺序otwone. 求如何获得原数字</p><h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a><strong>算法思路：</strong></h3><p>统计每个字母的个数，根据个数来决定数字<br>规律见代码： 有些字母但唯一的，如two，w可以知道数字含2<br>但有些字母是多个数字的和如s，six和seven都含有s，减去用上述的six的个数就知道seven的个数   </p><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">originalDigits</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">char_to_num = &#123;</span><br><span class="line"><span class="string">'z'</span>: <span class="string">'0'</span>,</span><br><span class="line"><span class="string">'w'</span>: <span class="string">'2'</span>,</span><br><span class="line"><span class="string">'u'</span>: <span class="string">'4'</span>,</span><br><span class="line"><span class="string">'x'</span>: <span class="string">'6'</span>,</span><br><span class="line"><span class="string">'g'</span>: <span class="string">'8'</span>,</span><br><span class="line"><span class="string">'o'</span>: <span class="string">'1'</span>,  <span class="comment"># decided by previous keys</span></span><br><span class="line"><span class="string">'h'</span>: <span class="string">'3'</span>,  <span class="comment"># decided by previous keys</span></span><br><span class="line"><span class="string">'f'</span>: <span class="string">'5'</span>,  <span class="comment"># decided by previous keys</span></span><br><span class="line"><span class="string">'s'</span>: <span class="string">'7'</span>,  <span class="comment"># decided by previous keys</span></span><br><span class="line"><span class="string">'i'</span>: <span class="string">'9'</span>,  <span class="comment"># decided by previous keys</span></span><br><span class="line">&#125;</span><br><span class="line">res = []</span><br><span class="line">char_to_freq = collections.defaultdict(int)</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">char_to_freq[char] += <span class="number">1</span></span><br><span class="line">char_to_freq[<span class="string">'o'</span>] -= char_to_freq[<span class="string">'z'</span>] + char_to_freq[<span class="string">'w'</span>] + char_to_freq[<span class="string">'u'</span>]</span><br><span class="line">char_to_freq[<span class="string">'h'</span>] -= char_to_freq[<span class="string">'g'</span>]</span><br><span class="line">char_to_freq[<span class="string">'f'</span>] -= char_to_freq[<span class="string">'u'</span>]</span><br><span class="line">char_to_freq[<span class="string">'s'</span>] -= char_to_freq[<span class="string">'x'</span>]</span><br><span class="line">char_to_freq[<span class="string">'i'</span>] -= char_to_freq[<span class="string">'x'</span>] + char_to_freq[<span class="string">'g'</span>] + char_to_freq[<span class="string">'f'</span>]</span><br><span class="line"><span class="keyword">for</span> char, num <span class="keyword">in</span> char_to_num.items():</span><br><span class="line"><span class="keyword">if</span> char <span class="keyword">in</span> char_to_freq <span class="keyword">and</span> char_to_freq[char] &gt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(char_to_freq[char]):</span><br><span class="line">res.append(num)</span><br><span class="line">res.sort()</span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span>.join(res)</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(10n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/reconstruct-original-digits-from-english/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/st
      
    
    </summary>
    
    
      <category term="Math" scheme="https://shineboy2013.github.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 049 Group Anagrams</title>
    <link href="https://shineboy2013.github.com/2021/12/11/lee-049/"/>
    <id>https://shineboy2013.github.com/2021/12/11/lee-049/</id>
    <published>2021-12-11T09:54:33.324Z</published>
    <updated>2021-12-13T19:07:36.217Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/group-anagrams/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given an array of strings <code>strs</code>, group <strong>the anagrams</strong> together. You can return the answer in <strong>any order</strong>.<br><br>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> strs = [“eat”,”tea”,”tan”,”ate”,”nat”,”bat”]<br><strong>Output:</strong> [[“bat”],[“nat”,”tan”],[“ate”,”eat”,”tea”]]<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> strs = [“”]<br><strong>Output:</strong> [[“”]]<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> strs = [“a”]<br><strong>Output:</strong> [[“a”]]<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= strs.length &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></em>   <code>0 &lt;= strs[i].length &lt;= 100</code><br>*   <code>strs[i]</code> consists of lowercase English letters.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>对同字母不同序单词分组  </p><h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a><strong>算法思路：</strong></h3><p>N/A   </p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>list(id_to_words.values())要转成list     </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">groupAnagrams</span><span class="params">(self, strs: List[str])</span> -&gt; List[List[str]]:</span></span><br><span class="line">id_to_words = collections.defaultdict(list)</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> strs:</span><br><span class="line">id_to_words[self.get_id(word)].append(word)</span><br><span class="line"><span class="keyword">return</span> list(id_to_words.values())  <span class="comment"># remember to convert it to list</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_id</span><span class="params">(self, word)</span>:</span></span><br><span class="line">char_to_freq = collections.Counter(word)</span><br><span class="line">res = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> string.ascii_lowercase:</span><br><span class="line"><span class="keyword">if</span> c <span class="keyword">in</span> char_to_freq:</span><br><span class="line">res += c + str(char_to_freq[c])</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(nm)</code>，空间复杂度<code>O(n+m)</code>. n是单词个数，m是单词长度  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/group-anagrams/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;Giv
      
    
    </summary>
    
    
      <category term="String" scheme="https://shineboy2013.github.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 134 Gas Station</title>
    <link href="https://shineboy2013.github.com/2021/12/09/lee-134/"/>
    <id>https://shineboy2013.github.com/2021/12/09/lee-134/</id>
    <published>2021-12-09T08:29:30.438Z</published>
    <updated>2021-12-13T19:04:18.459Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/gas-station/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>There are <code>n</code> gas stations along a circular route, where the amount of gas at the <code>i&lt;sup&gt;th&lt;/sup&gt;</code> station is <code>gas[i]</code>.<br><br>You have a car with an unlimited gas tank and it costs <code>cost[i]</code> of gas to travel from the <code>i&lt;sup&gt;th&lt;/sup&gt;</code> station to its next <code>(i + 1)&lt;sup&gt;th&lt;/sup&gt;</code> station. You begin the journey with an empty tank at one of the gas stations.<br><br>Given two integer arrays <code>gas</code> and <code>cost</code>, return <em>the starting gas station’s index if you can travel around the circuit once in the clockwise direction, otherwise return</em> <code>-1</code>. If there exists a solution, it is <strong>guaranteed</strong> to be <strong>unique</strong><br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> gas = [1,2,3,4,5], cost = [3,4,5,1,2]<br><strong>Output:</strong> 3<br><strong>Explanation:</strong><br>Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4<br>Travel to station 4. Your tank = 4 - 1 + 5 = 8<br>Travel to station 0. Your tank = 8 - 2 + 1 = 7<br>Travel to station 1. Your tank = 7 - 3 + 2 = 6<br>Travel to station 2. Your tank = 6 - 4 + 3 = 5<br>Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.<br>Therefore, return 3 as the starting index.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> gas = [2,3,4], cost = [3,4,3]<br><strong>Output:</strong> -1<br><strong>Explanation:</strong><br>You can’t start at station 0 or 1, as there is not enough gas to travel to the next station.<br>Let’s start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4<br>Travel to station 0. Your tank = 4 - 3 + 2 = 3<br>Travel to station 1. Your tank = 3 - 3 + 3 = 3<br>You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.<br>Therefore, you can’t travel around the circuit once no matter where you start.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>gas.length == n</code></em>   <code>cost.length == n</code><br><em>   <code>1 &lt;= n &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></em>   <code>0 &lt;= gas[i], cost[i] &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>N/A</p><h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a><strong>算法思路：</strong></h3><p>只要总gas &gt;= 总cost，就总有一个点满足gas-cost为非负  </p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>先判断不合法的情况sum(gas) &lt; sum(cost)   </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">canCompleteCircuit</span><span class="params">(self, gas: List[int], cost: List[int])</span> -&gt; int:</span></span><br><span class="line"><span class="keyword">if</span> sum(gas) &lt; sum(cost):</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">sum_gas, sum_cost, pos = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(gas)):</span><br><span class="line">sum_gas += gas[i]</span><br><span class="line">sum_cost += cost[i]</span><br><span class="line"><span class="keyword">if</span> sum_gas &lt; sum_cost:</span><br><span class="line">pos = i + <span class="number">1</span></span><br><span class="line">sum_gas = <span class="number">0</span></span><br><span class="line">sum_cost = <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> pos</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/gas-station/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;There 
      
    
    </summary>
    
    
      <category term="Math" scheme="https://shineboy2013.github.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 224 Basic Calculator</title>
    <link href="https://shineboy2013.github.com/2021/12/08/lee-224/"/>
    <id>https://shineboy2013.github.com/2021/12/08/lee-224/</id>
    <published>2021-12-09T05:38:05.304Z</published>
    <updated>2021-12-13T19:11:04.464Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/basic-calculator/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given a string <code>s</code> representing a valid expression, implement a basic calculator to evaluate it, and return <em>the result of the evaluation</em>.<br><br><strong>Note:</strong> You are <strong>not</strong> allowed to use any built-in function which evaluates strings as mathematical expressions, such as <code>eval()</code>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> s = “1 + 1”<br><strong>Output:</strong> 2<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> s = “ 2-1 + 2 “<br><strong>Output:</strong> 3<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> s = “(1+(4+5+2)-3)+(6+8)”<br><strong>Output:</strong> 23<br></pre><br><br><strong>Constraints:</strong><br><br><em>   `1 &lt;= s.length &lt;= 3 </em> 10<sup>5</sup><code>*</code>s<code>consists of digits,</code>‘+’<code>,</code>‘-‘<code>,</code>‘(‘<code>,</code>‘)’<code>, and</code>‘ ‘<code>.*</code>s<code>represents a valid expression.*</code>‘+’<code>is **not** used as a unary operation (i.e.,</code>“+1”<code>and</code>“+(2 + 3)”<code>is invalid).*</code>‘-‘<code>could be used as a unary operation (i.e.,</code>“-1”<code>and</code>“-(2 + 3)”` is valid).<br><em>   There will be no two consecutive operators in the input.</em>   Every number and running calculation will fit in a signed 32-bit integer.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>实现字符串加减，但有括号。</p><h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a><strong>算法思路：</strong></h3><p>括号题优先考虑用Stack。这里Stack不能只存数，因为括号前可以是正负，所以将这个信息以+1或-1也压入栈（栈不能混合字符和数字）<br>所以用<strong>一个stack</strong>，num是一个数，res是括号内的累积结果。num在处理完每一个数都要重设，res和sign在处理完每个括号都要重设。    </p><p>代码中含五种情况：空格，运算符，数字，左右括号。左括号将res和sign入栈，右括号将res和sign出栈，计算结果存在res  </p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li><strong>括号前可以是正负，所以将这个信息以+1或-1也压入栈</strong>         </li><li>左括号无论前面是正负都要入栈  </li><li>num在处理完每一个数都要重设，res和sign在处理完每个括号都要重设    </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">stack, sign, num, res = [], <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">s += <span class="string">'+'</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line"><span class="keyword">if</span> char == <span class="string">' '</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> char <span class="keyword">in</span> <span class="string">'+-'</span>:</span><br><span class="line">res += sign * num</span><br><span class="line"><span class="keyword">if</span> char == <span class="string">'+'</span>:</span><br><span class="line">sign = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> char == <span class="string">'-'</span>:</span><br><span class="line">sign = <span class="number">-1</span></span><br><span class="line">num = <span class="number">0</span>  <span class="comment"># remember</span></span><br><span class="line"><span class="keyword">if</span> char.isdigit():</span><br><span class="line">num = num * <span class="number">10</span> + int(char)</span><br><span class="line"><span class="keyword">if</span> char == <span class="string">'('</span>:  <span class="comment"># dont limit to minus sign == '-' and</span></span><br><span class="line">stack.append(res)</span><br><span class="line">stack.append(sign)</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line">sign = <span class="number">1</span>  <span class="comment"># reset everything</span></span><br><span class="line"><span class="keyword">if</span> char == <span class="string">')'</span> <span class="keyword">and</span> stack:</span><br><span class="line">res += sign * num</span><br><span class="line">sign = stack.pop()</span><br><span class="line">operand = stack.pop()</span><br><span class="line">res = operand + sign * res</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/basic-calculator/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;G
      
    
    </summary>
    
    
      <category term="Stack" scheme="https://shineboy2013.github.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 032 Longest Valid Parentheses</title>
    <link href="https://shineboy2013.github.com/2021/12/08/lee-032/"/>
    <id>https://shineboy2013.github.com/2021/12/08/lee-032/</id>
    <published>2021-12-08T10:44:45.264Z</published>
    <updated>2021-12-13T19:12:50.631Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/longest-valid-parentheses/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given a string containing just the characters <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>, find the length of the longest valid (well-formed) parentheses substring.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> s = “(()”<br><strong>Output:</strong> 2<br><strong>Explanation:</strong> The longest valid parentheses substring is “()”.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> s = “)()())”<br><strong>Output:</strong> 4<br><strong>Explanation:</strong> The longest valid parentheses substring is “()()”.<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> s = “”<br><strong>Output:</strong> 0<br></pre><br><br><strong>Constraints:</strong><br><br><em>   `0 &lt;= s.length &lt;= 3 </em> 10<sup>4</sup><code>*</code>s[i]<code>is</code>‘(‘<code>, or</code>‘)’`.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>最长括号对数。</p><h3 id="Stack算法思路-推荐-："><a href="#Stack算法思路-推荐-：" class="headerlink" title="Stack算法思路(推荐)："></a><strong>Stack算法思路(推荐)：</strong></h3><p>括号题优先考虑用Stack。由于只有单种括号，只需考虑两种不合法情况。<br>三种不合法情况： ‘[‘ (stack有余), ‘]’ (要匹配的时候stack为空)<br>难点： 1. <strong>用下标存于stack</strong>，方便计算长度。不合法的保留栈中，这样不合法之间的距离-1就是合法的长度 </p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>Stack存了左右括号，不只存左括号，所以Line 7要验证栈顶为左括号  </li><li>循环后头尾加-1和s长度，方便头尾计算    </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestValidParentheses</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">stack = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line"><span class="keyword">if</span> s[i] == <span class="string">'('</span>:</span><br><span class="line">stack.append(i)</span><br><span class="line"><span class="keyword">if</span> s[i] == <span class="string">')'</span>:</span><br><span class="line"><span class="keyword">if</span> stack <span class="keyword">and</span> s[stack[<span class="number">-1</span>]] == <span class="string">'('</span>:  <span class="comment"># remember</span></span><br><span class="line">stack.pop()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">stack.append(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ())(()) # ())</span></span><br><span class="line">stack.insert(<span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line">stack.append(len(s))</span><br><span class="line">max_len = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> len(stack) &gt; <span class="number">1</span>:</span><br><span class="line">index = stack.pop()</span><br><span class="line">max_len = max(max_len, index - stack[<span class="number">-1</span>] - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> max_len</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p><hr><h3 id="DP算法II解题思路："><a href="#DP算法II解题思路：" class="headerlink" title="DP算法II解题思路："></a><strong>DP算法II解题思路：</strong></h3><h3 id="注意事项：-1"><a href="#注意事项：-1" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>答案用max_len    </li><li>条件s[i - 1 - dp[i - 1] - 1]和递归式dp[i - dp[i - 1] - 2]不能越界      </li><li>递归式要加dp[i - dp[i - 1] - 2]，dp[..]”(“dp..[]”)” 就是第一个递归式，容易忽略     </li></ol><h3 id="Python代码：-1"><a href="#Python代码：-1" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dp[i] = max -&gt; dp[i-2] + 2 if s[i-2:i] == ()</span></span><br><span class="line"><span class="comment">#             -&gt; dp[i-1] + 2 + dp[i-1-dp[i-1]-2] if s[i-1-dp[i-1]-1]== ( and s[i-1] == )</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestValidParentheses2</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">dp = [<span class="number">0</span>] * (len(s) + <span class="number">1</span>)</span><br><span class="line">max_len = <span class="number">0</span>  <span class="comment"># remember</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, len(dp)):</span><br><span class="line">dp[i] = max(dp[i], dp[i - <span class="number">2</span>] + <span class="number">2</span> <span class="keyword">if</span> s[i - <span class="number">2</span>:i] == <span class="string">'()'</span> <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line">prev_dp = <span class="number">0</span>  <span class="comment"># remember</span></span><br><span class="line"><span class="keyword">if</span> i - dp[i - <span class="number">1</span>] - <span class="number">2</span> &gt;= <span class="number">0</span>:</span><br><span class="line">prev_dp = dp[i - dp[i - <span class="number">1</span>] - <span class="number">2</span>]</span><br><span class="line"><span class="comment"># remember i - 1 - dp[i - 1] - 1 &gt;= 0</span></span><br><span class="line">dp[i] = max(dp[i], dp[i - <span class="number">1</span>] + <span class="number">2</span> + prev_dp <span class="keyword">if</span> i - <span class="number">1</span> - dp[i - <span class="number">1</span>] - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> s[i - <span class="number">1</span> - dp[i - <span class="number">1</span>] - <span class="number">1</span>] == <span class="string">'('</span> <span class="keyword">and</span> s[i - <span class="number">1</span>] == <span class="string">')'</span> <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line">max_len = max(max_len, dp[i])</span><br><span class="line"><span class="keyword">return</span> max_len</span><br></pre></td></tr></table></figure><h3 id="算法分析：-1"><a href="#算法分析：-1" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p><hr><h3 id="统计算法III解题思路："><a href="#统计算法III解题思路：" class="headerlink" title="统计算法III解题思路："></a><strong>统计算法III解题思路：</strong></h3><p>括号题另一个常用思路是用统计左右括号数。维护四个变量left, right, res, max_len<br>当左括号小于右括号数（第一个规律）：重设全部变量<br>当左括号等于右括号数（第二个规律）：满足两个条件，可以计算res。重设left，right，准备计算下一轮res。不重设res，因为可以连续如()()  </p><h3 id="注意事项：-2"><a href="#注意事项：-2" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>上述情况只覆盖了()),不能覆盖((), 因为左括号数在每一位永远都不会等于右括号数。所以旋转180度再做一次。    </li></ol><h3 id="Python代码：-2"><a href="#Python代码：-2" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestValidParentheses3</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">max_len = self.get_max_len(s)</span><br><span class="line">res = []</span><br><span class="line">PARENTHESES_DICT = &#123;<span class="string">'('</span>: <span class="string">')'</span>, <span class="string">')'</span>: <span class="string">'('</span>&#125;</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">res.append(PARENTHESES_DICT[char])</span><br><span class="line">max_len = max(max_len, self.get_max_len(res[::<span class="number">-1</span>]))</span><br><span class="line"><span class="keyword">return</span> max_len</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_max_len</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">max_len = res = left = right = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line"><span class="keyword">if</span> char == <span class="string">'('</span>:</span><br><span class="line">left += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> char == <span class="string">')'</span>:</span><br><span class="line">right += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> left &lt; right:</span><br><span class="line">left = <span class="number">0</span></span><br><span class="line">right = <span class="number">0</span></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> left == right:  <span class="comment"># (())), ()()</span></span><br><span class="line">res += left * <span class="number">2</span></span><br><span class="line">max_len = max(max_len, res)</span><br><span class="line">left = <span class="number">0</span></span><br><span class="line">right = <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> max_len</span><br></pre></td></tr></table></figure><h3 id="算法分析：-2"><a href="#算法分析：-2" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-valid-parentheses/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;
      
    
    </summary>
    
    
      <category term="Stack" scheme="https://shineboy2013.github.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 678 Valid Parenthesis String</title>
    <link href="https://shineboy2013.github.com/2021/12/08/lee-678/"/>
    <id>https://shineboy2013.github.com/2021/12/08/lee-678/</id>
    <published>2021-12-08T08:51:34.872Z</published>
    <updated>2021-12-13T19:12:18.400Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/valid-parenthesis-string/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given a string <code>s</code> containing only three types of characters: <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code> and <code>&#39;*&#39;</code>, return <code>true</code> <em>if</em> <code>s</code> <em>is <strong>valid</strong></em>.<br><br>The following rules define a <strong>valid</strong> string:<br><br><em>   Any left parenthesis <code>&#39;(&#39;</code> must have a corresponding right parenthesis <code>&#39;)&#39;</code>.</em>   Any right parenthesis <code>&#39;)&#39;</code> must have a corresponding left parenthesis <code>&#39;(&#39;</code>.<br><em>   Left parenthesis <code>&#39;(&#39;</code> must go before the corresponding right parenthesis <code>&#39;)&#39;</code>.</em>   <code>&#39;*&#39;</code> could be treated as a single right parenthesis <code>&#39;)&#39;</code> or a single left parenthesis <code>&#39;(&#39;</code> or an empty string <code>&quot;&quot;</code>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> s = “()”<br><strong>Output:</strong> true<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> s = “(<em>)”<br><strong>Output:</strong> true<br></em></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> s = “())”<br><strong>Output:</strong> true<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= s.length &lt;= 100</code></em>   <code>s[i]</code> is <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code> or <code>&#39;*&#39;</code>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求给定字符串带星号是否合法括号配对。</p><h3 id="Stack算法思路-推荐-："><a href="#Stack算法思路-推荐-：" class="headerlink" title="Stack算法思路(推荐)："></a><strong>Stack算法思路(推荐)：</strong></h3><p>括号题优先考虑用Stack。如果不带星号，回忆合法括号题，有三种不合法情况，此题只需考虑两种，不需考虑多种括号类型<br>三种不合法情况： ‘[‘ (stack有余), ‘]’ (要匹配的时候stack为空)<br>难点： </p><ol><li>在于要去想<strong>多一个栈来存星号</strong>，因为星号可以作为左括号备选去match右括号。右括号在两个栈中优先配对左括号，星号可以为空。如果两个栈均为空，处理了第一种不合法情况  </li><li>循环后，如果两栈有余，分4中情况讨论：<br>1) 左括号栈有余星号栈空，正是第二种不合法情况<br>2) 左括号栈空星号栈空，合法<br>3) 左括号栈空星号栈有余，合法，星号可为空<br>4) 都有余，这是难点二。星号可以作为右括号去配对左括号，前提条件是<strong>星号在左括号之后</strong>，考虑*(，这是不合法 </li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>如果for循环出来后，两栈不为空，要比较先后顺序  </li><li>for loop后，L18 - Line 19记得pop，否则死循环  </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkValidString</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">stack_left, stack_star = [], []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line"><span class="keyword">if</span> s[i] == <span class="string">'('</span>:</span><br><span class="line">stack_left.append(i)</span><br><span class="line"><span class="keyword">if</span> s[i] == <span class="string">'*'</span>:</span><br><span class="line">stack_star.append(i)</span><br><span class="line"><span class="keyword">if</span> s[i] == <span class="string">')'</span>:</span><br><span class="line"><span class="keyword">if</span> stack_left:  <span class="comment"># match ( first rather than * because * can be empty</span></span><br><span class="line">stack_left.pop()</span><br><span class="line"><span class="keyword">elif</span> stack_star:</span><br><span class="line">stack_star.pop()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">while</span> stack_left <span class="keyword">and</span> stack_star:  <span class="comment"># use * to match (</span></span><br><span class="line"><span class="keyword">if</span> stack_left[<span class="number">-1</span>] &gt; stack_star[<span class="number">-1</span>]:  <span class="comment"># consider *(</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">stack_left.pop()</span><br><span class="line">stack_star.pop()</span><br><span class="line"><span class="keyword">return</span> len(stack_left) == <span class="number">0</span>  <span class="comment"># stack_star can be non empty</span></span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p><hr><h3 id="统计算法II解题思路："><a href="#统计算法II解题思路：" class="headerlink" title="统计算法II解题思路："></a><strong>统计算法II解题思路：</strong></h3><p>括号题另一个常用思路是用统计左右括号数。此题较难想到是用一个<strong>左括号数量范围</strong>去验证。<br>lo为左括号的最少合法个数，hi为左括号的最大合法个数，有范围是因为星号可以变成左右括号或空。<br>遇到左括号，都加1，遇到右括号，都减1，遇到星号，假设星号为右括号，所以lo减1，hi加1.<br>如果hi小于0，表示最大左括号数小于右括号数，不满足此法的规则一，不合法  </p><p>难点在于<strong>lo设为非负</strong>。因为lo是最少且合法，合法意思是lo不是单纯地将所有星号变成右括号，而是当左括号不足时，用提高下限，将星号变成空，体现在令lo为非负。<br>for循环后，lo必须为0，运用了法则二，左右括号相等。  </p><h3 id="Python代码：-1"><a href="#Python代码：-1" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkValidString</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">lo = hi = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line"><span class="keyword">if</span> char == <span class="string">'('</span>:</span><br><span class="line">lo += <span class="number">1</span></span><br><span class="line">hi += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> char == <span class="string">'*'</span>:</span><br><span class="line"><span class="keyword">if</span> lo &gt; <span class="number">0</span>:  <span class="comment"># treat * as empty space</span></span><br><span class="line">lo -= <span class="number">1</span></span><br><span class="line">hi += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> char == <span class="string">')'</span>:</span><br><span class="line"><span class="keyword">if</span> lo &gt; <span class="number">0</span>:  <span class="comment"># treat the previous * as empty space</span></span><br><span class="line">lo -= <span class="number">1</span></span><br><span class="line">hi -= <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> hi &lt; <span class="number">0</span>:  <span class="comment"># the num of right parenthesis &gt; left ones</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">return</span> lo == <span class="number">0</span>  <span class="comment"># the num of right parenthesis should equal to left ones</span></span><br></pre></td></tr></table></figure><h3 id="算法分析：-1"><a href="#算法分析：-1" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p><hr><h3 id="DP算法III解题思路："><a href="#DP算法III解题思路：" class="headerlink" title="DP算法III解题思路："></a><strong>DP算法III解题思路：</strong></h3><p>基本情况为s[i], s[j] 分别在(*, )* 就合法<br>如果用单边DP，并不能确定区间内那些合法，所以只能用区间型DP<br>dp[i][j] = s[i-1] == ‘*‘ and dp[i+1][j] 星号不匹配<br>         = s[i-1] in ‘(*‘ and dp[i+1][k-1] and s[k-1] in (‘)*‘) and dp[k+1][j] 星号匹配  </p><p>具体参考leetcode答案<br>DP基本情况比较难想出来且递归是复杂，实现易错，不推荐。不过可以多了解区间型DP的模式  </p><h3 id="算法分析：-2"><a href="#算法分析：-2" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n^3)</code>，空间复杂度<code>O(n^2)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/valid-parenthesis-string/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;
      
    
    </summary>
    
    
      <category term="Stack" scheme="https://shineboy2013.github.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>括号题或者字符串运算题</title>
    <link href="https://shineboy2013.github.com/2021/12/07/parenthesis/"/>
    <id>https://shineboy2013.github.com/2021/12/07/parenthesis/</id>
    <published>2021-12-08T00:46:52.871Z</published>
    <updated>2021-12-09T00:03:16.266Z</updated>
    
    <content type="html"><![CDATA[<h2 id="括号题"><a href="#括号题" class="headerlink" title="括号题"></a>括号题</h2><h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a><strong>算法思路：</strong></h3><ol><li><strong>优先考虑用Stack</strong>。Stack可以将字符压入比较或者<strong>字符的下标</strong>压入比较，<em>后者信息量更大</em><br>三种情况不合法： ‘[‘ (stack有余，for后发生), ‘]’ (要匹配的时候stack为空，for中发生), ‘{]’ (不匹配，for中发生)  </li><li>DP  </li><li>1) 左括号的数量在每一位都大于等于右括号数量<br>2) 右括号的总和要等于右括号总和<br>以上两个条件都满足的话，左右括号匹配，但此法只能用于<strong>单种括号</strong>  </li></ol><h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a><strong>应用：</strong></h3><ol><li>括号题</li><li>字符串运算题如, 3+4, (3+4)*5</li></ol><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;括号题&quot;&gt;&lt;a href=&quot;#括号题&quot; class=&quot;headerlink&quot; title=&quot;括号题&quot;&gt;&lt;/a&gt;括号题&lt;/h2&gt;&lt;h3 id=&quot;算法思路：&quot;&gt;&lt;a href=&quot;#算法思路：&quot; class=&quot;headerlink&quot; title=&quot;算法思路：&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="Knowledge Base" scheme="https://shineboy2013.github.com/tags/Knowledge-Base/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1249 Minimum Remove to Make Valid Parentheses</title>
    <link href="https://shineboy2013.github.com/2021/12/07/lee-1249/"/>
    <id>https://shineboy2013.github.com/2021/12/07/lee-1249/</id>
    <published>2021-12-07T08:14:35.194Z</published>
    <updated>2021-12-13T19:14:06.087Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given a string <font face="monospace">s</font> of <code>&#39;(&#39;</code> , <code>&#39;)&#39;</code> and lowercase English characters.<br><br>Your task is to remove the minimum number of parentheses ( <code>&#39;(&#39;</code> or <code>&#39;)&#39;</code>, in any positions ) so that the resulting <em>parentheses string</em> is valid and return <strong>any</strong> valid string.<br><br>Formally, a <em>parentheses string</em> is valid if and only if:<br><br><em>   It is the empty string, contains only lowercase characters, or</em>   It can be written as <code>AB</code> (<code>A</code> concatenated with <code>B</code>), where <code>A</code> and <code>B</code> are valid strings, or<br><em>   It can be written as <code>(A)</code>, where <code>A</code> is a valid string.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> s = “lee(t(c)o)de)”<br><strong>Output:</strong> “lee(t(c)o)de”<br><strong>Explanation:</strong> “lee(t(co)de)” , “lee(t(c)ode)” would also be accepted.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> s = “a)b(c)d”<br><strong>Output:</strong> “ab(c)d”<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> s = “))((“<br><strong>Output:</strong> “”<br><strong>Explanation:</strong> An empty string is also valid.<br></pre><br><br><strong>Example 4:</strong><br><br><pre><strong>Input:</strong> s = “(a(b(c)d)”<br><strong>Output:</strong> “a(b(c)d)”<br></pre><br><br><strong>Constraints:</strong></em>   <code>1 &lt;= s.length &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code><br>*   <code>s[i]</code> is either<code>&#39;(&#39;</code> , <code>&#39;)&#39;</code>, or lowercase English letter<code>.</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>去掉最小不合法括号数剩下的字符串。</p><h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a><strong>算法思路：</strong></h3><p>括号题优先考虑用Stack。此题将下标存于stack中，stack留下的是不合法括号下标，也就是需要删除的  </p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>当括号配对时才出栈 Line 6  </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minRemoveToMakeValid</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">stack, res = [], <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line"><span class="keyword">if</span> s[i] == <span class="string">'('</span>:</span><br><span class="line">stack.append(i)</span><br><span class="line"><span class="keyword">elif</span> stack <span class="keyword">and</span> s[stack[<span class="number">-1</span>]] == <span class="string">'('</span> <span class="keyword">and</span> s[i] == <span class="string">')'</span>:  <span class="comment"># remember</span></span><br><span class="line">stack.pop()</span><br><span class="line"><span class="keyword">elif</span> s[i] == <span class="string">')'</span>:</span><br><span class="line">stack.append(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line"><span class="keyword">if</span> i <span class="keyword">in</span> set(stack):</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">res += s[i]</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/str
      
    
    </summary>
    
    
      <category term="Stack" scheme="https://shineboy2013.github.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 020 Valid Parentheses</title>
    <link href="https://shineboy2013.github.com/2021/12/06/lee-020/"/>
    <id>https://shineboy2013.github.com/2021/12/06/lee-020/</id>
    <published>2021-12-07T07:25:31.154Z</published>
    <updated>2021-12-13T19:13:25.015Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/valid-parentheses/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given a string <code>s</code> containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.<br><br>An input string is valid if:<br><br>1.  Open brackets must be closed by the same type of brackets.<br>2.  Open brackets must be closed in the correct order.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> s = “()”<br><strong>Output:</strong> true<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> s = “()[]{}”<br><strong>Output:</strong> true<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> s = “(]”<br><strong>Output:</strong> false<br></pre><br><br><strong>Example 4:</strong><br><br><pre><strong>Input:</strong> s = “([)]”<br><strong>Output:</strong> false<br></pre><br><br><strong>Example 5:</strong><br><br><pre><strong>Input:</strong> s = “{[]}”<br><strong>Output:</strong> true<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= s.length &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></em>   <code>s</code> consists of parentheses only <code>&#39;()[]{}&#39;</code>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求给定字符串是否合法括号配对。</p><h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a><strong>算法思路：</strong></h3><p>括号题优先考虑用Stack  </p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>三种不合法情况： ‘[‘ (stack有余), ‘]’ (要匹配的时候stack为空), ‘{]’ (不匹配)    </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PARENTHESES_DICT = &#123;<span class="string">'('</span>: <span class="string">')'</span>, <span class="string">'['</span>: <span class="string">']'</span>, <span class="string">'&#123;'</span>: <span class="string">'&#125;'</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">in</span> <span class="string">'([&#123;'</span>:</span><br><span class="line">                stack.append(char)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">                left = stack.pop()</span><br><span class="line">                <span class="keyword">if</span> PARENTHESES_DICT[left] != char:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span> <span class="keyword">if</span> <span class="keyword">not</span> stack <span class="keyword">else</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/valid-parentheses/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;
      
    
    </summary>
    
    
      <category term="Stack" scheme="https://shineboy2013.github.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 322 Coin Change</title>
    <link href="https://shineboy2013.github.com/2021/12/06/lee-322/"/>
    <id>https://shineboy2013.github.com/2021/12/06/lee-322/</id>
    <published>2021-12-07T02:58:45.149Z</published>
    <updated>2021-12-13T19:15:47.473Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/coin-change/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.<br><br>Return <em>the fewest number of coins that you need to make up that amount</em>. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.<br><br>You may assume that you have an infinite number of each kind of coin.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> coins = [1,2,5], amount = 11<br><strong>Output:</strong> 3<br><strong>Explanation:</strong> 11 = 5 + 5 + 1<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> coins = [2], amount = 3<br><strong>Output:</strong> -1<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> coins = [1], amount = 0<br><strong>Output:</strong> 0<br></pre><br><br><strong>Example 4:</strong><br><br><pre><strong>Input:</strong> coins = [1], amount = 1<br><strong>Output:</strong> 1<br></pre><br><br><strong>Example 5:</strong><br><br><pre><strong>Input:</strong> coins = [1], amount = 2<br><strong>Output:</strong> 2<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= coins.length &lt;= 12</code></em>   <code>1 &lt;= coins[i] &lt;= 2&lt;sup&gt;31&lt;/sup&gt; - 1</code><br>*   <code>0 &lt;= amount &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>N/A</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>amount为0时候，返回0，表示不用coin也能满足，属于合法情况, dp[0] = 0  </li><li>返回值，若dp[-1]为初始值，表示无解，返回-1  </li><li>dp数组引用的边界情况： 代码调转i和j的遍历顺序，可以避免边界检查，且i=[j, len(dp)]，i包含j，表示dp[0], 包含了初始化dp[for coin in coins] = 1的情况  </li><li>实现中dp[i] = min(dp[i], dp[i - j] + 1), +1在min内而不是min外。  </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coinChange</span><span class="params">(self, coins: List[int], amount: int)</span> -&gt; int:</span></span><br><span class="line">dp = [sys.maxsize] * (amount + <span class="number">1</span>)</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> coins:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(j, len(dp)):  <span class="comment"># i = [1..3]</span></span><br><span class="line">dp[i] = min(dp[i], dp[i - j] + <span class="number">1</span>)  <span class="comment"># remember</span></span><br><span class="line"><span class="keyword">return</span> dp[<span class="number">-1</span>] <span class="keyword">if</span> dp[<span class="number">-1</span>] &lt; sys.maxsize <span class="keyword">else</span> <span class="number">-1</span>  <span class="comment"># remember</span></span><br></pre></td></tr></table></figure><p>我的实现，要注意dp[i]边界检查, Line 7 - 8, 12<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dp[n] = min(dp[n-coins[j]]) + 1, 0 &lt;= j &lt;= len(coins)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coinChange</span><span class="params">(self, coins: List[int], amount: int)</span> -&gt; int:</span></span><br><span class="line"><span class="keyword">if</span> amount == <span class="number">0</span>:  <span class="comment"># remember</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">dp = [sys.maxsize] * (amount + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> coins:</span><br><span class="line"><span class="keyword">if</span> i &lt; len(dp):  <span class="comment"># remember</span></span><br><span class="line">dp[i] = <span class="number">1</span></span><br><span class="line"><span class="comment"># [3], amount = 3, dp[3] = 1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(dp)):  <span class="comment"># i = [1..3]</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> coins:</span><br><span class="line"><span class="keyword">if</span> i &gt; j:  <span class="comment"># remember</span></span><br><span class="line">dp[i] = min(dp[i], dp[i - j] + <span class="number">1</span>)  <span class="comment"># remember</span></span><br><span class="line"><span class="keyword">return</span> dp[<span class="number">-1</span>] <span class="keyword">if</span> dp[<span class="number">-1</span>] &lt; sys.maxsize <span class="keyword">else</span> <span class="number">-1</span>  <span class="comment"># remember</span></span><br></pre></td></tr></table></figure></p><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/coin-change/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;You ar
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Python KB" scheme="https://shineboy2013.github.com/tags/Python-KB/"/>
    
      <category term="Dynamic Programming" scheme="https://shineboy2013.github.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
</feed>
