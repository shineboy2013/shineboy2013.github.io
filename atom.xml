<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KK&#39;s blog</title>
  
  <subtitle>每天积累多一些</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shineboy2013.github.com/"/>
  <updated>2022-11-06T23:33:37.196Z</updated>
  <id>https://shineboy2013.github.com/</id>
  
  <author>
    <name>KK Shum</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 1706 Where Will the Ball Fall</title>
    <link href="https://shineboy2013.github.com/2022/11/06/leetcode-1706-where-will-the-ball-fall/"/>
    <id>https://shineboy2013.github.com/2022/11/06/leetcode-1706-where-will-the-ball-fall/</id>
    <published>2022-11-06T22:16:04.756Z</published>
    <updated>2022-11-06T23:33:37.196Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/where-will-the-ball-fall/" target="_blank" rel="noopener">LeetCode</a></strong></p><div class="_1l1MA"><br><br>You have a 2-D <code>grid</code> of size <code>m x n</code> representing a box, and you have <code>n</code> balls. The box is open on the top and bottom sides.<br><br>Each cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.<br><br><em>   A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as <code>1</code>.</em>   A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as <code>-1</code>.<br><br>We drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a “V” shaped pattern between two boards or if a board redirects the ball into either wall of the box.<br><br>Return <em>an array</em> <code>answer</code> <em>of size</em> <code>n</code> <em>where</em> <code>answer[i]</code> <em>is the column that the ball falls out of at the bottom after dropping the ball from the</em> <code>i&lt;sup&gt;th&lt;/sup&gt;</code> _column at the top, or <code>-1</code> <em>if the ball gets stuck in the box</em>._<br><br><strong>Example 1:</strong><br><br><strong><img src="https://assets.leetcode.com/uploads/2019/09/26/ball.jpg" alt=""></strong><br><br><pre><strong>Input:</strong> grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]<br><strong>Output:</strong> [1,-1,-1,-1,-1]<br><strong>Explanation:</strong> This example is shown in the photo.<br>Ball b0 is dropped at column 0 and falls out of the box at column 1.<br>Ball b1 is dropped at column 1 and will get stuck in the box between column 2 and 3 and row 1.<br>Ball b2 is dropped at column 2 and will get stuck on the box between column 2 and 3 and row 0.<br>Ball b3 is dropped at column 3 and will get stuck on the box between column 2 and 3 and row 0.<br>Ball b4 is dropped at column 4 and will get stuck on the box between column 2 and 3 and row 1.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> grid = [[-1]]<br><strong>Output:</strong> [-1]<br><strong>Explanation:</strong> The ball gets stuck against the left wall.<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]<br><strong>Output:</strong> [0,1,2,3,4,-1]<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>m == grid.length</code></em>   <code>n == grid[i].length</code><br><em>   <code>1 &lt;= m, n &lt;= 100</code></em>   <code>grid[i][j]</code> is <code>1</code> or <code>-1</code>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>二维数组每一个cell都是1或者-1，分别表示一个玻璃板的放置方向，正对角线或者反对角线。球从每一个列投下，根据玻璃板的设置，若成功从底部滑出，输入列号，否则输入-1. 求这个结果数组。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>这是Q&amp;A题目。游戏模拟题大多用DFS，因为就是选择一条路径走到底。</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>任何情况都是row + 1，而不是-1</li><li>题目要求若成功，输出球跌出的列号，而不是boolean = 1</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findBall</span><span class="params">(self, grid: List[List[int]])</span> -&gt; List[int]:</span></span><br><span class="line"><span class="keyword">return</span> [self.dfs(grid, <span class="number">0</span>, j) <span class="keyword">for</span> j <span class="keyword">in</span> range(len(grid[<span class="number">0</span>]))]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, grid, row, col)</span>:</span></span><br><span class="line"><span class="keyword">if</span> row == len(grid):</span><br><span class="line"><span class="keyword">return</span> col</span><br><span class="line"><span class="keyword">if</span> grid[row][col] == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">if</span> col + <span class="number">1</span> == len(grid[<span class="number">0</span>]) <span class="keyword">or</span> grid[row][col + <span class="number">1</span>] == <span class="number">-1</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> self.dfs(grid, row + <span class="number">1</span>, col + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> col - <span class="number">1</span> &lt; <span class="number">0</span> <span class="keyword">or</span> grid[row][col - <span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> self.dfs(grid, row + <span class="number">1</span>, col - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(nm)</code>，空间复杂度<code>O(1)</code>, n, m分别为行数和列数。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/where-will-the-ball-fall/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div c
      
    
    </summary>
    
    
      <category term="Depth-first Search" scheme="https://shineboy2013.github.com/tags/Depth-first-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1337 The K Weakest Rows in a Matrix</title>
    <link href="https://shineboy2013.github.com/2022/11/06/leetcode-1337-the-k-weakest-rows-in-a-matrix/"/>
    <id>https://shineboy2013.github.com/2022/11/06/leetcode-1337-the-k-weakest-rows-in-a-matrix/</id>
    <published>2022-11-06T21:14:59.318Z</published>
    <updated>2022-11-06T21:22:17.162Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/" target="_blank" rel="noopener">LeetCode</a></strong></p><div class="_1l1MA"><br><br>You are given an <code>m x n</code> binary matrix <code>mat</code> of <code>1</code>‘s (representing soldiers) and <code>0</code>‘s (representing civilians). The soldiers are positioned <strong>in front</strong> of the civilians. That is, all the <code>1</code>‘s will appear to the <strong>left</strong> of all the <code>0</code>‘s in each row.<br><br>A row <code>i</code> is <strong>weaker</strong> than a row <code>j</code> if one of the following is true:<br><br><em>   The number of soldiers in row <code>i</code> is less than the number of soldiers in row <code>j</code>.</em>   Both rows have the same number of soldiers and <code>i &lt; j</code>.<br><br>Return <em>the indices of the</em> <code>k</code> <em><strong>weakest</strong> rows in the matrix ordered from weakest to strongest</em>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> mat =<br>[[1,1,0,0,0],<br> [1,1,1,1,0],<br> [1,0,0,0,0],<br> [1,1,0,0,0],<br> [1,1,1,1,1]],<br>k = 3<br><strong>Output:</strong> [2,0,3]<br><strong>Explanation:</strong><br>The number of soldiers in each row is:<br>- Row 0: 2<br>- Row 1: 4<br>- Row 2: 1<br>- Row 3: 2<br>- Row 4: 5<br>The rows ordered from weakest to strongest are [2,0,3,1,4].<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> mat =<br>[[1,0,0,0],<br> [1,1,1,1],<br> [1,0,0,0],<br> [1,0,0,0]],<br>k = 2<br><strong>Output:</strong> [0,2]<br><strong>Explanation:</strong><br>The number of soldiers in each row is:<br>- Row 0: 1<br>- Row 1: 4<br>- Row 2: 1<br>- Row 3: 1<br>The rows ordered from weakest to strongest are [0,2,3,1].<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>m == mat.length</code></em>   <code>n == mat[i].length</code><br><em>   <code>2 &lt;= n, m &lt;= 100</code></em>   <code>1 &lt;= k &lt;= m</code><br>*   <code>matrix[i][j]</code> is either 0 or 1.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>二维数组含0和1，1表示士兵，0表示平民。每一行定义弱度，若士兵个数少且行号靠前，较弱。求前k个较弱的行号。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>Easy题。Q&amp;A的题目，关于前k个最值，第一时间想到用heap。求最小值，所以用最大堆</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>求最大堆，引入负值。此题属于二维堆，第二个维度跟第一个维度一样，从小到大，所以也采用负号。</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kWeakestRows</span><span class="params">(self, mat: List[List[int]], k: int)</span> -&gt; List[int]:</span></span><br><span class="line">nums_soldiers = [(sum(mat[i]), i) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(mat))]</span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums_soldiers)):</span><br><span class="line"><span class="keyword">if</span> i &lt; k:</span><br><span class="line">heappush(res, (-nums_soldiers[i][<span class="number">0</span>], -nums_soldiers[i][<span class="number">1</span>]))</span><br><span class="line"><span class="comment"># put into the heap if weaker</span></span><br><span class="line"><span class="keyword">elif</span> -nums_soldiers[i][<span class="number">0</span>] &gt; res[<span class="number">0</span>][<span class="number">0</span>] <span class="keyword">or</span> \</span><br><span class="line">(nums_soldiers[i][<span class="number">0</span>] == res[<span class="number">0</span>][<span class="number">0</span>] <span class="keyword">and</span> -nums_soldiers[i][<span class="number">1</span>] &gt; res[<span class="number">0</span>][<span class="number">1</span>]):</span><br><span class="line">heapreplace(res, (-nums_soldiers[i][<span class="number">0</span>], -nums_soldiers[i][<span class="number">1</span>]))</span><br><span class="line">res.sort(key=<span class="keyword">lambda</span> x: (-x[<span class="number">0</span>], -x[<span class="number">1</span>]))</span><br><span class="line"><span class="keyword">return</span> [-res[i][<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(res))]</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(nlogk)</code>，空间复杂度<code>O(n)</code>, n为行数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Heap" scheme="https://shineboy2013.github.com/tags/Heap/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 2089 Find Target Indices After Sorting Array</title>
    <link href="https://shineboy2013.github.com/2022/10/02/leetcode-2089-find-target-indices-after-sorting-array/"/>
    <id>https://shineboy2013.github.com/2022/10/02/leetcode-2089-find-target-indices-after-sorting-array/</id>
    <published>2022-10-02T23:07:17.477Z</published>
    <updated>2022-10-02T23:21:51.330Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/find-target-indices-after-sorting-array/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>You are given a <strong>0-indexed</strong> integer array <code>nums</code> and a target element <code>target</code>.<br><br>A <strong>target index</strong> is an index <code>i</code> such that <code>nums[i] == target</code>.<br><br>Return <em>a list of the target indices of</em> <code>nums</code> after <em>sorting</em> <code>nums</code> <em>in <strong>non-decreasing</strong> order</em>. If there are no target indices, return <em>an <strong>empty</strong> list</em>. The returned list must be sorted in <strong>increasing</strong> order.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> nums = [1,2,5,2,3], target = 2<br><strong>Output:</strong> [1,2]<br><strong>Explanation:</strong> After sorting, nums is [1,<u><strong>2</strong></u>,<u><strong>2</strong></u>,3,5].<br>The indices where nums[i] == 2 are 1 and 2.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> nums = [1,2,5,2,3], target = 3<br><strong>Output:</strong> [3]<br><strong>Explanation:</strong> After sorting, nums is [1,2,2,<u><strong>3</strong></u>,5].<br>The index where nums[i] == 3 is 3.<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> nums = [1,2,5,2,3], target = 5<br><strong>Output:</strong> [4]<br><strong>Explanation:</strong> After sorting, nums is [1,2,2,3,<u><strong>5</strong></u>].<br>The index where nums[i] == 5 is 4.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= nums.length &lt;= 100</code></em>   <code>1 &lt;= nums[i], target &lt;= 100</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>如果数组已排序，求target对应的所有下标。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>这道题是Easy题，也是Q&amp;A中被问到的，Binary Search不是最优解，但是可以用它作为解法研究。</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>标准binary search</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><p>N/A</p><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">targetIndices</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line">sorted_nums = sorted(nums)</span><br><span class="line">target_index = self.binary_search(sorted_nums, target)</span><br><span class="line">res = []</span><br><span class="line">print(target_index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(target_index - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line"><span class="keyword">if</span> sorted_nums[i] == target:</span><br><span class="line">res.append(i)</span><br><span class="line">res = res[::<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(target_index, len(sorted_nums)):</span><br><span class="line"><span class="keyword">if</span> sorted_nums[i] == target:</span><br><span class="line">res.append(i)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">start, end = <span class="number">0</span>, len(nums) - <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> start + <span class="number">1</span> &lt; end:</span><br><span class="line">mid = start + (end - start) // <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> target &lt; nums[mid]:</span><br><span class="line">end = mid</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">start = mid</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> nums[end] == target:</span><br><span class="line"><span class="keyword">return</span> end</span><br><span class="line"><span class="keyword">elif</span> nums[start] == target:</span><br><span class="line"><span class="keyword">return</span> start</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><hr><h3 id="算法II解题思路："><a href="#算法II解题思路：" class="headerlink" title="算法II解题思路："></a><strong>算法II解题思路：</strong></h3><p>first_postition &amp; last position</p><h3 id="Python代码：-1"><a href="#Python代码：-1" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">targetIndices</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line">sorted_nums = sorted(nums)</span><br><span class="line">target_upper_index = self.last_position(sorted_nums, target)</span><br><span class="line">target_lower_index = self.first_position(sorted_nums, target)</span><br><span class="line">res = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(target_lower_index, target_upper_index + <span class="number">1</span>)]</span><br><span class="line"><span class="keyword">return</span> [] <span class="keyword">if</span> target_upper_index == <span class="number">-1</span> <span class="keyword">else</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first_position</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">start, end = <span class="number">0</span>, len(nums) - <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> start + <span class="number">1</span> &lt; end:</span><br><span class="line">mid = start + (end - start) // <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> target &lt; nums[mid]:</span><br><span class="line">end = mid</span><br><span class="line"><span class="keyword">elif</span> target &gt; nums[mid]:</span><br><span class="line">start = mid</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">end = mid</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> nums[start] == target:</span><br><span class="line"><span class="keyword">return</span> start</span><br><span class="line"><span class="keyword">elif</span> nums[end] == target:</span><br><span class="line"><span class="keyword">return</span> end</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">last_position</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">start, end = <span class="number">0</span>, len(nums) - <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> start + <span class="number">1</span> &lt; end:</span><br><span class="line">mid = start + (end - start) // <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> target &lt; nums[mid]:</span><br><span class="line">end = mid</span><br><span class="line"><span class="keyword">elif</span> target &gt; nums[mid]:</span><br><span class="line">start = mid</span><br><span class="line"><span class="keyword">else</span>:  <span class="comment"># Depends on the target on the right side or left side. For fist pos, use end = mid</span></span><br><span class="line">start = mid</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> nums[end] == target:</span><br><span class="line"><span class="keyword">return</span> end</span><br><span class="line"><span class="keyword">elif</span> nums[start] == target:</span><br><span class="line"><span class="keyword">return</span> start</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(nlogn)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/find-target-indices-after-sorting-array/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/str
      
    
    </summary>
    
    
      <category term="Binary Search" scheme="https://shineboy2013.github.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 791 Custom Sort String</title>
    <link href="https://shineboy2013.github.com/2022/03/19/leetcode-791-custom-sort-string/"/>
    <id>https://shineboy2013.github.com/2022/03/19/leetcode-791-custom-sort-string/</id>
    <published>2022-03-20T06:13:19.185Z</published>
    <updated>2022-03-20T06:17:53.597Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/custom-sort-string/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>You are given two strings order and s. All the words of <code>order</code> are <strong>unique</strong> and were sorted in some custom order previously.<br><br>Permute the characters of <code>s</code> so that they match the order that <code>order</code> was sorted. More specifically, if a character <code>x</code> occurs before a character <code>y</code> in <code>order</code>, then <code>x</code> should occur before <code>y</code> in the permuted string.<br><br>Return <em>any permutation of</em> <code>s</code> <em>that satisfies this property</em>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> order = “cba”, s = “abcd”<br><strong>Output:</strong> “cbad”<br><strong>Explanation:</strong><br>“a”, “b”, “c” appear in order, so the order of “a”, “b”, “c” should be “c”, “b”, and “a”.<br>Since “d” does not appear in order, it can be at any position in the returned string. “dcba”, “cdba”, “cbda” are also valid outputs.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> order = “cbafg”, s = “abcd”<br><strong>Output:</strong> “cbad”<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= order.length &lt;= 26</code></em>   <code>1 &lt;= s.length &lt;= 200</code><br><em>   <code>order</code> and <code>s</code> consist of lowercase English letters.</em>   All the characters of <code>order</code> are <strong>unique</strong>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>给一个字符串，求这个字符串的一个排列，使得字母顺序按照另一个给定字符串order的顺序。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>由限制条件知道，order字母是唯一的，order字母可以重复。所以只要统计s频率，然后按照字母顺序开始重写</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">customSortString</span><span class="params">(self, order: str, s: str)</span> -&gt; str:</span></span><br><span class="line">char_to_count = collections.Counter(s)</span><br><span class="line">res = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> order:</span><br><span class="line"><span class="keyword">if</span> c <span class="keyword">in</span> char_to_count:</span><br><span class="line">res += c * char_to_count[c]</span><br><span class="line">char_to_count.pop(c)</span><br><span class="line"><span class="keyword">for</span> c, count <span class="keyword">in</span> char_to_count.items():</span><br><span class="line">res += c * count</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></li></ol><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/custom-sort-string/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br
      
    
    </summary>
    
    
      <category term="String" scheme="https://shineboy2013.github.com/tags/String/"/>
    
      <category term="Facebook" scheme="https://shineboy2013.github.com/tags/Facebook/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 426 Convert Binary Search Tree to Sorted Doubly Linked List</title>
    <link href="https://shineboy2013.github.com/2022/03/19/leetcode-426-convert-binary-search-tree-to-sorted-doubly-linked-list/"/>
    <id>https://shineboy2013.github.com/2022/03/19/leetcode-426-convert-binary-search-tree-to-sorted-doubly-linked-list/</id>
    <published>2022-03-20T01:24:26.629Z</published>
    <updated>2022-03-20T01:32:53.902Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Convert a <strong>Binary Search Tree</strong> to a sorted <strong>Circular Doubly-Linked List</strong> in place.<br><br>You can think of the left and right pointers as synonymous to the predecessor and successor pointers in a doubly-linked list. For a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element.<br><br>We want to do the transformation <strong>in place</strong>. After the transformation, the left pointer of the tree node should point to its predecessor, and the right pointer should point to its successor. You should return the pointer to the smallest element of the linked list.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2018/10/12/bstdlloriginalbst.png" alt=""><br><br><pre><strong>Input:</strong> root = [4,2,5,1,3]<br><br><img src="https://assets.leetcode.com/uploads/2018/10/12/bstdllreturndll.png" alt=""><br><strong>Output:</strong> [1,2,3,4,5]<br><br><strong>Explanation:</strong> The figure below shows the transformed BST. The solid line indicates the successor relationship, while the dashed line means the predecessor relationship.<br><img src="https://assets.leetcode.com/uploads/2018/10/12/bstdllreturnbst.png" alt=""><br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> root = [2,1,3]<br><strong>Output:</strong> [1,2,3]<br></pre><br><br><strong>Constraints:</strong><br><br><em>   The number of nodes in the tree is in the range <code>[0, 2000]</code>.</em>   <code>-1000 &lt;= Node.val &lt;= 1000</code><br><em>   All the values of the tree are <em>*unique</em></em>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>将二叉树变成双向链表，left为父节点，right为儿子节点</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>类似于LeetCode 114 Flatten Binary Tree to Linked List，先假设左右儿子，已经是双向LL，下面就是将root这个节点插入到两个LL之间其将它们首尾相连</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>要将左右儿子节点的LL，首尾相连。首尾节点获得要在if语句前，因为右儿子的left会连到root，就找不到它的尾部。首尾相连要发生在最后。</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">treeToDoublyList</span><span class="params">(self, root: <span class="string">'Node'</span>)</span> -&gt; 'Node':</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right:</span><br><span class="line">root.left, root.right = root, root</span><br><span class="line"><span class="keyword">return</span> root</span><br><span class="line">left_head = self.treeToDoublyList(root.left)</span><br><span class="line">right_head = self.treeToDoublyList(root.right)</span><br><span class="line"><span class="comment"># remember this part and order, can't be placed after ifs</span></span><br><span class="line">new_head = left_head <span class="keyword">if</span> left_head <span class="keyword">else</span> root</span><br><span class="line">new_tail = right_head.left <span class="keyword">if</span> right_head <span class="keyword">else</span> root</span><br><span class="line"><span class="keyword">if</span> left_head:</span><br><span class="line">left_head.left.right, root.left = root, left_head.left</span><br><span class="line"><span class="keyword">if</span> right_head:</span><br><span class="line">root.right, right_head.left = right_head, root</span><br><span class="line">new_head.left, new_tail.right = new_tail, new_head</span><br><span class="line"><span class="keyword">return</span> new_head</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;L
      
    
    </summary>
    
    
      <category term="Facebook" scheme="https://shineboy2013.github.com/tags/Facebook/"/>
    
      <category term="Tree" scheme="https://shineboy2013.github.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 408 Valid Word Abbreviation</title>
    <link href="https://shineboy2013.github.com/2022/03/19/leetcode-408-valid-word-abbreviation/"/>
    <id>https://shineboy2013.github.com/2022/03/19/leetcode-408-valid-word-abbreviation/</id>
    <published>2022-03-19T22:02:00.308Z</published>
    <updated>2022-03-19T22:08:04.422Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/valid-word-abbreviation/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>A string can be <strong>abbreviated</strong> by replacing any number of <strong>non-adjacent</strong>, <strong>non-empty</strong> substrings with their lengths. The lengths <strong>should not</strong> have leading zeros.<br><br>For example, a string such as <code>&quot;substitution&quot;</code> could be abbreviated as (but not limited to):<br><br><em>   <code>&quot;s10n&quot;</code> (<code>&quot;s &lt;u&gt;ubstitutio&lt;/u&gt; n&quot;</code>)</em>   <code>&quot;sub4u4&quot;</code> (<code>&quot;sub &lt;u&gt;stit&lt;/u&gt; u &lt;u&gt;tion&lt;/u&gt;&quot;</code>)<br><em>   <code>&quot;12&quot;</code> (<code>&quot;&lt;u&gt;substitution&lt;/u&gt;&quot;</code>)</em>   <code>&quot;su3i1u2on&quot;</code> (<code>&quot;su &lt;u&gt;bst&lt;/u&gt; i &lt;u&gt;t&lt;/u&gt; u &lt;u&gt;ti&lt;/u&gt; on&quot;</code>)<br><em>   <code>&quot;substitution&quot;</code> (no substrings replaced)<br><br>The following are <strong>not valid</strong> abbreviations:</em>   <code>&quot;s55n&quot;</code> (<code>&quot;s &lt;u&gt;ubsti&lt;/u&gt; &lt;u&gt;tutio&lt;/u&gt; n&quot;</code>, the replaced substrings are adjacent)<br><em>   <code>&quot;s010n&quot;</code> (has leading zeros)</em>   <code>&quot;s0ubstitution&quot;</code> (replaces an empty substring)<br><br>Given a string <code>word</code> and an abbreviation <code>abbr</code>, return <em>whether the string <strong>matches</strong> the given abbreviation</em>.<br><br>A <strong>substring</strong> is a contiguous <strong>non-empty</strong> sequence of characters within a string.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> word = “internationalization”, abbr = “i12iz4n”<br><strong>Output:</strong> true<br><strong>Explanation:</strong> The word “internationalization” can be abbreviated as “i12iz4n” (“i <u>nternational</u> iz <u>atio</u> n”).<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> word = “apple”, abbr = “a2e”<br><strong>Output:</strong> false<br><strong>Explanation:</strong> The word “apple” cannot be abbreviated as “a2e”.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= word.length &lt;= 20</code></em>   <code>word</code> consists of only lowercase English letters.<br><em>   <code>1 &lt;= abbr.length &lt;= 10</code></em>   <code>abbr</code> consists of lowercase English letters and digits.<br>*   All the integers in <code>abbr</code> will fit in a 32-bit integer.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>验证第二字符串是否第一字符串的一个种简写形式，用数字代替字符串部分长度</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>Easy题</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>用内外while循环如quicksort的不推荐的算法，<strong>内循环的条件一定要复制外循环的条件</strong>j &lt; len(abbr)</li><li>题目条件不能含前缀0，包括0本身，若数字第一位为0，就返回False</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validWordAbbreviation</span><span class="params">(self, word: str, abbr: str)</span> -&gt; bool:</span></span><br><span class="line">i, j, num = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(word) <span class="keyword">and</span> j &lt; len(abbr):</span><br><span class="line">num_str = <span class="string">''</span></span><br><span class="line"><span class="keyword">while</span> j &lt; len(abbr) <span class="keyword">and</span> abbr[j].isdigit(): <span class="comment"># remember j &lt; len(abbr)</span></span><br><span class="line">num_str += abbr[j]</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> num_str:</span><br><span class="line"><span class="keyword">if</span> num_str[<span class="number">0</span>] == <span class="string">'0'</span>: <span class="comment"># remember</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">i += int(num_str)</span><br><span class="line"><span class="keyword">elif</span> word[i] != abbr[j]:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line">j += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span> <span class="keyword">if</span> i != len(word) <span class="keyword">or</span> j != len(abbr) <span class="keyword">else</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/valid-word-abbreviation/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;b
      
    
    </summary>
    
    
      <category term="String" scheme="https://shineboy2013.github.com/tags/String/"/>
    
      <category term="Facebook" scheme="https://shineboy2013.github.com/tags/Facebook/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 921 Minimum Add to Make Parentheses Valid</title>
    <link href="https://shineboy2013.github.com/2022/03/16/leetcode-921-minimum-add-to-make-parentheses-valid/"/>
    <id>https://shineboy2013.github.com/2022/03/16/leetcode-921-minimum-add-to-make-parentheses-valid/</id>
    <published>2022-03-16T16:47:17.015Z</published>
    <updated>2022-03-16T16:55:18.627Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>A parentheses string is valid if and only if:<br><br><em>   It is the empty string,</em>   It can be written as <code>AB</code> (<code>A</code> concatenated with <code>B</code>), where <code>A</code> and <code>B</code> are valid strings, or<br><em>   It can be written as <code>(A)</code>, where <code>A</code> is a valid string.<br><br>You are given a parentheses string <code>s</code>. In one move, you can insert a parenthesis at any position of the string.</em>   For example, if <code>s = &quot;()))&quot;</code>, you can insert an opening parenthesis to be <code>&quot;(**(**)))&quot;</code> or a closing parenthesis to be <code>&quot;())**)**)&quot;</code>.<br><br>Return <em>the minimum number of moves required to make</em> <code>s</code> <em>valid</em>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> s = “())”<br><strong>Output:</strong> 1<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> s = “(((“<br><strong>Output:</strong> 3<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= s.length &lt;= 1000</code></em>   <code>s[i]</code> is either <code>&#39;(&#39;</code> or <code>&#39;)&#39;</code>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>最小加括号数使得配对</p><h3 id="Stack解题思路-推荐-："><a href="#Stack解题思路-推荐-：" class="headerlink" title="Stack解题思路(推荐)："></a><strong>Stack解题思路(推荐)：</strong></h3><p>跟Leetcode 1249一样。括号题优先考虑用Stack。此题将下标存于stack中，stack留下的是不合法括号下标，也就是需要删除的 </p><p>LeetCode 1249 Minimum Remove to Make Valid Parentheses 求一个最优解 Medium, Stack<br>LeetCode 921 Minimum Add to Make Parentheses Valid 求一个最优解 Medium, Stack<br>LeetCode 301 Remove Invalid Parentheses 求所有最优解 Hard，此题 答案包含上题, BFS</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minAddToMakeValid</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">stack, res = [], <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line"><span class="keyword">if</span> s[i] == <span class="string">'('</span>:</span><br><span class="line">stack.append(i)</span><br><span class="line"><span class="keyword">elif</span> stack <span class="keyword">and</span> s[stack[<span class="number">-1</span>]] == <span class="string">'('</span> <span class="keyword">and</span> s[i] == <span class="string">')'</span>:  <span class="comment"># remember</span></span><br><span class="line">stack.pop()</span><br><span class="line"><span class="keyword">elif</span> s[i] == <span class="string">')'</span>:</span><br><span class="line">stack.append(i)</span><br><span class="line"><span class="keyword">return</span> len(stack)</span><br></pre></td></tr></table></figure></li></ol><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p><hr><h3 id="统计算法II解题思路："><a href="#统计算法II解题思路：" class="headerlink" title="统计算法II解题思路："></a><strong>统计算法II解题思路：</strong></h3><p>类似于Leetcode 032 Longest Valid Parentheses的统计算法。用这两种情况来写即可： ()), )(. 若左括号数left出现负数，根据第一个规律，重设left，计入res</p><h3 id="Python代码：-1"><a href="#Python代码：-1" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minAddToMakeValid2</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">left, res = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line"><span class="keyword">if</span> char == <span class="string">'('</span>:</span><br><span class="line">left += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">left -= <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> left &lt; <span class="number">0</span>:</span><br><span class="line">res += <span class="number">1</span></span><br><span class="line">left = <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> res + abs(left)</span><br></pre></td></tr></table></figure><h3 id="算法分析：-1"><a href="#算法分析：-1" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/stron
      
    
    </summary>
    
    
      <category term="String" scheme="https://shineboy2013.github.com/tags/String/"/>
    
      <category term="Facebook" scheme="https://shineboy2013.github.com/tags/Facebook/"/>
    
      <category term="Stack" scheme="https://shineboy2013.github.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 938 Range Sum of BST</title>
    <link href="https://shineboy2013.github.com/2022/03/16/leetcode-938-range-sum-of-bst/"/>
    <id>https://shineboy2013.github.com/2022/03/16/leetcode-938-range-sum-of-bst/</id>
    <published>2022-03-16T07:30:34.717Z</published>
    <updated>2022-03-16T07:37:42.255Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/range-sum-of-bst/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given the <code>root</code> node of a binary search tree and two integers <code>low</code> and <code>high</code>, return <em>the sum of values of all nodes with a value in the <strong>inclusive</strong> range</em> <code>[low, high]</code>.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2020/11/05/bst1.jpg" alt=""><br><br><pre><strong>Input:</strong> root = [10,5,15,3,7,null,18], low = 7, high = 15<br><strong>Output:</strong> 32<br><strong>Explanation:</strong> Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.<br></pre><br><br><strong>Example 2:</strong><br><br><img src="https://assets.leetcode.com/uploads/2020/11/05/bst2.jpg" alt=""><br><br><pre><strong>Input:</strong> root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10<br><strong>Output:</strong> 23<br><strong>Explanation:</strong> Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   The number of nodes in the tree is in the range `[1, 2 </em> 10<sup>4</sup>]<code>.*</code>1 &lt;= Node.val &lt;= 10<sup>5</sup><code>*</code>1 &lt;= low &lt;= high &lt;= 10<sup>5</sup><code>*   All</code>Node.val` are <strong>unique</strong>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>给定[low, high]和BST，求满足条件的BST的节点和</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>Easy题，DFS，条件比较容易错</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>两个条件，若root.val在范围内，加入和。若low小于root.val(这里不取等号，因为所有节点是唯一，不存在相等节点)，<br>表示范围适用于左节点，同理右节点。</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rangeSumBST</span><span class="params">(self, root: TreeNode, low: int, high: int)</span> -&gt; int:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> low &lt;= root.val &lt;= high:</span><br><span class="line">res += root.val</span><br><span class="line"><span class="keyword">if</span> low &lt; root.val:</span><br><span class="line">res += self.rangeSumBST(root.left, low, high)</span><br><span class="line"><span class="keyword">if</span> root.val &lt; high:</span><br><span class="line">res += self.rangeSumBST(root.right, low, high)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/range-sum-of-bst/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;G
      
    
    </summary>
    
    
      <category term="Facebook" scheme="https://shineboy2013.github.com/tags/Facebook/"/>
    
      <category term="Tree" scheme="https://shineboy2013.github.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 706 Design HashMap</title>
    <link href="https://shineboy2013.github.com/2022/03/15/leetcode-0706-design-hashmap/"/>
    <id>https://shineboy2013.github.com/2022/03/15/leetcode-0706-design-hashmap/</id>
    <published>2022-03-16T01:47:07.471Z</published>
    <updated>2022-03-16T01:57:13.020Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/design-hashmap/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Design a HashMap without using any built-in hash table libraries.<br><br>Implement the <code>MyHashMap</code> class:<br><br><em>   <code>MyHashMap()</code> initializes the object with an empty map.</em>   <code>void put(int key, int value)</code> inserts a <code>(key, value)</code> pair into the HashMap. If the <code>key</code> already exists in the map, update the corresponding <code>value</code>.<br><em>   <code>int get(int key)</code> returns the <code>value</code> to which the specified <code>key</code> is mapped, or <code>-1</code> if this map contains no mapping for the <code>key</code>.</em>   <code>void remove(key)</code> removes the <code>key</code> and its corresponding <code>value</code> if the map contains the mapping for the <code>key</code>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input</strong><br>[“MyHashMap”, “put”, “put”, “get”, “get”, “put”, “get”, “remove”, “get”]<br>[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]<br><strong>Output</strong><br>[null, null, null, 1, -1, null, 1, null, -1]<br><br><strong>Explanation</strong><br>MyHashMap myHashMap = new MyHashMap();<br>myHashMap.put(1, 1); // The map is now [[1,1]]<br>myHashMap.put(2, 2); // The map is now [[1,1], [2,2]]<br>myHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]<br>myHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]<br>myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)<br>myHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]<br>myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]<br>myHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>0 &lt;= key, value &lt;= 10&lt;sup&gt;6&lt;/sup&gt;</code></em>   At most <code>10&lt;sup&gt;4&lt;/sup&gt;</code> calls will be made to <code>put</code>, <code>get</code>, and <code>remove</code>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>设计HashMap</p><h3 id="LL解题思路-推荐-："><a href="#LL解题思路-推荐-：" class="headerlink" title="LL解题思路(推荐)："></a><strong>LL解题思路(推荐)：</strong></h3><p>大学学到的方法，用Array实现，将key mod prime num找到index插入。难点在于冲突处理，这里用chaining方法，也就是LL</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>迭代LL时候，每种方法put, get, remove都不同。put只能迭代到最后一个不能到None，因为要从尾部加入。<br>get正常一个个迭代。remove要从parent也就是it.next迭代因为要删除节点。</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHashMap</span><span class="params">(TestCases)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.key_space = <span class="number">997</span></span><br><span class="line">        self.buckets = [ListNode(<span class="number">-1</span>, <span class="number">-1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.key_space)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key: int, value: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        index = key % self.key_space</span><br><span class="line">        it = self.buckets[index]</span><br><span class="line">        <span class="keyword">while</span> it:</span><br><span class="line">            <span class="keyword">if</span> it.key == key:</span><br><span class="line">                it.val = value</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> it.next:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            it = it.next</span><br><span class="line">        it.next = ListNode(key, value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key: int)</span> -&gt; int:</span></span><br><span class="line">        index = key % self.key_space</span><br><span class="line">        it = self.buckets[index]</span><br><span class="line">        <span class="keyword">while</span> it:</span><br><span class="line">            <span class="keyword">if</span> it.key == key:</span><br><span class="line">                <span class="keyword">return</span> it.val</span><br><span class="line">            it = it.next</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, key: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        index = key % self.key_space</span><br><span class="line">        it = self.buckets[index]</span><br><span class="line">        <span class="keyword">while</span> it.next:</span><br><span class="line">            <span class="keyword">if</span> it.next.key == key:</span><br><span class="line">                tmp = it.next</span><br><span class="line">                it.next, tmp.next = it.next.next, <span class="keyword">None</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            it = it.next</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key, val)</span>:</span></span><br><span class="line">        self.key = key</span><br><span class="line">        self.val = val</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(k)</code>，空间复杂度<code>O(n)</code>, k为冲突数</p><hr><h3 id="数组算法II解题思路："><a href="#数组算法II解题思路：" class="headerlink" title="数组算法II解题思路："></a><strong>数组算法II解题思路：</strong></h3><p>较容易实现，remove复杂度稍差，但是最差情况也是同上</p><h3 id="Python代码：-1"><a href="#Python代码：-1" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHashMap</span><span class="params">(TestCases)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.key_space = <span class="number">997</span></span><br><span class="line">        self.buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.key_space)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key: int, value: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        index = key % self.key_space</span><br><span class="line">        <span class="keyword">for</span> i, [_key, _val] <span class="keyword">in</span> enumerate(self.buckets[index]):</span><br><span class="line">            <span class="keyword">if</span> _key == key:</span><br><span class="line">                self.buckets[index][i] = [key, value]</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        self.buckets[index].append([key, value])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key: int)</span> -&gt; int:</span></span><br><span class="line">        index = key % self.key_space</span><br><span class="line">        <span class="keyword">for</span> _key, _val <span class="keyword">in</span> self.buckets[index]:</span><br><span class="line">            <span class="keyword">if</span> _key == key:</span><br><span class="line">                <span class="keyword">return</span> _val</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, key: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        index = key % self.key_space</span><br><span class="line">        <span class="keyword">for</span> i, [_key, _val] <span class="keyword">in</span> enumerate(self.buckets[index]):</span><br><span class="line">            <span class="keyword">if</span> _key == key:</span><br><span class="line">                self.buckets[index].pop(i)</span><br><span class="line">                <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h3 id="算法分析：-1"><a href="#算法分析：-1" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(k)</code>，空间复杂度<code>O(n)</code>, k为冲突数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/design-hashmap/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;Des
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Mock 002 Print 5-min intervals</title>
    <link href="https://shineboy2013.github.com/2022/03/07/mock-002/"/>
    <id>https://shineboy2013.github.com/2022/03/07/mock-002/</id>
    <published>2022-03-07T10:12:50.246Z</published>
    <updated>2022-03-07T10:18:07.202Z</updated>
    
    <content type="html"><![CDATA[<p>Input - (“mon 10:00 am”, mon 11:00 am)<br>Output - [11005, 11010, 11015…11100]<br>Output starts with 1 if the day is monday, 2 if tuesday and so on till 7 for sunday<br>Append 5 min interval times to that till the end time<br>So here it is 10:05 as first case, so its written as 11005<br>2nd is 10:10 so its written as 11010</p><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>DD的面经题，给定开始时间和结束时间，求5分钟的间隔时间，注意要round to 5min</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>由于非10进制，所以开一个类来计算进制</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>实现lt函数</li><li>12am, 12pm要mod 12</li><li>(0 if parts[2] == ‘am’ else 12)加括号</li><li>开始时间到到5分钟端点，结束时间加1分钟，由于只实现了lt</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">DAY_DICT = &#123;<span class="string">'mon'</span>: <span class="number">1</span>, <span class="string">'tue'</span>: <span class="number">2</span>, <span class="string">'wed'</span>: <span class="number">3</span>, <span class="string">'thu'</span>: <span class="number">4</span>, <span class="string">'fri'</span>: <span class="number">5</span>, <span class="string">'sat'</span>: <span class="number">6</span>, <span class="string">'sun'</span>: <span class="number">7</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(TestCases)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_intervals</span><span class="params">(self, start, end)</span> -&gt; List:</span></span><br><span class="line">        start_time = Time(start)</span><br><span class="line">        end_time = Time(end)</span><br><span class="line">        <span class="keyword">if</span> start_time.min % <span class="number">5</span> &gt; <span class="number">0</span>:</span><br><span class="line">            start_time.add(<span class="number">5</span> - start_time.min % <span class="number">5</span>)</span><br><span class="line">        end_time.add(<span class="number">1</span>)</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> start_time &lt; end_time:</span><br><span class="line">            res.append(start_time.get_numeric())</span><br><span class="line">            start_time.add(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, time)</span>:</span></span><br><span class="line">        parts = time.split(<span class="string">' '</span>)</span><br><span class="line">        day = DAY_DICT[parts[<span class="number">0</span>]]</span><br><span class="line">        time_parts = parts[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">        hour = int(time_parts[<span class="number">0</span>]) % <span class="number">12</span> + (<span class="number">0</span> <span class="keyword">if</span> parts[<span class="number">2</span>] == <span class="string">'am'</span> <span class="keyword">else</span> <span class="number">12</span>) <span class="comment"># remember paren (0 ...12), and % 12</span></span><br><span class="line">        self.day = day</span><br><span class="line">        self.hour = hour</span><br><span class="line">        self.min = int(time_parts[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.day &lt; other.day <span class="keyword">or</span> (self.day == other.day <span class="keyword">and</span> self.hour &lt; other.hour) <span class="keyword">or</span> \</span><br><span class="line">                (self.day == other.day <span class="keyword">and</span> self.hour == other.hour <span class="keyword">and</span> self.min &lt; other.min):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_numeric</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.day * <span class="number">10000</span> + self.hour * <span class="number">100</span> + self.min</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, mins)</span>:</span></span><br><span class="line">        self.min += mins</span><br><span class="line">        <span class="keyword">if</span> self.min == <span class="number">60</span>:</span><br><span class="line">            self.min = <span class="number">0</span></span><br><span class="line">            self.hour += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.hour == <span class="number">24</span>:</span><br><span class="line">            self.hour = <span class="number">0</span></span><br><span class="line">            self.day += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.day == <span class="number">7</span>:</span><br><span class="line">            self.day = <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Input - (“mon 10:00 am”, mon 11:00 am)&lt;br&gt;Output - [11005, 11010, 11015…11100]&lt;br&gt;Output starts with 1 if the day is monday, 2 if tuesday
      
    
    </summary>
    
    
      <category term="DoorDash" scheme="https://shineboy2013.github.com/tags/DoorDash/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 772 Basic Calculator III</title>
    <link href="https://shineboy2013.github.com/2022/03/01/leetcode-772-basic-calculator-iii/"/>
    <id>https://shineboy2013.github.com/2022/03/01/leetcode-772-basic-calculator-iii/</id>
    <published>2022-03-02T06:31:18.494Z</published>
    <updated>2022-03-02T07:21:29.014Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/basic-calculator-iii/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Implement a basic calculator to evaluate a simple expression string.<br><br>The expression string contains only non-negative integers, <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;*&#39;</code>, <code>&#39;/&#39;</code> operators, and open <code>&#39;(&#39;</code> and closing parentheses <code>&#39;)&#39;</code>. The integer division should <strong>truncate toward zero</strong>.<br><br>You may assume that the given expression is always valid. All intermediate results will be in the range of <code>[-2&lt;sup&gt;31&lt;/sup&gt;, 2&lt;sup&gt;31&lt;/sup&gt; - 1]</code>.<br><br><strong>Note:</strong> You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as <code>eval()</code>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> s = “1+1”<br><strong>Output:</strong> 2<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> s = “6-4/2”<br><strong>Output:</strong> 4<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> s = “2<em>(5+5</em>2)/3+(6/2+8)”<br><strong>Output:</strong> 21<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= s &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></em>   <code>s</code> consists of digits, <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;*&#39;</code>, <code>&#39;/&#39;</code>, <code>&#39;(&#39;</code>, and <code>&#39;)&#39;</code>.<br><em>   <code>s</code> is a <em>*valid</em></em> expression.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>实现字符串加减乘除且有括号。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>类似于Leetcode 227求加减乘除，这里多了括号，括号内含加减乘除，所以每对括号是一轮DFS。遇到左括号，就进入递归，遇到右括号就返回递归值</p><p><a href="https://shineboy2013.github.io/2021/12/08/lee-224/" target="_blank" rel="noopener">LeetCode 224 Basic Calculator</a> 括号加减法, 同一层括号内求和遇括号入栈<br><a href="https://shineboy2013.github.io/2021/12/06/lee-227/" target="_blank" rel="noopener">LeetCode 227 Basic Calculator II</a> 加减乘除, 和的每一项入栈，方便出栈计乘除<br><a href="https://shineboy2013.github.io/2022/03/01/leetcode-772-basic-calculator-iii/" target="_blank" rel="noopener">LeetCode 772 Basic Calculator III</a> 加减乘除括号, L227的递归版</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>不同于L227, 类似于填位法将i作为DFS参数传入，返回括号内的值以及i。i放入while循环， i += 1要加入到空格情况和循环最后</li><li>最后位加入加号要移除DFS中，放入主函数</li><li><strong>注意处理括号情况的顺序，左括号在空格后，右括号在最后</strong></li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">s += <span class="string">'+'</span></span><br><span class="line"><span class="keyword">return</span> self.dfs(s, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, s, i)</span>:</span></span><br><span class="line">res, num, stack, op = <span class="number">0</span>, <span class="number">0</span>, [], <span class="string">'+'</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(s):</span><br><span class="line">char = s[i]</span><br><span class="line"><span class="keyword">if</span> char == <span class="string">' '</span>:</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> char == <span class="string">'('</span>:</span><br><span class="line">num, i = self.dfs(s, i + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">elif</span> char.isdigit():</span><br><span class="line">num = num * <span class="number">10</span> + int(char)</span><br><span class="line"><span class="keyword">elif</span> op == <span class="string">'-'</span>:</span><br><span class="line">stack.append(-num)</span><br><span class="line"><span class="keyword">elif</span> op == <span class="string">'+'</span>:</span><br><span class="line">stack.append(num) <span class="comment"># [4+2*1]</span></span><br><span class="line"><span class="keyword">elif</span> op == <span class="string">'*'</span>:</span><br><span class="line">prev = stack.pop()</span><br><span class="line">stack.append(prev * num)</span><br><span class="line"><span class="keyword">elif</span> op == <span class="string">'/'</span>:</span><br><span class="line">prev = stack.pop()</span><br><span class="line">stack.append(int(prev / num))  <span class="comment"># remember</span></span><br><span class="line"><span class="keyword">if</span> char <span class="keyword">in</span> <span class="string">'+-*/'</span>:</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line">op = char</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> char == <span class="string">')'</span>:</span><br><span class="line"><span class="keyword">return</span> sum(stack), i</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> sum(stack)</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/basic-calculator-iii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
    
      <category term="Stack" scheme="https://shineboy2013.github.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 432 All O one Data Structure</title>
    <link href="https://shineboy2013.github.com/2022/02/24/leetcode-432-all-oone-data-structure/"/>
    <id>https://shineboy2013.github.com/2022/02/24/leetcode-432-all-oone-data-structure/</id>
    <published>2022-02-24T09:36:23.632Z</published>
    <updated>2022-03-14T09:37:46.665Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/all-oone-data-structure/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Design a data structure to store the strings’ count with the ability to return the strings with minimum and maximum counts.<br><br>Implement the <code>AllOne</code> class:<br><br><em>   <code>AllOne()</code> Initializes the object of the data structure.</em>   <code>inc(String key)</code> Increments the count of the string <code>key</code> by <code>1</code>. If <code>key</code> does not exist in the data structure, insert it with count <code>1</code>.<br><em>   <code>dec(String key)</code> Decrements the count of the string <code>key</code> by <code>1</code>. If the count of <code>key</code> is <code>0</code> after the decrement, remove it from the data structure. It is guaranteed that <code>key</code> exists in the data structure before the decrement.</em>   <code>getMaxKey()</code> Returns one of the keys with the maximal count. If no element exists, return an empty string <code>&quot;&quot;</code>.<br><em>   <code>getMinKey()</code> Returns one of the keys with the minimum count. If no element exists, return an empty string <code>&quot;&quot;</code>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input</strong><br>[“AllOne”, “inc”, “inc”, “getMaxKey”, “getMinKey”, “inc”, “getMaxKey”, “getMinKey”]<br>[[], [“hello”], [“hello”], [], [], [“leet”], [], []]<br><strong>Output</strong><br>[null, null, null, “hello”, “hello”, null, “hello”, “leet”]<br><br><strong>Explanation</strong><br>AllOne allOne = new AllOne();<br>allOne.inc(“hello”);<br>allOne.inc(“hello”);<br>allOne.getMaxKey(); // return “hello”<br>allOne.getMinKey(); // return “hello”<br>allOne.inc(“leet”);<br>allOne.getMaxKey(); // return “hello”<br>allOne.getMinKey(); // return “leet”<br></pre><br><br><strong>Constraints:</strong></em>   <code>1 &lt;= key.length &lt;= 10</code><br><em>   <code>key</code> consists of lowercase English letters.</em>   It is guaranteed that for each call to <code>dec</code>, <code>key</code> is existing in the data structure.<br><em>   At most `5 </em> 10<sup>4</sup><code>calls will be made to</code>inc<code>,</code>dec<code>,</code>getMaxKey<code>, and</code>getMinKey`.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>设计数据结构，使其支持增加或减少一个单词的频数，最大或最小单词的频数。注意最小频数不能为0</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>这个频数有点似LRU的分层思路，加入self.max_freq, 其他操作都可以实现，但是dec操作不能达到O(1), 因为若某个最小频数单词从1变成0，需要检索频率到下一个有节点的层。<br>改进就是要将频率的的值连起来，所以参考LRU，map的key是频率，value是node，node中含有freq，形成一个环。而node含有该频率对应的单词set，inc/dec就是将单词移动另一个node中</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>与LRU区别: map的key是频率，node含有频率和单词set，数据结构加入key_to_count。LL是从最大频率到最小频率</li><li>inc操作将节点从原频率node移到下一个频率node，若新node不存在，调用append_before. 然后从原频率node的单词set中删除该单词，若set为空，删除此node以及map中的entry</li><li>dec与inc类似，但要注意频率变成0的情况：不移到新的node，且从key_to_count中删除该单词</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AllOne</span><span class="params">(TestCases)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.freq_to_node = &#123;&#125;</span><br><span class="line">        self.head = ListNode(<span class="number">0</span>)</span><br><span class="line">        self.tail = ListNode(<span class="number">0</span>)</span><br><span class="line">        self.head.next, self.tail.prev = self.tail, self.head</span><br><span class="line">        self.key_to_count = collections.defaultdict(int)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inc</span><span class="params">(self, key: str)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        count = self.key_to_count[key]</span><br><span class="line">        old_node = self.freq_to_node[count] <span class="keyword">if</span> count <span class="keyword">in</span> self.freq_to_node <span class="keyword">else</span> self.tail</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> count <span class="keyword">not</span> <span class="keyword">in</span> self.freq_to_node:</span><br><span class="line">            self.freq_to_node[count] = self.append_before(old_node)</span><br><span class="line">        new_node = self.freq_to_node[count]</span><br><span class="line">        new_node.key_set.add(key)</span><br><span class="line">        self.key_to_count[key] = count</span><br><span class="line"></span><br><span class="line">        count -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> count <span class="keyword">in</span> self.freq_to_node <span class="keyword">and</span> key <span class="keyword">in</span> self.freq_to_node[count].key_set:</span><br><span class="line">            self.freq_to_node[count].key_set.remove(key)</span><br><span class="line">            <span class="keyword">if</span> len(self.freq_to_node[count].key_set) == <span class="number">0</span>:</span><br><span class="line">                self.remove_node(self.freq_to_node[count])</span><br><span class="line">                self.freq_to_node.pop(count) <span class="comment"># remember</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dec</span><span class="params">(self, key: str)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        count = self.key_to_count[key]</span><br><span class="line">        old_node = self.freq_to_node[count] <span class="keyword">if</span> count <span class="keyword">in</span> self.freq_to_node <span class="keyword">else</span> self.head</span><br><span class="line">        count -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">0</span>: <span class="comment"># remember</span></span><br><span class="line">            <span class="keyword">if</span> count <span class="keyword">not</span> <span class="keyword">in</span> self.freq_to_node:</span><br><span class="line">                self.freq_to_node[count] = self.append_after(old_node)</span><br><span class="line">            new_node = self.freq_to_node[count]</span><br><span class="line">            new_node.key_set.add(key)</span><br><span class="line">            self.key_to_count[key] = count</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.key_to_count.pop(key)</span><br><span class="line"></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> count <span class="keyword">in</span> self.freq_to_node <span class="keyword">and</span> key <span class="keyword">in</span> self.freq_to_node[count].key_set:</span><br><span class="line">            self.freq_to_node[count].key_set.remove(key)</span><br><span class="line">            <span class="keyword">if</span> len(self.freq_to_node[count].key_set) == <span class="number">0</span>:</span><br><span class="line">                self.remove_node(self.freq_to_node[count])</span><br><span class="line">                self.freq_to_node.pop(count)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMaxKey</span><span class="params">(self)</span> -&gt; str:</span></span><br><span class="line">        node = self.head.next</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span> <span class="keyword">if</span> node == self.tail <span class="keyword">else</span> next(iter(node.key_set))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMinKey</span><span class="params">(self)</span> -&gt; str:</span></span><br><span class="line">        node = self.tail.prev</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span> <span class="keyword">if</span> node == self.head <span class="keyword">else</span> next(iter(node.key_set))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append_before</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        new_node = ListNode(node.freq + <span class="number">1</span>)</span><br><span class="line">        predecessor, successor = node.prev, node</span><br><span class="line">        predecessor.next, new_node.prev = new_node, predecessor</span><br><span class="line">        new_node.next, successor.prev = successor, new_node</span><br><span class="line">        <span class="keyword">return</span> new_node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append_after</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        new_node = ListNode(node.freq - <span class="number">1</span>)</span><br><span class="line">        predecessor, successor = node, node.next</span><br><span class="line">        predecessor.next, new_node.prev = new_node, predecessor</span><br><span class="line">        new_node.next, successor.prev = successor, new_node</span><br><span class="line">        <span class="keyword">return</span> new_node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove_node</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        predecessor, successor = node.prev, node.next</span><br><span class="line">        predecessor.next, successor.prev = successor, predecessor</span><br><span class="line">        node.prev, node.next = <span class="keyword">None</span>, <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, freq=<span class="number">0</span>, next=None, prev=None)</span>:</span></span><br><span class="line">        self.key_set = set()</span><br><span class="line">        self.freq = freq</span><br><span class="line">        self.next = next</span><br><span class="line">        self.prev = prev</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(1)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/all-oone-data-structure/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;b
      
    
    </summary>
    
    
      <category term="Linked List" scheme="https://shineboy2013.github.com/tags/Linked-List/"/>
    
      <category term="LinkedIn" scheme="https://shineboy2013.github.com/tags/LinkedIn/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 2034 Stock Price Fluctuation</title>
    <link href="https://shineboy2013.github.com/2022/02/16/leetcode-2034-stock-price-fluctuation/"/>
    <id>https://shineboy2013.github.com/2022/02/16/leetcode-2034-stock-price-fluctuation/</id>
    <published>2022-02-17T04:00:04.962Z</published>
    <updated>2022-02-17T04:05:06.717Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/stock-price-fluctuation/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>You are given a stream of <strong>records</strong> about a particular stock. Each record contains a <strong>timestamp</strong> and the corresponding <strong>price</strong> of the stock at that timestamp.<br><br>Unfortunately due to the volatile nature of the stock market, the records do not come in order. Even worse, some records may be incorrect. Another record with the same timestamp may appear later in the stream <strong>correcting</strong> the price of the previous wrong record.<br><br>Design an algorithm that:<br><br><em>   <strong>Updates</strong> the price of the stock at a particular timestamp, <strong>correcting</strong> the price from any previous records at the timestamp.</em>   Finds the <strong>latest price</strong> of the stock based on the current records. The <strong>latest price</strong> is the price at the latest timestamp recorded.<br><em>   Finds the <strong>maximum price</strong> the stock has been based on the current records.</em>   Finds the <strong>minimum price</strong> the stock has been based on the current records.<br><br>Implement the <code>StockPrice</code> class:<br><br><em>   <code>StockPrice()</code> Initializes the object with no price records.</em>   <code>void update(int timestamp, int price)</code> Updates the <code>price</code> of the stock at the given <code>timestamp</code>.<br><em>   <code>int current()</code> Returns the <strong>latest price</strong> of the stock.</em>   <code>int maximum()</code> Returns the <strong>maximum price</strong> of the stock.<br><em>   <code>int minimum()</code> Returns the <strong>minimum price</strong> of the stock.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input</strong><br>[“StockPrice”, “update”, “update”, “current”, “maximum”, “update”, “maximum”, “update”, “minimum”]<br>[[], [1, 10], [2, 5], [], [], [1, 3], [], [4, 2], []]<br><strong>Output</strong><br>[null, null, null, 5, 10, null, 5, null, 2]<br><br><strong>Explanation</strong><br>StockPrice stockPrice = new StockPrice();<br>stockPrice.update(1, 10); // Timestamps are [1] with corresponding prices [10].<br>stockPrice.update(2, 5);  // Timestamps are [1,2] with corresponding prices [10,5].<br>stockPrice.current();     // return 5, the latest timestamp is 2 with the price being 5.<br>stockPrice.maximum();     // return 10, the maximum price is 10 at timestamp 1.<br>stockPrice.update(1, 3);  // The previous timestamp 1 had the wrong price, so it is updated to 3.<br>                          // Timestamps are [1,2] with corresponding prices [3,5].<br>stockPrice.maximum();     // return 5, the maximum price is 5 after the correction.<br>stockPrice.update(4, 2);  // Timestamps are [1,2,4] with corresponding prices [3,5,2].<br>stockPrice.minimum();     // return 2, the minimum price is 2 at timestamp 4.<br></pre><br><br><strong>Constraints:</strong></em>   <code>1 &lt;= timestamp, price &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code><br><em>   At most <code>10&lt;sup&gt;5&lt;/sup&gt;</code> calls will be made <strong>in total</strong> to <code>update</code>, <code>current</code>, <code>maximum</code>, and <code>minimum</code>.</em>   <code>current</code>, <code>maximum</code>, and <code>minimum</code> will be called <strong>only after</strong> <code>update</code> has been called <strong>at least once</strong>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>实现一个关于股票的数据结构，可以更新时间点对应的股价，最大最小值，最新价格</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>求最大最小值容易想到用heap，但heap不支持更新，难点是怎么支持更新股价。<br>仍然(price, timestamp)加入到heap中，在出堆时验证</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>验证堆顶： 若股价和时间不匹配(用time_to_price验证)，表示这是stale股价，不断去掉，直到验证成功为止，最后加入到堆中</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StockPrice</span><span class="params">(TestCases)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.time_to_price = &#123;&#125;</span><br><span class="line">        self.cur_time = <span class="number">0</span></span><br><span class="line">        self.min_heap = []</span><br><span class="line">        self.max_heap = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, timestamp: int, price: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.time_to_price[timestamp] = price</span><br><span class="line">        self.cur_time = max(self.cur_time, timestamp)</span><br><span class="line">        heapq.heappush(self.min_heap, (price, timestamp))</span><br><span class="line">        heapq.heappush(self.max_heap, (-price, timestamp))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">current</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.time_to_price[self.cur_time]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximum</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        price, timestamp = heapq.heappop(self.max_heap)</span><br><span class="line">        <span class="keyword">while</span> -price != self.time_to_price[timestamp]:</span><br><span class="line">            price, timestamp = heapq.heappop(self.max_heap)</span><br><span class="line">        heapq.heappush(self.max_heap, (price, timestamp))</span><br><span class="line">        <span class="keyword">return</span> -price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minimum</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        price, timestamp = heapq.heappop(self.min_heap)</span><br><span class="line">        <span class="keyword">while</span> price != self.time_to_price[timestamp]:</span><br><span class="line">            price, timestamp = heapq.heappop(self.min_heap)</span><br><span class="line">        heapq.heappush(self.min_heap, (price, timestamp))</span><br><span class="line">        <span class="keyword">return</span> price</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>update时间复杂度为<code>O(logn)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/stock-price-fluctuation/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;b
      
    
    </summary>
    
    
      <category term="Google" scheme="https://shineboy2013.github.com/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 2128 Remove All Ones With Row and Column Flips</title>
    <link href="https://shineboy2013.github.com/2022/02/16/leetcode-2128-remove-all-ones-with-row-and-column-flips/"/>
    <id>https://shineboy2013.github.com/2022/02/16/leetcode-2128-remove-all-ones-with-row-and-column-flips/</id>
    <published>2022-02-17T03:23:00.458Z</published>
    <updated>2022-02-17T03:26:03.012Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/remove-all-ones-with-row-and-column-flips/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>You are given an <code>m x n</code> binary matrix <code>grid</code>.<br><br>In one operation, you can choose <strong>any</strong> row or column and flip each value in that row or column (i.e., changing all <code>0</code>‘s to <code>1</code>‘s, and all <code>1</code>‘s to <code>0</code>‘s).<br><br>Return <code>true</code> <em>if it is possible to remove all</em> <code>1</code><em>‘s from</em> <code>grid</code> using <strong>any</strong> number of operations or <code>false</code> otherwise.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2022/01/03/image-20220103191300-1.png" alt=""><br><br><pre><strong>Input:</strong> grid = [[0,1,0],[1,0,1],[0,1,0]]<br><strong>Output:</strong> true<br><strong>Explanation:</strong> One possible way to remove all 1’s from grid is to:<br>- Flip the middle row<br>- Flip the middle column<br></pre><br><br><strong>Example 2:</strong><br><br><img src="https://assets.leetcode.com/uploads/2022/01/03/image-20220103181204-7.png" alt=""><br><br><pre><strong>Input:</strong> grid = [[1,1,0],[0,0,0],[0,0,0]]<br><strong>Output:</strong> false<br><strong>Explanation:</strong> It is impossible to remove all 1’s from grid.<br></pre><br><br><strong>Example 3:</strong><br><br><img src="https://assets.leetcode.com/uploads/2022/01/03/image-20220103181224-8.png" alt=""><br><br><pre><strong>Input:</strong> grid = [[0]]<br><strong>Output:</strong> true<br><strong>Explanation:</strong> There are no 1’s in grid.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>m == grid.length</code></em>   <code>n == grid[i].length</code><br><em>   <code>1 &lt;= m, n &lt;= 300</code></em>   <code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>给定一个矩阵，每次可以flip一行或一列，求是否可以令矩阵变成全0</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>从例子找规律，<br>010和010属于一种类型<br>010和101也是同一种，每一行必须符合任何一种类型才是解</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeOnes</span><span class="params">(self, grid: List[List[int]])</span> -&gt; bool:</span></span><br><span class="line">row_patten, row_pattern_invert = grid[<span class="number">0</span>], [<span class="number">1</span> - n <span class="keyword">for</span> n <span class="keyword">in</span> grid[<span class="number">0</span>]]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(grid)):</span><br><span class="line"><span class="keyword">if</span> grid[i] != row_patten <span class="keyword">and</span> grid[i] != row_pattern_invert:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n<sup>2</sup>)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/remove-all-ones-with-row-and-column-flips/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/s
      
    
    </summary>
    
    
      <category term="Math" scheme="https://shineboy2013.github.com/tags/Math/"/>
    
      <category term="Google" scheme="https://shineboy2013.github.com/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 843 Guess the Word</title>
    <link href="https://shineboy2013.github.com/2022/02/16/leetcode-843-guess-the-word/"/>
    <id>https://shineboy2013.github.com/2022/02/16/leetcode-843-guess-the-word/</id>
    <published>2022-02-17T02:54:15.165Z</published>
    <updated>2022-02-17T03:04:48.287Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/guess-the-word/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>This is an <strong><em>interactive problem</em></strong>.<br><br>You are given an array of <strong>unique</strong> strings <code>wordlist</code> where <code>wordlist[i]</code> is <code>6</code> letters long, and one word in this list is chosen as <code>secret</code>.<br><br>You may call <code>Master.guess(word)</code> to guess a word. The guessed word should have type <code>string</code> and must be from the original list with <code>6</code> lowercase letters.<br><br>This function returns an <code>integer</code> type, representing the number of exact matches (value and position) of your guess to the <code>secret</code> word. Also, if your guess is not in the given wordlist, it will return <code>-1</code> instead.<br><br>For each test case, you have exactly <code>10</code> guesses to guess the word. At the end of any number of calls, if you have made <code>10</code> or fewer calls to <code>Master.guess</code> and at least one of these guesses was <code>secret</code>, then you pass the test case.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> secret = “acckzz”, wordlist = [“acckzz”,”ccbazz”,”eiowzz”,”abcczz”], numguesses = 10<br><strong>Output:</strong> You guessed the secret word correctly.<br><strong>Explanation:</strong><br>master.guess(“aaaaaa”) returns -1, because “aaaaaa” is not in wordlist.<br>master.guess(“acckzz”) returns 6, because “acckzz” is secret and has all 6 matches.<br>master.guess(“ccbazz”) returns 3, because “ccbazz” has 3 matches.<br>master.guess(“eiowzz”) returns 2, because “eiowzz” has 2 matches.<br>master.guess(“abcczz”) returns 4, because “abcczz” has 4 matches.<br>We made 5 calls to master.guess and one of them was the secret, so we pass the test case.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> secret = “hamada”, wordlist = [“hamada”,”khaled”], numguesses = 10<br><strong>Output:</strong> You guessed the secret word correctly.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= wordlist.length &lt;= 100</code></em>   <code>wordlist[i].length == 6</code><br><em>   <code>wordlist[i]</code> consist of lowercase English letters.</em>   All the strings of <code>wordlist</code> are <strong>unique</strong>.<br><em>   <code>secret</code> exists in <code>wordlist</code>.</em>   <code>numguesses == 10</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>给定单词列表，每个单词长度为6， 其中一个为答案，每次猜一个单词。给一个API会告诉你猜的单词有多少位命中(位置,数值), 求是否可以10次内猜对</p><h3 id="暴力法解题思路："><a href="#暴力法解题思路：" class="headerlink" title="暴力法解题思路："></a><strong>暴力法解题思路：</strong></h3><p>较直观的解法是抽第一个单词出来，然后call API, 然后再filter wordlist使得新的单词列表里的单词的命中位数也是一样的。每轮缩少范围。</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findSecretWord2</span><span class="params">(self, wordlist, master)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">guess = wordlist[<span class="number">0</span>]</span><br><span class="line">res = master.guess(guess)</span><br><span class="line">wordlist = [w <span class="keyword">for</span> w <span class="keyword">in</span> wordlist <span class="keyword">if</span> self.match(w, guess) == res]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">match</span><span class="params">(self, w1, w2)</span>:</span></span><br><span class="line"><span class="keyword">return</span> sum(i == j <span class="keyword">for</span> i, j <span class="keyword">in</span> zip(w1, w2))</span><br></pre></td></tr></table></figure></li></ol><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p><hr><h3 id="统计频率算法II解题思路-推荐-："><a href="#统计频率算法II解题思路-推荐-：" class="headerlink" title="统计频率算法II解题思路(推荐)："></a><strong>统计频率算法II解题思路(推荐)：</strong></h3><p>上述方法跟单词个数有关，如果很多的话，就会超过10次。考虑单词长度为6，而可以猜10次。考虑用26字母存储法，也就是统计频率。统计每位的频率，然后将频率作为这一位的分数，求每个单词的总分。<br>一定要选择单词列表中的某个单词去猜，如果不在列表中返回为-1，这个信息没有任何作用。<br>选择总分最高的去猜，原理是它最具代表性，这样可以快速排除很多单词，有点类似于二分法。反之，若用频率低的单词，也就只能排除一个单词。</p><h3 id="Python代码：-1"><a href="#Python代码：-1" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findSecretWord</span><span class="params">(self, wordlist, master)</span>:</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">char_to_count = [collections.Counter(w[i] <span class="keyword">for</span> w <span class="keyword">in</span> wordlist) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>)]</span><br><span class="line">guess = max(wordlist, key=<span class="keyword">lambda</span> w: sum(char_to_count[i][char] <span class="keyword">for</span> i, char <span class="keyword">in</span> enumerate(w)))</span><br><span class="line">res = master.guess(guess)</span><br><span class="line">wordlist = [w <span class="keyword">for</span> w <span class="keyword">in</span> wordlist <span class="keyword">if</span> self.match(w, guess) == res]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">match</span><span class="params">(self, w1, w2)</span>:</span></span><br><span class="line"><span class="keyword">return</span> sum(i == j <span class="keyword">for</span> i, j <span class="keyword">in</span> zip(w1, w2))</span><br></pre></td></tr></table></figure><h3 id="算法分析：-1"><a href="#算法分析：-1" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/guess-the-word/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;Thi
      
    
    </summary>
    
    
      <category term="Math" scheme="https://shineboy2013.github.com/tags/Math/"/>
    
      <category term="Google" scheme="https://shineboy2013.github.com/tags/Google/"/>
    
      <category term="Interactive" scheme="https://shineboy2013.github.com/tags/Interactive/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 833 Find And Replace in String</title>
    <link href="https://shineboy2013.github.com/2022/02/16/leetcode-833-find-and-replace-in-string/"/>
    <id>https://shineboy2013.github.com/2022/02/16/leetcode-833-find-and-replace-in-string/</id>
    <published>2022-02-16T23:28:45.137Z</published>
    <updated>2022-02-16T23:35:08.478Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/find-and-replace-in-string/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>You are given a <strong>0-indexed</strong> string <code>s</code> that you must perform <code>k</code> replacement operations on. The replacement operations are given as three <strong>0-indexed</strong> parallel arrays, <code>indices</code>, <code>sources</code>, and <code>targets</code>, all of length <code>k</code>.<br><br>To complete the <code>i&lt;sup&gt;th&lt;/sup&gt;</code> replacement operation:<br><br>1.  Check if the <strong>substring</strong> <code>sources[i]</code> occurs at index <code>indices[i]</code> in the <strong>original string</strong> <code>s</code>.<br>2.  If it does not occur, <strong>do nothing</strong>.<br>3.  Otherwise if it does occur, <strong>replace</strong> that substring with <code>targets[i]</code>.<br><br>For example, if <code>s = &quot;&lt;u&gt;ab&lt;/u&gt;cd&quot;</code>, <code>indices[i] = 0</code>, <code>sources[i] = &quot;ab&quot;</code>, and <code>targets[i] = &quot;eee&quot;</code>, then the result of this replacement will be <code>&quot;&lt;u&gt;eee&lt;/u&gt;cd&quot;</code>.<br><br>All replacement operations must occur <strong>simultaneously</strong>, meaning the replacement operations should not affect the indexing of each other. The testcases will be generated such that the replacements will <strong>not overlap</strong>.<br><br><em>   For example, a testcase with <code>s = &quot;abc&quot;</code>, <code>indices = [0, 1]</code>, and <code>sources = [&quot;ab&quot;,&quot;bc&quot;]</code> will not be generated because the <code>&quot;ab&quot;</code> and <code>&quot;bc&quot;</code> replacements overlap.<br><br>Return <em>the <strong>resulting string</strong> after performing all replacement operations on</em> <code>s</code>.<br><br>A <strong>substring</strong> is a contiguous sequence of characters in a string.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/06/12/833-ex1.png" alt=""><br><br><pre><strong>Input:</strong> s = “abcd”, indices = [0, 2], sources = [“a”, “cd”], targets = [“eee”, “ffff”]<br><strong>Output:</strong> “eeebffff”<br><strong>Explanation:</strong><br>“a” occurs at index 0 in s, so we replace it with “eee”.<br>“cd” occurs at index 2 in s, so we replace it with “ffff”.<br></pre><br><br><strong>Example 2:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/06/12/833-ex2-1.png" alt=""><br><br><pre><strong>Input:</strong> s = “abcd”, indices = [0, 2], sources = [“ab”,”ec”], targets = [“eee”,”ffff”]<br><strong>Output:</strong> “eeecd”<br><strong>Explanation:</strong><br>“ab” occurs at index 0 in s, so we replace it with “eee”.<br>“ec” does not occur at index 2 in s, so we do nothing.<br></pre><br><br><strong>Constraints:</strong></em>   <code>1 &lt;= s.length &lt;= 1000</code><br><em>   <code>k == indices.length == sources.length == targets.length</code></em>   <code>1 &lt;= k &lt;= 100</code><br><em>   <code>0 &lt;= indexes[i] &lt; s.length</code></em>   <code>1 &lt;= sources[i].length, targets[i].length &lt;= 50</code><br><em>   <code>s</code> consists of only lowercase English letters.</em>   <code>sources[i]</code> and <code>targets[i]</code> consist of only lowercase English letters.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>整洁题。找到位置，然后验证，最后替换</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>N/A</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>i是循环外的变量，所以poplate index_dict注意不能重名</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findReplaceString</span><span class="params">(self, s: str, indices: List[int], sources: List[str], targets: List[str])</span> -&gt; str:</span></span><br><span class="line">res = <span class="string">''</span></span><br><span class="line">index_dict = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> _i, _n <span class="keyword">in</span> enumerate(indices):</span><br><span class="line">index_dict[_n] = _i <span class="comment"># 0 -&gt; 0, 2 -&gt; 1</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(s):</span><br><span class="line"><span class="keyword">if</span> i <span class="keyword">in</span> index_dict <span class="keyword">and</span> s[i:i + len(sources[index_dict[i]])] == sources[index_dict[i]]:</span><br><span class="line">res += targets[index_dict[i]]</span><br><span class="line">i += len(sources[index_dict[i]])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">res += s[i]</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/find-and-replace-in-string/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div
      
    
    </summary>
    
    
      <category term="String" scheme="https://shineboy2013.github.com/tags/String/"/>
    
      <category term="Google" scheme="https://shineboy2013.github.com/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 2007 Find Original Array From Doubled Array</title>
    <link href="https://shineboy2013.github.com/2022/02/16/leetcode-2007-find-original-array-from-doubled-array/"/>
    <id>https://shineboy2013.github.com/2022/02/16/leetcode-2007-find-original-array-from-doubled-array/</id>
    <published>2022-02-16T20:54:39.600Z</published>
    <updated>2022-02-16T20:59:32.115Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/find-original-array-from-doubled-array/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>An integer array <code>original</code> is transformed into a <strong>doubled</strong> array <code>changed</code> by appending <strong>twice the value</strong> of every element in <code>original</code>, and then randomly <strong>shuffling</strong> the resulting array.<br><br>Given an array <code>changed</code>, return <code>original</code> <em>if</em> <code>changed</code> <em>is a <strong>doubled</strong> array. If</em> <code>changed</code> <em>is not a <strong>doubled</strong> array, return an empty array. The elements in</em> <code>original</code> <em>may be returned in <strong>any</strong> order</em>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> changed = [1,3,4,2,6,8]<br><strong>Output:</strong> [1,3,4]<br><strong>Explanation:</strong> One possible original array could be [1,3,4]:<br>- Twice the value of 1 is 1 <em> 2 = 2.<br>- Twice the value of 3 is 3 </em> 2 = 6.<br>- Twice the value of 4 is 4 <em> 2 = 8.<br>Other original arrays could be [4,3,1] or [3,1,4].<br></em></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> changed = [6,3,0,1]<br><strong>Output:</strong> []<br><strong>Explanation:</strong> changed is not a doubled array.<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> changed = [1]<br><strong>Output:</strong> []<br><strong>Explanation:</strong> changed is not a doubled array.<br></pre><br><br><strong>Constraints:</strong>   <code>1 &lt;= changed.length &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code><br>*   <code>0 &lt;= changed[i] &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>给定一个数组，求这个数组是否可以分成两部分，后一部分的每个元素是否前一部分某元素的两倍</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>由最大值容易确定它的一半是否在数组中。所以排序后由大到小遍历。注意数组元素可能相等，所以不能用visited set来记录已用过的数，val_to_index也不支持重复，只有val_to_count支持</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>用val_to_count，注意遍历时候就要减去，不要进入if才减去</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findOriginalArray</span><span class="params">(self, changed: List[int])</span> -&gt; List[int]:</span></span><br><span class="line"><span class="keyword">if</span> len(changed) % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> []</span><br><span class="line">changed.sort()</span><br><span class="line">res = []</span><br><span class="line">val_to_count = collections.Counter(changed)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(len(changed))):</span><br><span class="line"><span class="keyword">if</span> val_to_count[changed[i]] == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">val_to_count[changed[i]] -= <span class="number">1</span> <span class="comment"># not in  if statement</span></span><br><span class="line"><span class="keyword">if</span> changed[i] / <span class="number">2</span> <span class="keyword">in</span> val_to_count <span class="keyword">and</span> val_to_count[changed[i] / <span class="number">2</span>] &gt; <span class="number">0</span>:</span><br><span class="line">val_to_count[changed[i] / <span class="number">2</span>] -= <span class="number">1</span></span><br><span class="line">res.append(int(changed[i] / <span class="number">2</span>))</span><br><span class="line"><span class="keyword">return</span> [] <span class="keyword">if</span> len(res) * <span class="number">2</span> != len(changed) <span class="keyword">else</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(nlogn)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/find-original-array-from-doubled-array/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/stro
      
    
    </summary>
    
    
      <category term="Hash Table" scheme="https://shineboy2013.github.com/tags/Hash-Table/"/>
    
      <category term="Greedy" scheme="https://shineboy2013.github.com/tags/Greedy/"/>
    
      <category term="Google" scheme="https://shineboy2013.github.com/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1146 Snapshot Array</title>
    <link href="https://shineboy2013.github.com/2022/02/16/leetcode-1146-snapshot-array/"/>
    <id>https://shineboy2013.github.com/2022/02/16/leetcode-1146-snapshot-array/</id>
    <published>2022-02-16T19:20:59.715Z</published>
    <updated>2022-02-16T19:55:55.408Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/snapshot-array/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Implement a SnapshotArray that supports the following interface:<br><br><em>   <code>SnapshotArray(int length)</code> initializes an array-like data structure with the given length.  <strong>Initially, each element equals 0</strong>.</em>   <code>void set(index, val)</code> sets the element at the given <code>index</code> to be equal to <code>val</code>.<br><em>   <code>int snap()</code> takes a snapshot of the array and returns the <code>snap_id</code>: the total number of times we called <code>snap()</code> minus <code>1</code>.</em>   <code>int get(index, snap_id)</code> returns the value at the given <code>index</code>, at the time we took the snapshot with the given <code>snap_id</code><br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> [“SnapshotArray”,”set”,”snap”,”set”,”get”]<br>[[3],[0,5],[],[0,6],[0,0]]<br><strong>Output:</strong> [null,null,0,null,5]<br><strong>Explanation:</strong><br>SnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3<br>snapshotArr.set(0,5);  // Set array[0] = 5<br>snapshotArr.snap();  // Take a snapshot, return snap_id = 0<br>snapshotArr.set(0,6);<br>snapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5</pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= length &lt;= 50000</code></em>   At most <code>50000</code> calls will be made to <code>set</code>, <code>snap</code>, and <code>get</code>.<br><em>   <code>0 &lt;= index &lt; length</code></em>   <code>0 &lt;= snap_id &lt;</code>(the total number of times we call <code>snap()</code>)<br>*   <code>0 &lt;= val &lt;= 10^9</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>设计一个数据结构支持数组的快照</p><h3 id="Binary-Search解题思路-推荐-："><a href="#Binary-Search解题思路-推荐-：" class="headerlink" title="Binary Search解题思路(推荐)："></a><strong>Binary Search解题思路(推荐)：</strong></h3><p>暴力法是每次快照时候，将当时的数组的所有值存入dict中，key为(snap_id, index), value为数组值，得到MLE<br>后来考虑用二分法优化snap，将数值跟前值不同才存入历史记录，但得到TLE，应该是因为snap时间太长，因为要遍历整个数组<br>所以应该将存入历史这一步放在set中，每次值改变才存入历史记录，虽然一个snap_id可能会存入多值，大部分是不需要，因为同一个snap_id应该取最新值，但这样设计费了空间，省了时间。</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>历史记录为3d数组，第一维为数组index, 第二维为所有历史记录，第三维为每一个记录为[snap_id, value]。由于数组初始值为0，所以初始历史记录为[-1, 0]</li><li>snap_id和题目要求的id差1，比如第一次call snap为0，但是之前的snap应该为-1</li><li>最容易错的在于二分法，要先将snap_id + 1，比如[-1, 0], [0, 5], [0, 6], [0, 2], [1, 1], [1, 4]…找snap_id = 0的值也就是要找最后的，所以先加1，找到[1, 1]再下标减1</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnapshotArray</span><span class="params">(TestCases)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, length: int)</span>:</span></span><br><span class="line">        self.snap_id = <span class="number">0</span></span><br><span class="line">        self.history = [[[<span class="number">-1</span>, <span class="number">0</span>]] <span class="keyword">for</span> _ <span class="keyword">in</span> range(length)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, index: int, val: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.history[index].append([self.snap_id, val])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">snap</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        self.snap_id += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.snap_id - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, index: int, snap_id: int)</span> -&gt; int:</span></span><br><span class="line">        last_snap_id = bisect.bisect(self.history[index], [snap_id + <span class="number">1</span>]) - <span class="number">1</span> <span class="comment"># remember snap + 1</span></span><br><span class="line">        <span class="keyword">return</span> self.history[index][last_snap_id][<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>get时间复杂度为<code>O(logn)</code>，空间复杂度<code>O(n)</code>, 数组某值n更改次数  </p><hr><h3 id="暴力法算法II解题思路-不推荐-："><a href="#暴力法算法II解题思路-不推荐-：" class="headerlink" title="暴力法算法II解题思路(不推荐)："></a><strong>暴力法算法II解题思路(不推荐)：</strong></h3><h3 id="Python代码：-1"><a href="#Python代码：-1" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, length: int)</span>:</span></span><br><span class="line">self.ary = [<span class="number">0</span>] * length</span><br><span class="line">self.snap_id = <span class="number">-1</span></span><br><span class="line">self.idx_snap_to_val = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, index: int, val: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">self.ary[index] = val</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snap</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">self.snap_id += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i, n <span class="keyword">in</span> enumerate(self.ary):</span><br><span class="line">self.idx_snap_to_val[(i, self.snap_id)] = self.ary[i]</span><br><span class="line"><span class="keyword">return</span> self.snap_id</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, index: int, snap_id: int)</span> -&gt; int:</span></span><br><span class="line"><span class="keyword">return</span> self.idx_snap_to_val[(index, snap_id)]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/snapshot-array/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;Imp
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Binary Search" scheme="https://shineboy2013.github.com/tags/Binary-Search/"/>
    
      <category term="Google" scheme="https://shineboy2013.github.com/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1937 Maximum Number of Points with Cost</title>
    <link href="https://shineboy2013.github.com/2022/02/16/leetcode-1937-maximum-number-of-points-with-cost/"/>
    <id>https://shineboy2013.github.com/2022/02/16/leetcode-1937-maximum-number-of-points-with-cost/</id>
    <published>2022-02-16T18:08:59.144Z</published>
    <updated>2022-02-16T18:23:03.039Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/maximum-number-of-points-with-cost/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>You are given an <code>m x n</code> integer matrix <code>points</code> (<strong>0-indexed</strong>). Starting with <code>0</code> points, you want to <strong>maximize</strong> the number of points you can get from the matrix.<br><br>To gain points, you must pick one cell in <strong>each row</strong>. Picking the cell at coordinates <code>(r, c)</code> will <strong>add</strong> <code>points[r][c]</code> to your score.<br><br>However, you will lose points if you pick a cell too far from the cell that you picked in the previous row. For every two adjacent rows <code>r</code> and <code>r + 1</code> (where <code>0 &lt;= r &lt; m - 1</code>), picking cells at coordinates <code>(r, c&lt;sub&gt;1&lt;/sub&gt;)</code> and <code>(r + 1, c&lt;sub&gt;2&lt;/sub&gt;)</code> will <strong>subtract</strong> <code>abs(c&lt;sub&gt;1&lt;/sub&gt; - c&lt;sub&gt;2&lt;/sub&gt;)</code> from your score.<br><br>Return <em>the <strong>maximum</strong> number of points you can achieve</em>.<br><br><code>abs(x)</code> is defined as:<br><br><em>   <code>x</code> for <code>x &gt;= 0</code>.</em>   <code>-x</code> for <code>x &lt; 0</code>.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/07/12/screenshot-2021-07-12-at-13-40-26-diagram-drawio-diagrams-net.png" alt=""><br><br><pre><strong>Input:</strong> points = [[1,2,3],[1,5,1],[3,1,1]]<br><strong>Output:</strong> 9<br><strong>Explanation:</strong><br>The blue cells denote the optimal cells to pick, which have coordinates (0, 2), (1, 1), and (2, 0).<br>You add 3 + 5 + 3 = 11 to your score.<br>However, you must subtract abs(2 - 1) + abs(1 - 0) = 2 from your score.<br>Your final score is 11 - 2 = 9.<br></pre><br><br><strong>Example 2:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/07/12/screenshot-2021-07-12-at-13-42-14-diagram-drawio-diagrams-net.png" alt=""><br><br><pre><strong>Input:</strong> points = [[1,5],[2,3],[4,2]]<br><strong>Output:</strong> 11<br><strong>Explanation:</strong><br>The blue cells denote the optimal cells to pick, which have coordinates (0, 1), (1, 1), and (2, 0).<br>You add 5 + 3 + 4 = 12 to your score.<br>However, you must subtract abs(1 - 1) + abs(1 - 0) = 1 from your score.<br>Your final score is 12 - 1 = 11.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>m == points.length</code></em>   <code>n == points[r].length</code><br><em>   <code>1 &lt;= m, n &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></em>   <code>1 &lt;= m * n &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code><br>*   <code>0 &lt;= points[r][c] &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>矩阵中含点数，每行取一个cell上的点数，但若两行之间的cell的列不同，要扣去列下标差，求最大点数</p><h3 id="优化DP解题思路-推荐-："><a href="#优化DP解题思路-推荐-：" class="headerlink" title="优化DP解题思路(推荐)："></a><strong>优化DP解题思路(推荐)：</strong></h3><p>求数值的最大值，容易想到用DP，dp[i][j]定义为每个cell的累计最大点数，递归式为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = max(dp[i - 1][k] - abs(j - k)) + points[i][j], k = 0..len(dp[0])</span><br></pre></td></tr></table></figure></p><p>复杂度为n立方。</p><p>如果没有扣除的规则，其实就是找上一行的最大值，但要考虑下标，考虑怎么移除这个限制，若将上一个某个cell搬到跟目前列，就是dp[i - 1][k] - (j - k), 所以可以提前计算，<br>而且有绝对值，所以类似于LeetCode 042 Trapping Rain Water拆分为向左向右最大值：<br>left[i]是该行第i个cell，上一行在该列左边的cell的累计最大点数(已扣除)，同理<br>right[i]是该行第i个cell，上一行在该列右边的cell的累计最大点数(已扣除)</p><p>最后，上一行的最大值只能在左边或右边<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = max(left[j], right[j]) + points[i][j], k = 0..len(dp[0])</span><br></pre></td></tr></table></figure></p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>left[j], right[j]的引入</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxPoints</span><span class="params">(self, points: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">m, n = len(points), len(points[<span class="number">0</span>])</span><br><span class="line">dp = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">dp[<span class="number">0</span>][j] = points[<span class="number">0</span>][j]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, m):</span><br><span class="line">left, right = [<span class="number">0</span>] * n, [<span class="number">0</span>] * n</span><br><span class="line">left[<span class="number">0</span>], right[<span class="number">-1</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">left[j] = max(dp[i - <span class="number">1</span>][j], left[j - <span class="number">1</span>] - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(n - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">right[j] = max(dp[i - <span class="number">1</span>][j], right[j + <span class="number">1</span>] - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">dp[i][j] = points[i][j] + max(left[j], right[j])</span><br><span class="line"><span class="keyword">return</span> max(dp[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n<sup>2</sup>)</code>，空间复杂度<code>O(n<sup>2</sup>)</code>  </p><hr><h3 id="暴力DP算法II解题思路-不推荐-："><a href="#暴力DP算法II解题思路-不推荐-：" class="headerlink" title="暴力DP算法II解题思路(不推荐)："></a><strong>暴力DP算法II解题思路(不推荐)：</strong></h3><h3 id="Python代码：-1"><a href="#Python代码：-1" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxPoints2</span><span class="params">(self, points: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">dp = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(points[<span class="number">0</span>]))] <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(points))]</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(dp[<span class="number">0</span>])):</span><br><span class="line">dp[<span class="number">0</span>][j] = points[<span class="number">0</span>][j]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(dp)):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(dp[<span class="number">0</span>])):</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(len(dp[<span class="number">0</span>])):</span><br><span class="line">dp[i][j] = max(dp[i][j], dp[i - <span class="number">1</span>][k] + points[i][j] - abs(j - k))</span><br><span class="line"><span class="keyword">return</span> max(dp[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><h3 id="算法分析：-1"><a href="#算法分析：-1" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n<sup>3</sup>)</code>，空间复杂度<code>O(n<sup>2</sup>)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/maximum-number-of-points-with-cost/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;
      
    
    </summary>
    
    
      <category term="Dynamic Programming" scheme="https://shineboy2013.github.com/tags/Dynamic-Programming/"/>
    
      <category term="Google" scheme="https://shineboy2013.github.com/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1293 Shortest Path in a Grid with Obstacles Elimination</title>
    <link href="https://shineboy2013.github.com/2022/02/16/leetcode-1293-shortest-path-in-a-grid-with-obstacles-elimination/"/>
    <id>https://shineboy2013.github.com/2022/02/16/leetcode-1293-shortest-path-in-a-grid-with-obstacles-elimination/</id>
    <published>2022-02-16T09:26:58.956Z</published>
    <updated>2022-02-16T09:40:07.171Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>You are given an <code>m x n</code> integer matrix <code>grid</code> where each cell is either <code>0</code> (empty) or <code>1</code> (obstacle). You can move up, down, left, or right from and to an empty cell in <strong>one step</strong>.<br><br>Return <em>the minimum number of <strong>steps</strong> to walk from the upper left corner</em> <code>(0, 0)</code> <em>to the lower right corner</em> <code>(m - 1, n - 1)</code> <em>given that you can eliminate <strong>at most</strong></em> <code>k</code> <em>obstacles</em>. If it is not possible to find such walk return <code>-1</code>.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/09/30/short1-grid.jpg" alt=""><br><br><pre><strong>Input:</strong> grid = [[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]], k = 1<br><strong>Output:</strong> 6<br><strong>Explanation:</strong><br>The shortest path without eliminating any obstacle is 10.<br>The shortest path with one obstacle elimination at position (3,2) is 6. Such path is (0,0) -&gt; (0,1) -&gt; (0,2) -&gt; (1,2) -&gt; (2,2) -&gt; <strong>(3,2)</strong> -&gt; (4,2).<br></pre><br><br><strong>Example 2:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/09/30/short2-grid.jpg" alt=""><br><br><pre><strong>Input:</strong> grid = [[0,1,1],[1,1,1],[1,0,0]], k = 1<br><strong>Output:</strong> -1<br><strong>Explanation:</strong> We need to eliminate at least two obstacles to find such a walk.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>m == grid.length</code></em>   <code>n == grid[i].length</code><br><em>   <code>1 &lt;= m, n &lt;= 40</code></em>   <code>1 &lt;= k &lt;= m * n</code><br><em>   <code>grid[i][j]</code> is either <code>0</code> <strong>or</strong> <code>1</code>.</em>   <code>grid[0][0] == grid[m - 1][n - 1] == 0</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>矩阵从左上走到右下，但含障碍，现在可以移除k个，使得路径最短，求最短路径</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>求最短路径用BFS，但此题难点在于distance跟路径有关，比如某一格可能属于不同的路径，此时它的distance会不同，所以distance不能global，必须作为state传到下一个迭代<br>同样的情况也在visited中存在，visited跟路径相关，而这一格跟k相关，这一格可以被属于不同的k的路径访问，所以visited应该加入k</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>visited是(x, y, k), queue是(x, y, k, dis)</li><li>(x, y, k - 1)跟visited比较，而不是(x, y, k)。下一个节点的条件为eleminatios &gt;= 0</li><li>若k过多会LTE, 因为广度会过大。这是用曼哈顿距离来剪枝。左上到右下距离为m - n + 2这肯定是最短距离，若k大于等于这个数，也就是可以移除曼哈顿路径上的所有障碍。</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shortestPath</span><span class="params">(self, grid: List[List[int]], k: int)</span> -&gt; int:</span></span><br><span class="line">m, n = len(grid), len(grid[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">if</span> k &gt;= m + n - <span class="number">2</span>: <span class="comment"># TLE</span></span><br><span class="line"><span class="keyword">return</span> m + n - <span class="number">2</span></span><br><span class="line"></span><br><span class="line">queue = collections.deque([(<span class="number">0</span>, <span class="number">0</span>, k, <span class="number">0</span>)]) <span class="comment"># x, y, k, distance</span></span><br><span class="line">visited = set([(<span class="number">0</span>, <span class="number">0</span>, k)]) <span class="comment"># include k</span></span><br><span class="line"><span class="keyword">while</span> queue:</span><br><span class="line">_x, _y, _k, _dis = queue.popleft()</span><br><span class="line"><span class="keyword">if</span> _x == m - <span class="number">1</span> <span class="keyword">and</span> _y == n - <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> _dis</span><br><span class="line"><span class="keyword">for</span> _dx, _dy <span class="keyword">in</span> OFFSET:</span><br><span class="line">x, y = _x + _dx, _y + _dy</span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= m <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt;= n:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">eliminations = _k - <span class="number">1</span> <span class="keyword">if</span> grid[x][y] == <span class="number">1</span> <span class="keyword">else</span> _k</span><br><span class="line"><span class="keyword">if</span> (x, y, eliminations) <span class="keyword">not</span> <span class="keyword">in</span> visited <span class="keyword">and</span> eliminations &gt;= <span class="number">0</span>:</span><br><span class="line">queue.append((x, y, eliminations, _dis + <span class="number">1</span>))</span><br><span class="line">visited.add((x, y, eliminations))</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(nmk)</code>，空间复杂度<code>O(mnk)</code>, 某个cell都可能被访问k次，因为最多有k条路径  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCo
      
    
    </summary>
    
    
      <category term="Matrix" scheme="https://shineboy2013.github.com/tags/Matrix/"/>
    
      <category term="Breadth-first Search" scheme="https://shineboy2013.github.com/tags/Breadth-first-Search/"/>
    
      <category term="Google" scheme="https://shineboy2013.github.com/tags/Google/"/>
    
  </entry>
  
</feed>
