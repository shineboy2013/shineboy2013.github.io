<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KK&#39;s blog</title>
  
  <subtitle>每天积累多一些</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shineboy2013.github.com/"/>
  <updated>2021-12-29T06:48:00.227Z</updated>
  <id>https://shineboy2013.github.com/</id>
  
  <author>
    <name>KK Shum</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 1650 Lowest Common Ancestor of a Binary Tree III</title>
    <link href="https://shineboy2013.github.com/2021/12/28/lee-1650/"/>
    <id>https://shineboy2013.github.com/2021/12/28/lee-1650/</id>
    <published>2021-12-29T06:35:19.634Z</published>
    <updated>2021-12-29T06:48:00.227Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iii/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given two nodes of a binary tree <code>p</code> and <code>q</code>, return <em>their lowest common ancestor (LCA)</em>.<br><br>Each node will have a reference to its parent node. The definition for <code>Node</code> is below:<br><br><pre>class Node {<br>    public int val;<br>    public Node left;<br>    public Node right;<br>    public Node parent;<br>}<br></pre><br><br>According to the <strong><a href="https://en.wikipedia.org/wiki/Lowest_common_ancestor" target="_blank" rel="noopener">definition of LCA on Wikipedia</a></strong>: “The lowest common ancestor of two nodes p and q in a tree T is the lowest node that has both p and q as descendants (where we allow <strong>a node to be a descendant of itself</strong>).”<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png" alt=""><br><br><pre><strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1<br><strong>Output:</strong> 3<br><strong>Explanation:</strong> The LCA of nodes 5 and 1 is 3.<br></pre><br><br><strong>Example 2:</strong><br><br><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png" alt=""><br><br><pre><strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4<br><strong>Output:</strong> 5<br><strong>Explanation:</strong> The LCA of nodes 5 and 4 is 5 since a node can be a descendant of itself according to the LCA definition.<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> root = [1,2], p = 1, q = 2<br><strong>Output:</strong> 1<br></pre><br><br><strong>Constraints:</strong><br><br><em>   The number of nodes in the tree is in the range <code>[2, 10&lt;sup&gt;5&lt;/sup&gt;]</code>.</em>   <code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= Node.val &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code><br><em>   All <code>Node.val</code> are <strong>unique</strong>.</em>   <code>p != q</code><br>*   <code>p</code> and <code>q</code> exist in the tree.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求带父节点的树中的两个节点的LCA。节点值唯一，且两输入节点不同，且一定存在</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>N/A</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>某一个节点的左右父节点存入set中，另一节点的每个父节点在set中找     </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, p: <span class="string">'Node'</span>, q: <span class="string">'Node'</span>)</span> -&gt; 'Node':</span></span><br><span class="line">parent_set = set()</span><br><span class="line">it = p</span><br><span class="line"><span class="keyword">while</span> it:</span><br><span class="line">parent_set.add(it)</span><br><span class="line">it = it.parent</span><br><span class="line">it = q</span><br><span class="line"><span class="keyword">while</span> it:</span><br><span class="line"><span class="keyword">if</span> it <span class="keyword">in</span> parent_set:</span><br><span class="line"><span class="keyword">return</span> it</span><br><span class="line">it = it.parent</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n + m)</code>，空间复杂度<code>O(n)</code>，n和m为所有父亲路径长  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;
      
    
    </summary>
    
    
      <category term="Hash Table" scheme="https://shineboy2013.github.com/tags/Hash-Table/"/>
    
      <category term="Facebook" scheme="https://shineboy2013.github.com/tags/Facebook/"/>
    
      <category term="Tree" scheme="https://shineboy2013.github.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 238 Product of Array Except Self</title>
    <link href="https://shineboy2013.github.com/2021/12/28/lee-238/"/>
    <id>https://shineboy2013.github.com/2021/12/28/lee-238/</id>
    <published>2021-12-29T06:10:30.854Z</published>
    <updated>2021-12-29T06:47:15.114Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/product-of-array-except-self/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given an integer array <code>nums</code>, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is equal to the product of all the elements of</em> <code>nums</code> <em>except</em> <code>nums[i]</code>.<br><br>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.<br><br>You must write an algorithm that runs in <code>O(n)</code> time and without using the division operation.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> nums = [1,2,3,4]<br><strong>Output:</strong> [24,12,8,6]<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> nums = [-1,1,0,-3,3]<br><strong>Output:</strong> [0,0,9,0,0]<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>2 &lt;= nums.length &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></em>   <code>-30 &lt;= nums[i] &lt;= 30</code><br><em>   The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.<br><br><strong>Follow up:</strong> Can you solve the problem in <code>O(1)</code>extra space complexity? (The output array <em>*does not</em></em> count as extra space for space complexity analysis.)<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求每个数对应的结果： 数组出自己外全部相乘  </p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>累计思想</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>两轮计算，从左到右，再从右到左，用res数组作为临时计算结果。从左到右，计算res[i] = num[0] x nums[i - 1], 从右到左类似   </li><li>res初始值为1，因为从左到右是跳过第0个值的，而从右到左中res[i] *= product，若初始为0，结果res[i] = 0   </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">productExceptSelf</span><span class="params">(self, nums: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">n = len(nums)</span><br><span class="line">res, product = [<span class="number">1</span>] * n, nums[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">res[i] = product <span class="comment"># [1, 1]</span></span><br><span class="line">product *= nums[i]</span><br><span class="line">product = nums[<span class="number">-1</span>] <span class="comment"># 2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">res[i] *= product <span class="comment"># [2, 1]</span></span><br><span class="line">product *= nums[i]</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/product-of-array-except-self/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;d
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Facebook" scheme="https://shineboy2013.github.com/tags/Facebook/"/>
    
      <category term="Prefix Sum" scheme="https://shineboy2013.github.com/tags/Prefix-Sum/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 037 Sudoku Solver</title>
    <link href="https://shineboy2013.github.com/2021/12/28/lee-037/"/>
    <id>https://shineboy2013.github.com/2021/12/28/lee-037/</id>
    <published>2021-12-28T21:54:39.986Z</published>
    <updated>2021-12-29T05:45:59.136Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/sudoku-solver/" target="_blank" rel="noopener">LeetCode</a></strong></p><div>Write a program to solve a Sudoku puzzle by filling the empty cells. A sudoku solution must satisfy <strong>all of the following rules</strong>: 1. Each of the digits <code>1-9</code> must occur exactly once in each row. 2. Each of the digits <code>1-9</code> must occur exactly once in each column. 3. Each of the digits <code>1-9</code> must occur exactly once in each of the 9 <code>3x3</code> sub-boxes of the grid. The <code>&#39;.&#39;</code> character indicates empty cells. <strong>Example 1:</strong> <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt=""><br><br><pre><strong>Input:</strong> board = [[“5”,”3”,”.”,”.”,”7”,”.”,”.”,”.”,”.”],[“6”,”.”,”.”,”1”,”9”,”5”,”.”,”.”,”.”],[“.”,”9”,”8”,”.”,”.”,”.”,”.”,”6”,”.”],[“8”,”.”,”.”,”.”,”6”,”.”,”.”,”.”,”3”],[“4”,”.”,”.”,”8”,”.”,”3”,”.”,”.”,”1”],[“7”,”.”,”.”,”.”,”2”,”.”,”.”,”.”,”6”],[“.”,”6”,”.”,”.”,”.”,”.”,”2”,”8”,”.”],[“.”,”.”,”.”,”4”,”1”,”9”,”.”,”.”,”5”],[“.”,”.”,”.”,”.”,”8”,”.”,”.”,”7”,”9”]]<br><strong>Output:</strong> [[“5”,”3”,”4”,”6”,”7”,”8”,”9”,”1”,”2”],[“6”,”7”,”2”,”1”,”9”,”5”,”3”,”4”,”8”],[“1”,”9”,”8”,”3”,”4”,”2”,”5”,”6”,”7”],[“8”,”5”,”9”,”7”,”6”,”1”,”4”,”2”,”3”],[“4”,”2”,”6”,”8”,”5”,”3”,”7”,”9”,”1”],[“7”,”1”,”3”,”9”,”2”,”4”,”8”,”5”,”6”],[“9”,”6”,”1”,”5”,”3”,”7”,”2”,”8”,”4”],[“2”,”8”,”7”,”4”,”1”,”9”,”6”,”3”,”5”],[“3”,”4”,”5”,”2”,”8”,”6”,”1”,”7”,”9”]]<br><strong>Explanation:</strong> The input board is shown above and the only valid solution is shown below:<br><br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png" alt=""><br></pre><br><br><strong>Constraints:</strong> <em> <code>board.length == 9</code> </em> <code>board[i].length == 9</code> <em> <code>board[i][j]</code> is a digit or <code>&#39;.&#39;</code>. </em> It is <strong>guaranteed</strong> that the input board has only one solution.</div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>日本游戏。需要保证每行每列每个9个方块的数是1-9里唯一。</p><h3 id="Global-dict解题思路-推荐-："><a href="#Global-dict解题思路-推荐-：" class="headerlink" title="Global dict解题思路(推荐)："></a><strong>Global dict解题思路(推荐)：</strong></h3><p>DFS。利用DFS模板</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>用三种全局性dict(row, col, box)来记录所有已填的数，方便dfs时候迅速判断是否合法。这是比算法II优胜的地方。Python中不存在list of set只能用list of dict： [collections.defaultdict(int) for _ in range(len(board))]  </li><li><strong>初始化要将棋局上所有已有的数加入到dict中</strong>。一开始是dfs时候才加，但这样填的数不知道后面的格是否已经存在。题意保证有解，所以这些数不需验证重复。    </li><li>for循环是1-9是数字但棋盘是字符，所以要<strong>字符和数字转化</strong>，选择统一转成数字，不转的话dict会实效。  </li><li>box_dict的id转换： i // 3 * 3 + j // 3 </li><li>终止条件为start_x == len(board) - 1 and start_y == len(board[0])   </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solveSudoku</span><span class="params">(self, board: List[List[str]])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">row_dict = [collections.defaultdict(int) <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(board))] <span class="comment"># remember</span></span><br><span class="line">col_dict = [collections.defaultdict(int) <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(board))]</span><br><span class="line">box_dict = [collections.defaultdict(int) <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(board))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(board)):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(board[<span class="number">0</span>])):</span><br><span class="line"><span class="keyword">if</span> board[i][j] != <span class="string">'.'</span>:</span><br><span class="line">self.add_to_dict(board, i, j, row_dict, col_dict, box_dict) <span class="comment"># rememeber</span></span><br><span class="line"><span class="keyword">return</span> self.dfs(board, <span class="number">0</span>, <span class="number">0</span>, row_dict, col_dict, box_dict)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, board, start_x, start_y, row_dict, col_dict, box_dict)</span>:</span></span><br><span class="line"><span class="keyword">if</span> start_x == len(board) - <span class="number">1</span> <span class="keyword">and</span> start_y == len(board[<span class="number">0</span>]):</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">if</span> start_y == len(board[<span class="number">0</span>]):</span><br><span class="line">start_x += <span class="number">1</span></span><br><span class="line">start_y = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> board[start_x][start_y] != <span class="string">'.'</span>:</span><br><span class="line"><span class="keyword">return</span> self.dfs(board, start_x, start_y + <span class="number">1</span>, row_dict, col_dict, box_dict) <span class="comment"># guarantee solution</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> self.is_valid(board, k, start_x, start_y, row_dict, col_dict, box_dict):</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">board[start_x][start_y] = str(k)</span><br><span class="line">self.add_to_dict(board, start_x, start_y, row_dict, col_dict, box_dict)</span><br><span class="line"><span class="keyword">if</span> self.dfs(board, start_x, start_y + <span class="number">1</span>, row_dict, col_dict, box_dict):</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">self.remove_from_dict(board, start_x, start_y, row_dict, col_dict, box_dict)</span><br><span class="line">board[start_x][start_y] = <span class="string">'.'</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_to_dict</span><span class="params">(self, board, i, j, row_dict, col_dict, box_dict)</span>:</span></span><br><span class="line">row_dict[i][int(board[i][j])] = <span class="number">1</span> <span class="comment"># remember</span></span><br><span class="line">col_dict[j][int(board[i][j])] = <span class="number">1</span></span><br><span class="line">box_dict[i // <span class="number">3</span> * <span class="number">3</span> + j // <span class="number">3</span>][int(board[i][j])] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_from_dict</span><span class="params">(self, board, i, j, row_dict, col_dict, box_dict)</span>:</span></span><br><span class="line">row_dict[i].pop(int(board[i][j]))</span><br><span class="line">col_dict[j].pop(int(board[i][j]))</span><br><span class="line">box_dict[i // <span class="number">3</span> * <span class="number">3</span> + j // <span class="number">3</span>].pop(int(board[i][j]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_valid</span><span class="params">(self, board, k, i, j, row_dict, col_dict, box_dict)</span>:</span></span><br><span class="line"><span class="keyword">if</span> k <span class="keyword">in</span> row_dict[i] <span class="keyword">or</span> k <span class="keyword">in</span> col_dict[j] <span class="keyword">or</span> k <span class="keyword">in</span> box_dict[i // <span class="number">3</span> * <span class="number">3</span> + j // <span class="number">3</span>]: <span class="comment"># remember</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>三重循环，时间复杂度为<code>O(9<sup>n*n</sup>)</code>，空间复杂度<code>O(n)</code>，n为边长  </p><hr><h3 id="常量空间算法II解题思路："><a href="#常量空间算法II解题思路：" class="headerlink" title="常量空间算法II解题思路："></a><strong>常量空间算法II解题思路：</strong></h3><p>我一开始的方法，每填一位就验证。</p><h3 id="Python代码：-1"><a href="#Python代码：-1" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solveSudoku2</span><span class="params">(self, board: List[List[str]])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line"><span class="keyword">return</span> self.dfs2(board, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs2</span><span class="params">(self, board, start_x, start_y)</span>:</span></span><br><span class="line"><span class="keyword">if</span> start_x == len(board) - <span class="number">1</span> <span class="keyword">and</span> start_y == len(board[<span class="number">0</span>]):</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">if</span> start_y == len(board[<span class="number">0</span>]):</span><br><span class="line">start_x += <span class="number">1</span></span><br><span class="line">start_y = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> board[start_x][start_y] != <span class="string">'.'</span>:</span><br><span class="line"><span class="keyword">return</span> self.dfs2(board, start_x, start_y + <span class="number">1</span>) <span class="comment"># guarantee solution</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">if self.is_sudoku(board, start_x, start_y):</span></span><br><span class="line"><span class="string">return self.dfs(board, start_x, start_y + 1)</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">return False</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">board[start_x][start_y] = str(k)</span><br><span class="line"><span class="keyword">if</span> self.is_sudoku2(board, start_x, start_y) <span class="keyword">and</span> self.dfs2(board, start_x, start_y + <span class="number">1</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">board[start_x][start_y] = <span class="string">'.'</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_sudoku2</span><span class="params">(self, board, x, y)</span>:</span></span><br><span class="line"><span class="comment"># row, # col, # square</span></span><br><span class="line"><span class="keyword">if</span> self.is_valid(board, x, <span class="number">0</span>, x, len(board[<span class="number">0</span>]) - <span class="number">1</span>) <span class="keyword">and</span> self.is_valid(board, <span class="number">0</span>, y, len(board) - <span class="number">1</span>, y) <span class="keyword">and</span> \</span><br><span class="line">self.is_valid(board, x // <span class="number">3</span> * <span class="number">3</span>, y // <span class="number">3</span> * <span class="number">3</span>, x // <span class="number">3</span> * <span class="number">3</span> + <span class="number">2</span>, y // <span class="number">3</span> * <span class="number">3</span> + <span class="number">2</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_valid</span><span class="params">(self, board, start_x, start_y, end_x, end_y)</span>:</span></span><br><span class="line">num_set = set()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(start_x, end_x + <span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(start_y, end_y + <span class="number">1</span>):</span><br><span class="line">val = board[i][j]</span><br><span class="line"><span class="keyword">if</span> val == <span class="string">'.'</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> int(val) <span class="keyword">in</span> num_set:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">num_set.add(int(val))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="算法分析：-1"><a href="#算法分析：-1" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>三重循环，时间复杂度为<code>O(81<sup>n*n</sup>)</code>，空间复杂度<code>O(1)</code>，n为边长  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/sudoku-solver/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;Write a prog
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Backtracking" scheme="https://shineboy2013.github.com/tags/Backtracking/"/>
    
      <category term="Matrix" scheme="https://shineboy2013.github.com/tags/Matrix/"/>
    
      <category term="DoorDash" scheme="https://shineboy2013.github.com/tags/DoorDash/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 871 Minimum Number of Refueling Stops</title>
    <link href="https://shineboy2013.github.com/2021/12/28/lee-871/"/>
    <id>https://shineboy2013.github.com/2021/12/28/lee-871/</id>
    <published>2021-12-28T10:25:39.285Z</published>
    <updated>2021-12-28T18:21:07.789Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/minimum-number-of-refueling-stops/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>A car travels from a starting position to a destination which is <code>target</code> miles east of the starting position.<br><br>There are gas stations along the way. The gas stations are represented as an array <code>stations</code> where <code>stations[i] = [position&lt;sub&gt;i&lt;/sub&gt;, fuel&lt;sub&gt;i&lt;/sub&gt;]</code> indicates that the <code>i&lt;sup&gt;th&lt;/sup&gt;</code> gas station is <code>position&lt;sub&gt;i&lt;/sub&gt;</code> miles east of the starting position and has <code>fuel&lt;sub&gt;i&lt;/sub&gt;</code> liters of gas.<br><br>The car starts with an infinite tank of gas, which initially has <code>startFuel</code> liters of fuel in it. It uses one liter of gas per one mile that it drives. When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.<br><br>Return <em>the minimum number of refueling stops the car must make in order to reach its destination</em>. If it cannot reach the destination, return <code>-1</code>.<br><br>Note that if the car reaches a gas station with <code>0</code> fuel left, the car can still refuel there. If the car reaches the destination with <code>0</code> fuel left, it is still considered to have arrived.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> target = 1, startFuel = 1, stations = []<br><strong>Output:</strong> 0<br><strong>Explanation:</strong> We can reach the target without refueling.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> target = 100, startFuel = 1, stations = [[10,100]]<br><strong>Output:</strong> -1<br><strong>Explanation:</strong> We can not reach the target (or even the first gas station).<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]<br><strong>Output:</strong> 2<br><strong>Explanation:</strong> We start with 10 liters of fuel.<br>We drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.<br>Then, we drive from position 10 to position 60 (expending 50 liters of fuel),<br>and refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.<br>We made 2 refueling stops along the way, so we return 2.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= target, startFuel &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code></em>   <code>0 &lt;= stations.length &lt;= 500</code><br><em>   <code>0 &lt;= position&lt;sub&gt;i&lt;/sub&gt; &lt;= position&lt;sub&gt;i+1&lt;/sub&gt; &lt; target</code></em>   <code>1 &lt;= fuel&lt;sub&gt;i&lt;/sub&gt; &lt; 10&lt;sup&gt;9&lt;/sup&gt;</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>其最小加油次数使得能到达目标  </p><h3 id="Heap解题思路-推荐-："><a href="#Heap解题思路-推荐-：" class="headerlink" title="Heap解题思路(推荐)："></a><strong>Heap解题思路(推荐)：</strong></h3><p>由于是重叠区间题，考虑用heap。求最小值，所以用最大堆。heap存的油数。  </p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>每到一个加油站，先将油预存到heap中。startFuel为到达某个站后的剩余油数，若startFuel为负，从heap中取油，且累计加油次数。  </li><li>用heap模板，遍历数组也就是加油站。  </li><li>若加完油后，仍为负数，返回-1。</li><li>因为要计算target是否能达到，所以不妨<strong>将target加入到stations</strong>中，这样startFuel的计算可以包括target     </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minRefuelStops</span><span class="params">(self, target: int, startFuel: int, stations: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">heap, res, prev_pos = [], <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">stations.append([target, <span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> pos, fuel <span class="keyword">in</span> stations:</span><br><span class="line">startFuel -= pos - prev_pos</span><br><span class="line"><span class="keyword">while</span> heap <span class="keyword">and</span> startFuel &lt; <span class="number">0</span>:</span><br><span class="line">startFuel += -heapq.heappop(heap)</span><br><span class="line">res += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> startFuel &lt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">heapq.heappush(heap, -fuel)</span><br><span class="line">prev_pos = pos</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(nlogn)</code>，空间复杂度<code>O(n)</code> </p><hr><h3 id="DP算法II解题思路："><a href="#DP算法II解题思路：" class="headerlink" title="DP算法II解题思路："></a><strong>DP算法II解题思路：</strong></h3><p>一开始考虑用jump game，但此题可以在同一层加多次油。比如start fuel有100 mi，而加油站有3个，所以同一层可以加3次油。所以层数和加油次数不是一个概念。<br>既然是最值考虑另一种方法DP。这题有两个难点:<br>第一个难点是DP式： dp不采用题目的最小加油次数，考虑jump game的分析，转化成dp[i]为停i个站加油能达到的最远距离。或者这样思考，若定义走到第n个站需要最小加油次数，这个n颗粒度不够细，可以换成miles，不如将下标和数值互换。<br>第二个难点是递归式。首先知道假设dp[2]能到达的范围内有一个加油站，加油后dp[3] = dp[2] + 该油站的油数。递归式为：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i] = max&#123;dp[i-1] + stations[i-1][1]&#125;, dp[i-1] &gt;= stations[i-1][0], stations[i..n]</span><br></pre></td></tr></table></figure><p>有个前提条件是dp[2]必须能达到当前的加油站。比如要更新dp[3]从任意两个加油站dp[2] + 加油站[i]可能获得。还可能是从dp[2] + 加油站[i+1]获得，如此类推，要试完stations[i..n]。<br><strong>dp值从后往前更新</strong>，因为当前加油站在后方。   </p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项：-1"><a href="#注意事项：-1" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>dp定义和递归式     </li></ol><h3 id="Python代码：-1"><a href="#Python代码：-1" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dp[i] = max&#123;dp[i-1] + stations[i-1][1]&#125;, dp[i-1] &gt;= stations[i-1][0], stations[i..n]</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minRefuelStops</span><span class="params">(self, target: int, startFuel: int, stations: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">dp = [startFuel] + [<span class="number">0</span>] * len(stations)</span><br><span class="line"><span class="keyword">for</span> i, (pos, fuel) <span class="keyword">in</span> enumerate(stations):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(i, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line"><span class="keyword">if</span> dp[j] &gt;= pos:</span><br><span class="line">dp[j + <span class="number">1</span>] = max(dp[j + <span class="number">1</span>], dp[j] + fuel)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, miles <span class="keyword">in</span> enumerate(dp):</span><br><span class="line"><span class="keyword">if</span> miles &gt;= target:</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="算法分析：-1"><a href="#算法分析：-1" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n<sup>2</sup>)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-number-of-refueling-stops/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Dynamic Programming" scheme="https://shineboy2013.github.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 909 Snakes and Ladders</title>
    <link href="https://shineboy2013.github.com/2021/12/27/lee-909/"/>
    <id>https://shineboy2013.github.com/2021/12/27/lee-909/</id>
    <published>2021-12-27T21:50:38.164Z</published>
    <updated>2021-12-28T03:48:03.037Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/snakes-and-ladders/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>You are given an <code>n x n</code> integer matrix <code>board</code> where the cells are labeled from <code>1</code> to <code>n&lt;sup&gt;2&lt;/sup&gt;</code> in a <a href="https://en.wikipedia.org/wiki/Boustrophedon" target="_blank" rel="noopener"><strong>Boustrophedon style</strong></a> starting from the bottom left of the board (i.e. <code>board[n - 1][0]</code>) and alternating direction each row.<br><br>You start on square <code>1</code> of the board. In each move, starting from square <code>curr</code>, do the following:<br><br><em>   Choose a destination square <code>next</code> with a label in the range <code>[curr + 1, min(curr + 6, n&lt;sup&gt;2&lt;/sup&gt;)]</code>.    </em>   This choice simulates the result of a standard <strong>6-sided die roll</strong>: i.e., there are always at most 6 destinations, regardless of the size of the board.<br><em>   If <code>next</code> has a snake or ladder, you <strong>must</strong> move to the destination of that snake or ladder. Otherwise, you move to <code>next</code>.</em>   The game ends when you reach the square <code>n&lt;sup&gt;2&lt;/sup&gt;</code>.<br><br>A board square on row <code>r</code> and column <code>c</code> has a snake or ladder if <code>board[r][c] != -1</code>. The destination of that snake or ladder is <code>board[r][c]</code>. Squares <code>1</code> and <code>n&lt;sup&gt;2&lt;/sup&gt;</code> do not have a snake or ladder.<br><br>Note that you only take a snake or ladder at most once per move. If the destination to a snake or ladder is the start of another snake or ladder, you do <strong>not</strong> follow the subsequent snake or ladder.<br><br><em>   For example, suppose the board is <code>[[-1,4],[-1,3]]</code>, and on the first move, your destination square is <code>2</code>. You follow the ladder to square <code>3</code>, but do <strong>not</strong> follow the subsequent ladder to <code>4</code>.<br><br>Return <em>the least number of moves required to reach the square</em> <code>n&lt;sup&gt;2&lt;/sup&gt;</code><em>. If it is not possible to reach the square, return</em> <code>-1</code>.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2018/09/23/snakes.png" alt=""><br><br><pre><strong>Input:</strong> board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]<br><strong>Output:</strong> 4<br><strong>Explanation:</strong><br>In the beginning, you start at square 1 (at row 5, column 0).<br>You decide to move to square 2 and must take the ladder to square 15.<br>You then decide to move to square 17 and must take the snake to square 13.<br>You then decide to move to square 14 and must take the ladder to square 35.<br>You then decide to move to square 36, ending the game.<br>This is the lowest possible number of moves to reach the last square, so return 4.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> board = [[-1,-1],[-1,3]]<br><strong>Output:</strong> 1<br></pre><br><br><strong>Constraints:</strong></em>   <code>n == board.length == board[i].length</code><br><em>   <code>2 &lt;= n &lt;= 20</code></em>   <code>grid[i][j]</code> is either <code>-1</code> or in the range <code>[1, n&lt;sup&gt;2&lt;/sup&gt;]</code>.<br>*   The squares labeled <code>1</code> and <code>n&lt;sup&gt;2&lt;/sup&gt;</code> do not have any ladders or snakes.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>二维版上每格label从1到n^2, 从左到右或从右到左(梅花间竹)，从下到上。每次走1-6步，格上可能有梯子和蛇，梯子是快进，蛇是回退直接到达目标格。求从1到n^2所需要步数。始点和目标不含梯子和蛇。</p><h3 id="BFS解题思路-推荐-："><a href="#BFS解题思路-推荐-：" class="headerlink" title="BFS解题思路(推荐)："></a><strong>BFS解题思路(推荐)：</strong></h3><p>求最值两个方法：DP和BFS。一开始考虑用DP，但状态很复杂，因为存在回退，这样回退后要重新计算回退之后的DP值。<br>由于此题没有方向性而且似jump game，所以考虑用DP。</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>题意：对于梯子和蛇，它不能停留在梯子和蛇的起点，只能够停在终点，所以梯子和蛇的起点到1的距离为无穷大。其实可以留在起点，比如一个格同时是蛇的终点和梯子的起点。题意表明不能在同一步中两次用梯子或蛇。   </li><li>根据上述题意，程序中对应是<strong>如碰到儿子中有梯子和蛇的起点，完全忽略它，立刻转换成终点，也就是不入列，不如visited，不计算距离，完全当其透明</strong>。开始犯的错误是将其入列，出列才计算梯子终点。此算法仍然可以满足上述题意，此时梯子的起点会被加入到visited和distance，queue中，因为它确实停在那里了。  </li><li>visited在计算完梯子和蛇的终点后才处理，而不是进入for loop后  </li><li>neighbor不能超过n，达不到目标返回-1  </li><li>另一个难点在label转成坐标从而查找是否有梯子和蛇</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snakesAndLadders</span><span class="params">(self, board: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">n = len(board) * len(board)</span><br><span class="line">queue = collections.deque([<span class="number">1</span>])</span><br><span class="line">visited = set([<span class="number">1</span>])</span><br><span class="line">distance = &#123;<span class="number">1</span>: <span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">while</span> queue:</span><br><span class="line">node = queue.popleft()</span><br><span class="line"><span class="keyword">if</span> node == n:</span><br><span class="line"><span class="keyword">return</span> distance[node]</span><br><span class="line"><span class="keyword">for</span> neighbor <span class="keyword">in</span> range(node + <span class="number">1</span>, node + <span class="number">7</span>):</span><br><span class="line"><span class="keyword">if</span> neighbor &gt; n:  <span class="comment"># remember</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">board_x, board_y = self.get_board_cell(len(board), neighbor)</span><br><span class="line">dest_label = board[board_x][board_y]</span><br><span class="line">next_step = dest_label <span class="keyword">if</span> dest_label != <span class="number">-1</span> <span class="keyword">else</span> neighbor</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> next_step <span class="keyword">in</span> visited: <span class="comment"># remember to put it after dest_label</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">queue.append(next_step)</span><br><span class="line">visited.add(next_step)</span><br><span class="line">distance[next_step] = distance[node] + <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>  <span class="comment"># remember</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_board_cell</span><span class="params">(self, n, label)</span>:</span> <span class="comment"># 6, 6</span></span><br><span class="line">label -= <span class="number">1</span> <span class="comment"># rememeber</span></span><br><span class="line">row_id = label // n <span class="comment"># 0</span></span><br><span class="line">col_id = label % n</span><br><span class="line"><span class="keyword">return</span> n - <span class="number">1</span> - row_id, n - <span class="number">1</span> - col_id <span class="keyword">if</span> row_id % <span class="number">2</span> == <span class="number">1</span> <span class="keyword">else</span> col_id</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n<sup>2</sup>)</code>，空间复杂度<code>O(n<sup>2</sup>)</code>  </p><p>另一种优化是只入最远的节点，类似于jump game。</p><h3 id="Python代码：-1"><a href="#Python代码：-1" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snakesAndLadders</span><span class="params">(self, board: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">    n = len(board) * len(board)</span><br><span class="line">queue = collections.deque([<span class="number">1</span>])</span><br><span class="line">visited = set([<span class="number">1</span>])</span><br><span class="line">distance = &#123;<span class="number">1</span>: <span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">while</span> queue:</span><br><span class="line">node = queue.popleft()</span><br><span class="line"><span class="keyword">if</span> node == n:</span><br><span class="line"><span class="keyword">return</span> distance[node]</span><br><span class="line">max_non_jump = node</span><br><span class="line"><span class="keyword">for</span> neighbor <span class="keyword">in</span> range(node + <span class="number">1</span>, node + <span class="number">7</span>):</span><br><span class="line"><span class="keyword">if</span> neighbor &gt; n:  <span class="comment"># remember</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">board_x, board_y = self.get_board_cell(len(board), neighbor)</span><br><span class="line">dest_label = board[board_x][board_y]</span><br><span class="line">next_step = dest_label <span class="keyword">if</span> dest_label != <span class="number">-1</span> <span class="keyword">else</span> neighbor</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> next_step <span class="keyword">in</span> visited:  <span class="comment"># remember to put it after dest_label</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> dest_label != <span class="number">-1</span>:</span><br><span class="line">queue.append(next_step)</span><br><span class="line">visited.add(next_step)</span><br><span class="line">distance[next_step] = distance[node] + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">max_non_jump = next_step</span><br><span class="line"><span class="keyword">if</span> max_non_jump <span class="keyword">in</span> visited:  <span class="comment"># remember to put it after dest_label</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">queue.append(max_non_jump)</span><br><span class="line">visited.add(max_non_jump)</span><br><span class="line">distance[max_non_jump] = distance[node] + <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>  <span class="comment"># remember</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_board_cell</span><span class="params">(self, n, label)</span>:</span> <span class="comment"># 6, 6</span></span><br><span class="line">label -= <span class="number">1</span> <span class="comment"># rememeber</span></span><br><span class="line">row_id = label // n <span class="comment"># 0</span></span><br><span class="line">col_id = label % n</span><br><span class="line"><span class="keyword">return</span> n - <span class="number">1</span> - row_id, n - <span class="number">1</span> - col_id <span class="keyword">if</span> row_id % <span class="number">2</span> == <span class="number">1</span> <span class="keyword">else</span> col_id</span><br></pre></td></tr></table></figure><h3 id="算法分析：-1"><a href="#算法分析：-1" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n<sup>2</sup>/6)</code>，空间复杂度<code>O(n<sup>2</sup>/6)</code>  </p><hr><h3 id="DP算法II解题思路-不推荐-："><a href="#DP算法II解题思路-不推荐-：" class="headerlink" title="DP算法II解题思路(不推荐)："></a><strong>DP算法II解题思路(不推荐)：</strong></h3><p>非常容易错，且效率更低，需要回退重新计算dp值。 dp[i] + 1 &lt; dp[dest_label]保证不会在无限回退，i = dest_label - 1要在break前做，而不是更前，否二影响dp[dest_label]计算</p><h3 id="Python代码：-2"><a href="#Python代码：-2" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snakesAndLadders_dp</span><span class="params">(self, board: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">N = len(board) * len(board) + <span class="number">1</span></span><br><span class="line">dp = [float(<span class="string">'inf'</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">dp[<span class="number">1</span>] = <span class="number">0</span> <span class="comment"># remember</span></span><br><span class="line"><span class="comment"># i is label id</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="comment"># for i in range(2, N):</span></span><br><span class="line"><span class="keyword">while</span> i &lt; N:</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">7</span>):</span><br><span class="line"><span class="keyword">if</span> i + k &lt; N:</span><br><span class="line">board_x, board_y = self.get_board_cell(len(board), i + k)</span><br><span class="line">dest_label = board[board_x][board_y]</span><br><span class="line">next_step = dest_label <span class="keyword">if</span> dest_label != <span class="number">-1</span> <span class="keyword">else</span> i + k</span><br><span class="line"><span class="keyword">if</span> dest_label != <span class="number">-1</span>:</span><br><span class="line"><span class="keyword">if</span> dest_label &lt; i <span class="keyword">and</span> dp[i] + <span class="number">1</span> &lt; dp[dest_label]: <span class="comment"># remember </span></span><br><span class="line">dp[dest_label] = min(dp[dest_label], dp[i] + <span class="number">1</span>)</span><br><span class="line">i = dest_label - <span class="number">1</span> <span class="comment"># remember to assign at the end</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">dp[next_step] = min(dp[next_step], dp[i] + <span class="number">1</span>) <span class="comment"># remember + 1 inside min</span></span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> dp[<span class="number">-1</span>] <span class="keyword">if</span> dp[<span class="number">-1</span>] != float(<span class="string">'inf'</span>) <span class="keyword">else</span> <span class="number">-1</span> <span class="comment"># remember</span></span><br></pre></td></tr></table></figure><h3 id="算法分析：-2"><a href="#算法分析：-2" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n<sup>2</sup>)</code>，空间复杂度<code>O(n<sup>2</sup>)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/snakes-and-ladders/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Breadth-first Search" scheme="https://shineboy2013.github.com/tags/Breadth-first-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 987 Vertical Order Traversal of a Binary Tree</title>
    <link href="https://shineboy2013.github.com/2021/12/27/lee-987/"/>
    <id>https://shineboy2013.github.com/2021/12/27/lee-987/</id>
    <published>2021-12-27T20:08:31.755Z</published>
    <updated>2021-12-27T20:19:00.699Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given the <code>root</code> of a binary tree, calculate the <strong>vertical order traversal</strong> of the binary tree.<br><br>For each node at position <code>(row, col)</code>, its left and right children will be at positions <code>(row + 1, col - 1)</code> and <code>(row + 1, col + 1)</code> respectively. The root of the tree is at <code>(0, 0)</code>.<br><br>The <strong>vertical order traversal</strong> of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.<br><br>Return <em>the <strong>vertical order traversal</strong> of the binary tree</em>.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/01/29/vtree1.jpg" alt=""><br><br><pre><strong>Input:</strong> root = [3,9,20,null,null,15,7]<br><strong>Output:</strong> [[9],[3,15],[20],[7]]<br><strong>Explanation:</strong><br>Column -1: Only node 9 is in this column.<br>Column 0: Nodes 3 and 15 are in this column in that order from top to bottom.<br>Column 1: Only node 20 is in this column.<br>Column 2: Only node 7 is in this column.</pre><br><br><strong>Example 2:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/01/29/vtree2.jpg" alt=""><br><br><pre><strong>Input:</strong> root = [1,2,3,4,5,6,7]<br><strong>Output:</strong> [[4],[2],[1,5,6],[3],[7]]<br><strong>Explanation:</strong><br>Column -2: Only node 4 is in this column.<br>Column -1: Only node 2 is in this column.<br>Column 0: Nodes 1, 5, and 6 are in this column.<br>          1 is at the top, so it comes first.<br>          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.<br>Column 1: Only node 3 is in this column.<br>Column 2: Only node 7 is in this column.<br></pre><br><br><strong>Example 3:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/01/29/vtree3.jpg" alt=""><br><br><pre><strong>Input:</strong> root = [1,2,3,4,6,5,7]<br><strong>Output:</strong> [[4],[2],[1,5,6],[3],[7]]<br><strong>Explanation:</strong><br>This case is the exact same as example 2, but with nodes 5 and 6 swapped.<br>Note that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   The number of nodes in the tree is in the range <code>[1, 1000]</code>.</em>   <code>0 &lt;= Node.val &lt;= 1000</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>按列顺序打印二叉树，若列号同，同一行的节点按值排序 </p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>与<a href="https://shineboy2013.github.io/2021/12/24/lee-314/" target="_blank" rel="noopener">LeetCode 314 Binary Tree Vertical Order Traversal</a>类似，用BFS</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>一开始以为同一列的同一行的节点在queue是一个紧接一个出列。但同一行节点可能先出列col=3, col=4， col=3。而且同一列同一行的节点有多个，不止两个。所以<strong>将row_id也加入到queue节点中，row_id也加入到map中，最后遍历结果时，将同一row_id节点排序</strong>  </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verticalTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[List[int]]:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line"><span class="keyword">return</span> []</span><br><span class="line">col_to_node_list = collections.defaultdict(list)</span><br><span class="line">min_col, max_col = float(<span class="string">'inf'</span>), float(<span class="string">'-inf'</span>)</span><br><span class="line">queue = collections.deque([(root, <span class="number">0</span>, <span class="number">0</span>)])</span><br><span class="line"><span class="keyword">while</span> queue:</span><br><span class="line">node, row_id, col_id = queue.popleft()</span><br><span class="line">col_to_node_list[col_id].append((node.val, row_id))</span><br><span class="line">min_col, max_col = min(min_col, col_id), max(max_col, col_id)</span><br><span class="line"><span class="keyword">if</span> node.left:</span><br><span class="line">queue.append((node.left, row_id + <span class="number">1</span>, col_id - <span class="number">1</span>))</span><br><span class="line"><span class="keyword">if</span> node.right:</span><br><span class="line">queue.append((node.right, row_id + <span class="number">1</span>, col_id + <span class="number">1</span>))</span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(min_col, max_col + <span class="number">1</span>):</span><br><span class="line">last_row_id, same_row, same_col = <span class="number">-1</span>, [], []</span><br><span class="line"><span class="keyword">for</span> pair <span class="keyword">in</span> col_to_node_list[i]:</span><br><span class="line"><span class="keyword">if</span> last_row_id == pair[<span class="number">1</span>]:</span><br><span class="line">same_row.append(pair[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">same_col += sorted(same_row)</span><br><span class="line">same_row = [pair[<span class="number">0</span>]]</span><br><span class="line">last_row_id = pair[<span class="number">1</span>]</span><br><span class="line">same_col += sorted(same_row)</span><br><span class="line">res.append(same_col)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>，稍大于O(n), 因为同一列同一行节点要排序    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/s
      
    
    </summary>
    
    
      <category term="Facebook" scheme="https://shineboy2013.github.com/tags/Facebook/"/>
    
      <category term="Binary Tree" scheme="https://shineboy2013.github.com/tags/Binary-Tree/"/>
    
      <category term="Breadth-first Search" scheme="https://shineboy2013.github.com/tags/Breadth-first-Search/"/>
    
      <category term="Depth-first Search" scheme="https://shineboy2013.github.com/tags/Depth-first-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 453 Minimum Moves to Equal Array Elements</title>
    <link href="https://shineboy2013.github.com/2021/12/26/lee-453/"/>
    <id>https://shineboy2013.github.com/2021/12/26/lee-453/</id>
    <published>2021-12-27T07:26:35.925Z</published>
    <updated>2021-12-27T08:12:24.426Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/minimum-moves-to-equal-array-elements/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given an integer array <code>nums</code> of size <code>n</code>, return <em>the minimum number of moves required to make all array elements equal</em>.<br><br>In one move, you can increment <code>n - 1</code> elements of the array by <code>1</code>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> nums = [1,2,3]<br><strong>Output:</strong> 3<br><strong>Explanation:</strong> Only three moves are needed (remember each move increments two elements):<br>[1,2,3]  =&gt;  [2,3,3]  =&gt;  [3,4,3]  =&gt;  [4,4,4]<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> nums = [1,1,1]<br><strong>Output:</strong> 0<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>n == nums.length</code></em>   <code>1 &lt;= nums.length &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code><br><em>   <code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= nums[i] &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code></em>   The answer is guaranteed to fit in a <strong>32-bit</strong> integer.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求最小移动步数使得数组所有数相等。每次移动是将n-1个元素加1</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>最小值考虑用DP。但比较难写递归式，以[1, 2, 3]为例，值为3，现在是[1, 2, 3, 6]，由于dp[3]的最终状态为[4, 4, 4], 而最终状态加上新元素为[4, 4, 4, 9], 由6变成9是因为dp[3] = 3，表示移动了3步，新元素6，移动的3步全部参与了，所以变成9<br>由[4, 4, 4, 9], 4变9，需要5步，所以结果dp[4] = dp[3] + 5 = 8  </p><p>公式为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i + 1] = dp[i] + (nums[i] + dp[i] - equal_num)  </span><br><span class="line">equal_num = nums[i] + dp[i]</span><br></pre></td></tr></table></figure></p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>数组要排序  </li><li>equal_num初始值为nums[0]    </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minMoves</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">nums.sort()</span><br><span class="line">dp, equal_num = <span class="number">0</span>, nums[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">new_val = n + dp</span><br><span class="line">dp = dp + (n + dp - equal_num) <span class="comment"># 2</span></span><br><span class="line">equal_num = new_val <span class="comment"># 3</span></span><br><span class="line"><span class="keyword">return</span> dp</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-moves-to-equal-array-elements/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/stron
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Dynamic Programming" scheme="https://shineboy2013.github.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 926 Flip String to Monotone Increasing</title>
    <link href="https://shineboy2013.github.com/2021/12/26/lee-926/"/>
    <id>https://shineboy2013.github.com/2021/12/26/lee-926/</id>
    <published>2021-12-27T06:17:44.346Z</published>
    <updated>2021-12-27T06:43:58.192Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/flip-string-to-monotone-increasing/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>A binary string is monotone increasing if it consists of some number of <code>0</code>‘s (possibly none), followed by some number of <code>1</code>‘s (also possibly none).<br><br>You are given a binary string <code>s</code>. You can flip <code>s[i]</code> changing it from <code>0</code> to <code>1</code> or from <code>1</code> to <code>0</code>.<br><br>Return <em>the minimum number of flips to make</em> <code>s</code> <em>monotone increasing</em>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> s = “00110”<br><strong>Output:</strong> 1<br><strong>Explanation:</strong> We flip the last digit to get 00111.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> s = “010110”<br><strong>Output:</strong> 2<br><strong>Explanation:</strong> We flip to get 011111, or alternatively 000111.<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> s = “00011000”<br><strong>Output:</strong> 2<br><strong>Explanation:</strong> We flip to get 00000000.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= s.length &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></em>   <code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>01字符串中Flip其中一些将它变成00111,0和1的个数是任意。  </p><h3 id="DP解题思路-推荐-："><a href="#DP解题思路-推荐-：" class="headerlink" title="DP解题思路(推荐)："></a><strong>DP解题思路(推荐)：</strong></h3><p>求最小值考虑用BFS或者DP。BFS的复杂度可能比较大，DP定义为以s[i]为结尾的最小flip数，但由于不知道具体排列(末状态)是什么或者结尾是什么，所以比较难从子问题推导出来。<br>不妨用两个dp来计算，<br>dp为以0为结尾的最小flip数<br>dp2为以1为结尾的最小flip数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dp = dp     if s[i] = &apos;0&apos;</span><br><span class="line">   = dp + 1 if s[i] = &apos;1&apos;</span><br><span class="line">   </span><br><span class="line">dp2 = min(dp2 + 1, dp + 1)     if s[i] = &apos;0&apos;</span><br><span class="line">    = min(dp2, dp)             if s[i] = &apos;1&apos;</span><br></pre></td></tr></table></figure></p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>用Python的dp和dp2同时由前状态赋值，这样避免用临时变量     </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minFlipsMonoIncr</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">dp, dp2 = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line"><span class="keyword">if</span> s[i] == <span class="string">'0'</span>:</span><br><span class="line">dp, dp2 = dp, min(dp, dp2) + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">dp, dp2 = dp + <span class="number">1</span>, min(dp2, dp)</span><br><span class="line"><span class="keyword">return</span> min(dp, dp2)</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code> </p><hr><h3 id="presum算法II解题思路："><a href="#presum算法II解题思路：" class="headerlink" title="presum算法II解题思路："></a><strong>presum算法II解题思路：</strong></h3><p>统计1的个数，若是0同时统计从0 flip到1的个数，取两者较小为新flip数。较难理解，不推荐    </p><h3 id="Python代码：-1"><a href="#Python代码：-1" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minFlipsMonoIncr2</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">ones, flips = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line"><span class="keyword">if</span> c == <span class="string">'1'</span>:</span><br><span class="line">ones += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">flips += <span class="number">1</span></span><br><span class="line">flips = min(ones, flips)</span><br><span class="line"><span class="keyword">return</span> flips</span><br></pre></td></tr></table></figure><h3 id="算法分析：-1"><a href="#算法分析：-1" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/flip-string-to-monotone-increasing/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Amazon" scheme="https://shineboy2013.github.com/tags/Amazon/"/>
    
      <category term="Dynamic Programming" scheme="https://shineboy2013.github.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 828 Count Unique Characters of All Substrings of a Given String</title>
    <link href="https://shineboy2013.github.com/2021/12/26/lee-828/"/>
    <id>https://shineboy2013.github.com/2021/12/26/lee-828/</id>
    <published>2021-12-27T03:47:53.235Z</published>
    <updated>2021-12-27T04:48:52.041Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/count-unique-characters-of-all-substrings-of-a-given-string/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Let’s define a function <code>countUniqueChars(s)</code> that returns the number of unique characters on <code>s</code>.<br><br><em>   For example if <code>s = &quot;LEETCODE&quot;</code> then <code>&quot;L&quot;</code>, <code>&quot;T&quot;</code>, <code>&quot;C&quot;</code>, <code>&quot;O&quot;</code>, <code>&quot;D&quot;</code> are the unique characters since they appear only once in <code>s</code>, therefore <code>countUniqueChars(s) = 5</code>.<br><br>Given a string <code>s</code>, return the sum of <code>countUniqueChars(t)</code> where <code>t</code> is a substring of s.<br><br>Notice that some substrings can be repeated so in this case you have to count the repeated ones too.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> s = “ABC”<br><strong>Output:</strong> 10<br><strong>Explanation:</strong> All possible substrings are: “A”,”B”,”C”,”AB”,”BC” and “ABC”.<br>Evey substring is composed with only unique letters.<br>Sum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> s = “ABA”<br><strong>Output:</strong> 8<br><strong>Explanation:</strong> The same as example 1, except <code>countUniqueChars</code>(“ABA”) = 1.<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> s = “LEETCODE”<br><strong>Output:</strong> 92<br></pre><br><br><strong>Constraints:</strong></em>   <code>1 &lt;= s.length &lt;= 10</code><sup>5</sup><br>*   <code>s</code> consists of uppercase English letters only.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求所有子串的唯一字符的个数的总和</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>暴力法是所有子串O(n^2)，统计唯一字符个数O(n), 复杂度为O(n^3). 尝试优化统计那一步，用presum map来详见可以O(1)求得，但内存过大，仍然TLE。<br>求个个数且是字符串题，考虑用DP。此题还有点似Leetcode 003 Longest Substring Without Repeating Characters。  </p><p>写几个找规律且从简单开始，也就是没有重复<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">A: 1</span><br><span class="line">AB: 1                + 2 + 1 = 4, 1是dp[1], 2是以B结尾的2个子串有两个B，最后一个1表示AB串中有一个A  </span><br><span class="line">       B</span><br><span class="line">      AB        </span><br><span class="line">ABC： 4           + 3 + 2 + 1 = 10， 4是dp[2], 2是以C结尾的3个子串有三个C，2个B，1个A. Delta = 6  </span><br><span class="line">        C</span><br><span class="line">       BC</span><br><span class="line">      ABC  </span><br><span class="line">ABCB:10      + 2 + 3 + 0 + 1 = 16, 同理是上一个DP结果和从后往前每个字母在新子串中的唯一数。由于出现重复，B从4个变成2个，前一个B变成0个，其他加法项是不变的。Delta = 6 + 4 - 2 x 2 = 6 公式为Delta = Delta + 当前长度 - (i - 上一个重复元素下标) x 2    </span><br><span class="line">         B</span><br><span class="line">        CB</span><br><span class="line">       BCB</span><br><span class="line">      ABCB  </span><br><span class="line">ABCBA:16 + 4 + 2 + 3 + 0 + 0 = 25 = 16 + delta 验证公式delta = 6 + 5 - 1 x 2 = 9    </span><br><span class="line">          A </span><br><span class="line">         BA</span><br><span class="line">        CBA</span><br><span class="line">       BCBA</span><br><span class="line">      ABCBA </span><br><span class="line">ABCBAC:25 + 3 + 4 + 2 + 0 + 0 + 0 = 34 = 25 + delta 验证公式delta = 9 + 6 - (6 - 3) x 2 = 9    </span><br><span class="line">           C </span><br><span class="line">          AC </span><br><span class="line">         BAC</span><br><span class="line">        CBAC</span><br><span class="line">       BCBAC</span><br><span class="line">      ABCBAC </span><br><span class="line">ABCBACA:34 + 2 + 3 + 0 + 2 + 0 + 0 + 0 = 41 = 34 + delta 验证公式delta = 9 + 7 - (7 - 2) x 2 = 6不匹配，新A本来是7个变成2个，而次新A上一轮有4个最多减4个并不能减5个，所以x 2是不对的。      </span><br><span class="line">            A </span><br><span class="line">           CA </span><br><span class="line">          ACA </span><br><span class="line">         BACA</span><br><span class="line">        CBACA</span><br><span class="line">       BCBACA</span><br><span class="line">      ABCBACA</span><br></pre></td></tr></table></figure></p><p>公式为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Delta = Delta + 当前长度 - (i - 上一个重复元素下标) - 上个重复元素对应的加法项delta[j]</span><br><span class="line">Res += Delta</span><br></pre></td></tr></table></figure></p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>delta_sum为上一轮的增加的唯一元素个数<br>delta[i]为下标为i的元素的唯一个数的增量  </p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>公式中减去重复个数不能乘以2，因为上一个重复元素的增量可能不够减     </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uniqueLetterString</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">res, delta_sum, delta, char_to_index = <span class="number">0</span>, <span class="number">0</span>, [<span class="number">0</span>] * len(s), collections.defaultdict(<span class="keyword">lambda</span>: <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">cur_len = i + <span class="number">1</span></span><br><span class="line">delta[i] = cur_len</span><br><span class="line"><span class="keyword">if</span> s[i] <span class="keyword">in</span> char_to_index:</span><br><span class="line">delta[i] -= char_to_index[s[i]] + <span class="number">1</span></span><br><span class="line">delta_sum += delta[i] - delta[char_to_index[s[i]]]</span><br><span class="line">delta[char_to_index[s[i]]] = <span class="number">0</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">delta_sum += delta[i]</span><br><span class="line">res += delta_sum</span><br><span class="line">char_to_index[s[i]] = i</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p><hr><h3 id="两个Map算法II解题思路-推荐-："><a href="#两个Map算法II解题思路-推荐-：" class="headerlink" title="两个Map算法II解题思路(推荐)："></a><strong>两个Map算法II解题思路(推荐)：</strong></h3><p>公式中上个重复元素对应的加法项也就是上个重复元素与上上个重复元素的距离，所以引入另一个map来记录，避免用delta[i]，算法更加简单。  </p><h3 id="Python代码：-1"><a href="#Python代码：-1" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uniqueLetterString</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">last_char_to_index = collections.defaultdict(<span class="keyword">lambda</span>: <span class="number">-1</span>)</span><br><span class="line">last_last_char_to_index = collections.defaultdict(<span class="keyword">lambda</span>: <span class="number">-1</span>)</span><br><span class="line">res, delta = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(s):</span><br><span class="line">delta += i - last_char_to_index[c] - (last_char_to_index[c] - last_last_char_to_index[c])</span><br><span class="line">last_last_char_to_index[c] = last_char_to_index[c]</span><br><span class="line">last_char_to_index[c] = i</span><br><span class="line">res += delta</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析：-1"><a href="#算法分析：-1" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/count-unique-characters-of-all-substrings-of-a-given-string/&quot; target=&quot;_blank&quot; rel=&quot;noopene
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Hash Table" scheme="https://shineboy2013.github.com/tags/Hash-Table/"/>
    
      <category term="Amazon" scheme="https://shineboy2013.github.com/tags/Amazon/"/>
    
      <category term="Math" scheme="https://shineboy2013.github.com/tags/Math/"/>
    
      <category term="Dynamic Programming" scheme="https://shineboy2013.github.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 071 Simplify Path</title>
    <link href="https://shineboy2013.github.com/2021/12/26/lee-071/"/>
    <id>https://shineboy2013.github.com/2021/12/26/lee-071/</id>
    <published>2021-12-27T00:49:13.607Z</published>
    <updated>2021-12-27T00:54:04.972Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/simplify-path/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given a string <code>path</code>, which is an <strong>absolute path</strong> (starting with a slash <code>&#39;/&#39;</code>) to a file or directory in a Unix-style file system, convert it to the simplified <strong>canonical path</strong>.<br><br>In a Unix-style file system, a period <code>&#39;.&#39;</code> refers to the current directory, a double period <code>&#39;..&#39;</code> refers to the directory up a level, and any multiple consecutive slashes (i.e. <code>&#39;//&#39;</code>) are treated as a single slash <code>&#39;/&#39;</code>. For this problem, any other format of periods such as <code>&#39;...&#39;</code> are treated as file/directory names.<br><br>The <strong>canonical path</strong> should have the following format:<br><br><em>   The path starts with a single slash <code>&#39;/&#39;</code>.</em>   Any two directories are separated by a single slash <code>&#39;/&#39;</code>.<br><em>   The path does not end with a trailing <code>&#39;/&#39;</code>.</em>   The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period <code>&#39;.&#39;</code> or double period <code>&#39;..&#39;</code>)<br><br>Return <em>the simplified <strong>canonical path</strong></em>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> path = “/home/“<br><strong>Output:</strong> “/home”<br><strong>Explanation:</strong> Note that there is no trailing slash after the last directory name.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> path = “/../“<br><strong>Output:</strong> “/“<br><strong>Explanation:</strong> Going one level up from the root directory is a no-op, as the root level is the highest level you can go.<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> path = “/home//foo/“<br><strong>Output:</strong> “/home/foo”<br><strong>Explanation:</strong> In the canonical path, multiple consecutive slashes are replaced by a single one.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= path.length &lt;= 3000</code></em>   <code>path</code> consists of English letters, digits, period <code>&#39;.&#39;</code>, slash <code>&#39;/&#39;</code> or <code>&#39;_&#39;</code>.<br>*   <code>path</code> is a valid absolute Unix path.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>简化路径，遇.表示当前目录不做事，遇..表示到上一个目录</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>路径类似于括号题，利用括号题模板</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>edge case /../ 表示若stack为空，就不pop。if stack不能加到elif token == ‘..’中  </li><li>遇到..返回到上层目录      </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simplifyPath</span><span class="params">(self, path: str)</span> -&gt; str:</span></span><br><span class="line">path += <span class="string">'/'</span></span><br><span class="line">token, stack = <span class="string">''</span>, []</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> path:</span><br><span class="line"><span class="keyword">if</span> c == <span class="string">'/'</span>:</span><br><span class="line"><span class="keyword">if</span> token == <span class="string">'.'</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">elif</span> token == <span class="string">'..'</span>:</span><br><span class="line"><span class="keyword">if</span> stack: <span class="comment"># remember</span></span><br><span class="line">stack.pop()</span><br><span class="line"><span class="keyword">elif</span> token:</span><br><span class="line">stack.append(token)</span><br><span class="line">token = <span class="string">''</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">token += c</span><br><span class="line"><span class="keyword">return</span> <span class="string">'/'</span> + <span class="string">'/'</span>.join(stack)</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/simplify-path/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;Give
      
    
    </summary>
    
    
      <category term="String" scheme="https://shineboy2013.github.com/tags/String/"/>
    
      <category term="Stack" scheme="https://shineboy2013.github.com/tags/Stack/"/>
    
      <category term="Facebook" scheme="https://shineboy2013.github.com/tags/Facebook/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 526 Beautiful Arrangement</title>
    <link href="https://shineboy2013.github.com/2021/12/26/lee-526/"/>
    <id>https://shineboy2013.github.com/2021/12/26/lee-526/</id>
    <published>2021-12-27T00:05:38.130Z</published>
    <updated>2021-12-27T00:20:51.704Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/beautiful-arrangement/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Suppose you have <code>n</code> integers labeled <code>1</code> through <code>n</code>. A permutation of those <code>n</code> integers <code>perm</code> (<strong>1-indexed</strong>) is considered a <strong>beautiful arrangement</strong> if for every <code>i</code> (<code>1 &lt;= i &lt;= n</code>), <strong>either</strong> of the following is true:<br><br><em>   <code>perm[i]</code> is divisible by <code>i</code>.</em>   <code>i</code> is divisible by <code>perm[i]</code>.<br><br>Given an integer <code>n</code>, return <em>the <strong>number</strong> of the <strong>beautiful arrangements</strong> that you can construct</em>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> n = 2<br><strong>Output:</strong> 2<br><strong>Explanation:</strong><br>The first beautiful arrangement is [1,2]:<br>    - perm[1] = 1 is divisible by i = 1<br>    - perm[2] = 2 is divisible by i = 2<br>The second beautiful arrangement is [2,1]:<br>    - perm[1] = 2 is divisible by i = 1<br>    - i = 2 is divisible by perm[2] = 1<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> n = 1<br><strong>Output:</strong> 1<br></pre><br><br><strong>Constraints:</strong><br><br>*   <code>1 &lt;= n &lt;= 15</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求数组中所有排列中下标（从1开始）和数值能整除（下标整除数值或反之）的个数</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>一开始考虑用DP，因为求个数且类似于L368 Largest Divisible Subset，但问题与子问题的具体排位有关，所以DP不可行。考虑用Stack，但数组顺序可变。<br>只能用暴力法，也就是DFS中排列求解  </p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>用排列模板，但此题不涉及具体数组。用set来记录访问过的数值而不是下标，start来记录模拟结果path中的位置    </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countArrangement</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line"><span class="keyword">return</span> self.permute(n, <span class="number">1</span>, set())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permute</span><span class="params">(self, n, start, visited)</span>:</span> <span class="comment"># 2, 1, [F,F,F]</span></span><br><span class="line"><span class="keyword">if</span> start == n + <span class="number">1</span>: <span class="comment"># remember n + 1</span></span><br><span class="line"><span class="comment">#print(path)</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">res = <span class="number">0</span> <span class="comment"># 1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n + <span class="number">1</span>): <span class="comment"># [1,3)</span></span><br><span class="line"><span class="keyword">if</span> i <span class="keyword">in</span> visited:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> i % start == <span class="number">0</span> <span class="keyword">or</span> start % i == <span class="number">0</span>:</span><br><span class="line">visited.add(i)</span><br><span class="line"><span class="comment">#path.append(i)</span></span><br><span class="line">res += self.permute(n, start + <span class="number">1</span>, visited) <span class="comment"># 2, 2, [FFT]</span></span><br><span class="line"><span class="comment">#path.pop()</span></span><br><span class="line">visited.remove(i)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(解大小)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/beautiful-arrangement/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="LinkedIn" scheme="https://shineboy2013.github.com/tags/LinkedIn/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 759 Employee Free Time</title>
    <link href="https://shineboy2013.github.com/2021/12/26/lee-759/"/>
    <id>https://shineboy2013.github.com/2021/12/26/lee-759/</id>
    <published>2021-12-26T21:44:38.256Z</published>
    <updated>2021-12-26T21:54:42.332Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/employee-free-time/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>We are given a list <code>schedule</code> of employees, which represents the working time for each employee.<br><br>Each employee has a list of non-overlapping <code>Intervals</code>, and these intervals are in sorted order.<br><br>Return the list of finite intervals representing <strong>common, positive-length free time</strong> for <em>all</em> employees, also in sorted order.<br><br>(Even though we are representing <code>Intervals</code> in the form <code>[x, y]</code>, the objects inside are <code>Intervals</code>, not lists or arrays. For example, <code>schedule[0][0].start = 1</code>, <code>schedule[0][0].end = 2</code>, and <code>schedule[0][0][0]</code> is not defined).  Also, we wouldn’t include intervals like [5, 5] in our answer, as they have zero length.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> schedule = [[[1,2],[5,6]],[[1,3]],[[4,10]]]<br><strong>Output:</strong> [[3,4]]<br><strong>Explanation:</strong> There are a total of three employees, and all common<br>free time intervals would be [-inf, 1], [3, 4], [10, inf].<br>We discard any intervals that contain inf as they aren’t finite.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> schedule = [[[1,3],[6,7]],[[2,4]],[[2,5],[9,12]]]<br><strong>Output:</strong> [[5,6],[7,9]]<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= schedule.length , schedule[i].length &lt;= 50</code></em>   <code>0 &lt;= schedule[i].start &lt; schedule[i].end &lt;= 10^8</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>给定员工的schedule，给所有员工的空余时间的区间</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>一开始考虑用Leetcode 056 merge intervals，然后求不能merge时的区间。后来想用Leetcode 253 meeting rooms II也是关于重合区间，只要active meetings为0时，就表示空余区间，此法更容易实现   </p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>用Leetcode 253 meeting rooms II的排序解法  </li><li>注意输入是每一个员工的schedule如[Interval(1, 2), Interval(5, 6)]，然后是所有员工schedule的列表  </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">TestCases.compare(self, self.employeeFreeTime([[Interval(<span class="number">1</span>, <span class="number">2</span>), Interval(<span class="number">5</span>, <span class="number">6</span>)], [Interval(<span class="number">1</span>, <span class="number">3</span>)], [Interval(<span class="number">4</span>, <span class="number">10</span>)]]), [Interval(<span class="number">3</span>, <span class="number">4</span>)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">employeeFreeTime</span><span class="params">(self, schedule: [[Interval]])</span> -&gt; [Interval]:</span></span><br><span class="line">schedule_endpoints = []</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> schedule:</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> li:</span><br><span class="line">schedule_endpoints.append((s.start, <span class="number">0</span>)) <span class="comment"># [(1, 0),(2,1),(5,0), (6,1)]</span></span><br><span class="line">schedule_endpoints.append((s.end, <span class="number">1</span>))</span><br><span class="line">schedule_endpoints.sort()</span><br><span class="line">res, free_time, active_schedule = [], [], <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(schedule_endpoints)):</span><br><span class="line"><span class="keyword">if</span> schedule_endpoints[i][<span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">active_schedule += <span class="number">1</span> <span class="comment"># 0</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">active_schedule -= <span class="number">1</span> <span class="comment">#</span></span><br><span class="line"><span class="keyword">if</span> active_schedule == <span class="number">0</span>:</span><br><span class="line">free_time.append(schedule_endpoints[i][<span class="number">0</span>]) <span class="comment">#[2,5]</span></span><br><span class="line"><span class="keyword">if</span> active_schedule == <span class="number">1</span> <span class="keyword">and</span> len(free_time) == <span class="number">1</span>:</span><br><span class="line">free_time.append(schedule_endpoints[i][<span class="number">0</span>])</span><br><span class="line">free_interval = Interval(free_time[<span class="number">0</span>], free_time[<span class="number">1</span>])</span><br><span class="line">res.append(free_interval)</span><br><span class="line">free_time = []</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(nlogn)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/employee-free-time/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Sorting" scheme="https://shineboy2013.github.com/tags/Sorting/"/>
    
      <category term="Heap" scheme="https://shineboy2013.github.com/tags/Heap/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1010 Pairs of Songs With Total Durations Divisible by 60</title>
    <link href="https://shineboy2013.github.com/2021/12/26/lee-1010/"/>
    <id>https://shineboy2013.github.com/2021/12/26/lee-1010/</id>
    <published>2021-12-26T20:51:37.239Z</published>
    <updated>2021-12-26T21:02:12.895Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/pairs-of-songs-with-total-durations-divisible-by-60/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>You are given a list of songs where the i<sup>th</sup> song has a duration of <code>time[i]</code> seconds.<br><br>Return <em>the number of pairs of songs for which their total duration in seconds is divisible by</em> <code>60</code>. Formally, we want the number of indices <code>i</code>, <code>j</code> such that <code>i &lt; j</code> with <code>(time[i] + time[j]) % 60 == 0</code>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> time = [30,20,150,100,40]<br><strong>Output:</strong> 3<br><strong>Explanation:</strong> Three pairs have a total duration divisible by 60:<br>(time[0] = 30, time[2] = 150): total duration 180<br>(time[1] = 20, time[3] = 100): total duration 120<br>(time[1] = 20, time[4] = 40): total duration 60<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> time = [60,60,60]<br><strong>Output:</strong> 3<br><strong>Explanation:</strong> All three pairs have a total duration of 120, which is divisible by 60.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   `1 &lt;= time.length &lt;= 6 </em> 10<sup>4</sup><code>*</code>1 &lt;= time[i] &lt;= 500`<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求数组中两数和能被60整除  </p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>两数和的关系第一时间想到two sum。但由于target是60的倍数，并不固定，所以先用公式求所有数的mod，(time[i] + time[j]) % 60 = time[i] % 60 + time[j] % 60, 这样target就是60了<br>第二个难点是此题求个数并不是像two sum一样求可行性，所以value to index改成value to count  </p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>对所有数对60求mod，map存value到count    </li><li>如果输入是60，取模后为0， <strong>求(60 - time_mod[i])要对60取模</strong>，否则60不在map中，因为60 - time_mod[i] = 60.</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># (time[i] + time[j]) % 60 = time[i] % 60 + time[j] % 60</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numPairsDivisibleBy60</span><span class="params">(self, time: List[int])</span> -&gt; int:</span></span><br><span class="line">time_mod = [t % <span class="number">60</span> <span class="keyword">for</span> t <span class="keyword">in</span> time] <span class="comment"># [30,30]</span></span><br><span class="line">val_to_count = collections.defaultdict(int)</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(time_mod)):</span><br><span class="line"><span class="keyword">if</span> (<span class="number">60</span> - time_mod[i]) % <span class="number">60</span> <span class="keyword">in</span> val_to_count:</span><br><span class="line">   res += val_to_count[(<span class="number">60</span> - time_mod[i]) % <span class="number">60</span>]</span><br><span class="line">val_to_count[time_mod[i]] += <span class="number">1</span> <span class="comment"># 30:1</span></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/pairs-of-songs-with-total-durations-divisible-by-60/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetC
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Hash Table" scheme="https://shineboy2013.github.com/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 018 4Sum</title>
    <link href="https://shineboy2013.github.com/2021/12/26/lee-018/"/>
    <id>https://shineboy2013.github.com/2021/12/26/lee-018/</id>
    <published>2021-12-26T10:02:25.531Z</published>
    <updated>2021-12-28T03:57:35.402Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/4sum/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given an array <code>nums</code> of <code>n</code> integers, return <em>an array of all the <strong>unique</strong> quadruplets</em> <code>[nums[a], nums[b], nums[c], nums[d]]</code> such that:<br><br><em>   <code>0 &lt;= a, b, c, d &lt; n</code></em>   <code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code> are <strong>distinct</strong>.<br><em>   <code>nums[a] + nums[b] + nums[c] + nums[d] == target</code><br><br>You may return the answer in <strong>any order</strong>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> nums = [1,0,-1,0,-2,2], target = 0<br><strong>Output:</strong> [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> nums = [2,2,2,2,2], target = 8<br><strong>Output:</strong> [[2,2,2,2]]<br></pre><br><br><strong>Constraints:</strong></em>   <code>1 &lt;= nums.length &lt;= 200</code><br><em>   <code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= nums[i] &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code></em>   <code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= target &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求四数和等于target。这些数值结果排序后不能重复。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>类似于<a href="https://shineboy2013.github.io/2021/12/05/lee-015/" target="_blank" rel="noopener">3sum</a>，但需要更加一般化。用递归。<strong>不能用求所有笛卡尔积版的Two sum，会TLE</strong>。</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>k_sum接口含k_sum(nums, target, k), 基础case为two_sum, 遍历nums每个元素，若重复跳过，将(子数组，target-nums[i], k-1)递归，返回结果拼接  </li><li>two_sum也是遇到重复元素跳过，若等于target，要<strong>左右指针均移动</strong>     </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fourSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">nums.sort()</span><br><span class="line"><span class="keyword">return</span> self.k_sum(nums, target, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">k_sum</span><span class="params">(self, nums, target, k)</span>:</span></span><br><span class="line"><span class="keyword">if</span> k == <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> self.two_sum(nums, target)</span><br><span class="line"><span class="comment"># assume 3 sum</span></span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line"><span class="keyword">if</span> i &gt;= <span class="number">1</span> <span class="keyword">and</span> nums[i - <span class="number">1</span>] == nums[i]: <span class="comment"># remember</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">sub_res = self.k_sum(nums[i + <span class="number">1</span>:], target - nums[i], k - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> sub_res:</span><br><span class="line">res.append([nums[i]] + li)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two_sum</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">i, j, res = <span class="number">0</span>, len(nums) - <span class="number">1</span>, []</span><br><span class="line"><span class="keyword">while</span> i &lt; j:</span><br><span class="line"><span class="keyword">if</span> (i &gt;= <span class="number">1</span> <span class="keyword">and</span> nums[i - <span class="number">1</span>] == nums[i]) <span class="keyword">or</span> nums[i] + nums[j] &lt; target:</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> (j + <span class="number">1</span> &lt; len(nums) <span class="keyword">and</span> nums[j] == nums[j + <span class="number">1</span>]) <span class="keyword">or</span> nums[i] + nums[j] &gt; target:</span><br><span class="line">j -= <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">res.append([nums[i], nums[j]]) <span class="comment"># remember to use list rather than tuple</span></span><br><span class="line">i += <span class="number">1</span> <span class="comment"># remember</span></span><br><span class="line">j -= <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n<sup>3</sup>)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/4sum/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;Given an arra
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Sorting" scheme="https://shineboy2013.github.com/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 244 Shortest Word Distance II</title>
    <link href="https://shineboy2013.github.com/2021/12/25/lee-244/"/>
    <id>https://shineboy2013.github.com/2021/12/25/lee-244/</id>
    <published>2021-12-26T05:28:44.971Z</published>
    <updated>2021-12-26T05:35:03.146Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/shortest-word-distance-ii/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Design a data structure that will be initialized with a string array, and then it should answer queries of the shortest distance between two different strings from the array.<br><br>Implement the <code>WordDistance</code> class:<br><br><em>   <code>WordDistance(String[] wordsDict)</code> initializes the object with the strings array <code>wordsDict</code>.</em>   <code>int shortest(String word1, String word2)</code> returns the shortest distance between <code>word1</code> and <code>word2</code> in the array <code>wordsDict</code>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input</strong><br>[“WordDistance”, “shortest”, “shortest”]<br>[[[“practice”, “makes”, “perfect”, “coding”, “makes”]], [“coding”, “practice”], [“makes”, “coding”]]<br><strong>Output</strong><br>[null, 3, 1]<br><br><strong>Explanation</strong><br>WordDistance wordDistance = new WordDistance([“practice”, “makes”, “perfect”, “coding”, “makes”]);<br>wordDistance.shortest(“coding”, “practice”); // return 3<br>wordDistance.shortest(“makes”, “coding”);    // return 1<br></pre><br><br><strong>Constraints:</strong><br><br><em>   `1 &lt;= wordsDict.length &lt;= 3 </em> 10<sup>4</sup><code>*</code>1 &lt;= wordsDict[i].length &lt;= 10<code>*</code>wordsDict[i]<code>consists of lowercase English letters.*</code>word1<code>and</code>word2<code>are in</code>wordsDict<code>.*</code>word1 != word2<code>*   At most</code>5000<code>calls will be made to</code>shortest`.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>设计数据结构返回单词列表中两单词下标最短距离。单词列表含重复单词</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>记录word到下标列表。可以用logn搜索另一个列表，总时间复杂度为O(nlogn)。不如用mergesort的merge来计算，复杂度为O(n)</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li></li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordDistance</span><span class="params">(TestCases)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, wordsDict: List[str])</span>:</span></span><br><span class="line">        self.word_to_indices = collections.defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(wordsDict)):</span><br><span class="line">            self.word_to_indices[wordsDict[i]].append(i)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shortest</span><span class="params">(self, word1: str, word2: str)</span> -&gt; int:</span></span><br><span class="line">        indices1 = self.word_to_indices[word1]</span><br><span class="line">        indices2 = self.word_to_indices[word2]</span><br><span class="line">        i, j, res = <span class="number">0</span>, <span class="number">0</span>, float(<span class="string">'inf'</span>)</span><br><span class="line">        <span class="keyword">while</span> i &lt; len(indices1) <span class="keyword">and</span> j &lt; len(indices2):</span><br><span class="line">            res = min(res, abs(indices1[i] - indices2[j]))</span><br><span class="line">            <span class="keyword">if</span> indices1[i] &lt;= indices2[j]:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>shortest时间复杂度为<code>O(L)</code>，空间复杂度<code>O(1)</code>。L为两单词下标列表的最短长度  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/shortest-word-distance-ii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Hash Table" scheme="https://shineboy2013.github.com/tags/Hash-Table/"/>
    
      <category term="LinkedIn" scheme="https://shineboy2013.github.com/tags/LinkedIn/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 2121 Intervals Between Identical Elements</title>
    <link href="https://shineboy2013.github.com/2021/12/25/lee-2121/"/>
    <id>https://shineboy2013.github.com/2021/12/25/lee-2121/</id>
    <published>2021-12-26T04:46:06.677Z</published>
    <updated>2021-12-26T04:55:15.169Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/intervals-between-identical-elements/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>You are given a <strong>0-indexed</strong> array of <code>n</code> integers <code>arr</code>.<br><br>The <strong>interval</strong> between two elements in <code>arr</code> is defined as the <strong>absolute difference</strong> between their indices. More formally, the <strong>interval</strong> between <code>arr[i]</code> and <code>arr[j]</code> is <code>|i - j|</code>.<br><br>Return <em>an array</em> <code>intervals</code> <em>of length</em> <code>n</code> <em>where</em> <code>intervals[i]</code> <em>is <strong>the sum of intervals</strong> between</em> <code>arr[i]</code> <em>and each element in</em> <code>arr</code> <em>with the same value as</em> <code>arr[i]</code><em>.</em><br><br><strong>Note:</strong> <code>|x|</code> is the absolute value of <code>x</code>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> arr = [2,1,3,1,2,3,3]<br><strong>Output:</strong> [4,2,7,2,4,4,5]<br><strong>Explanation:</strong><br>- Index 0: Another 2 is found at index 4. |0 - 4| = 4<br>- Index 1: Another 1 is found at index 3. |1 - 3| = 2<br>- Index 2: Two more 3s are found at indices 5 and 6. |2 - 5| + |2 - 6| = 7<br>- Index 3: Another 1 is found at index 1. |3 - 1| = 2<br>- Index 4: Another 2 is found at index 0. |4 - 0| = 4<br>- Index 5: Two more 3s are found at indices 2 and 6. |5 - 2| + |5 - 6| = 4<br>- Index 6: Two more 3s are found at indices 2 and 5. |6 - 2| + |6 - 5| = 5<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> arr = [10,5,10,10]<br><strong>Output:</strong> [5,0,3,4]<br><strong>Explanation:</strong><br>- Index 0: Two more 10s are found at indices 2 and 3. |0 - 2| + |0 - 3| = 5<br>- Index 1: There is only one 5 in the array, so its sum of intervals to identical elements is 0.<br>- Index 2: Two more 10s are found at indices 0 and 3. |2 - 0| + |2 - 3| = 3<br>- Index 3: Two more 10s are found at indices 0 and 2. |3 - 0| + |3 - 2| = 4<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>n == arr.length</code></em>   <code>1 &lt;= n &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code><br>*   <code>1 &lt;= arr[i] &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求相同元素的下标差的和</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>暴力法是TLE，由于存在重复计算。用prefix和suffix来优化。<br>prefix为从某个元素为起点到前继节点下标差之和<br>suffix为从某个元素为起点到后继节点下标差之和<br>结果 = prefix[i] + suffix[i]</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><ol><li>用Map来存储相同元素的下标  </li><li>用prefix和suffix来计算每个元素的结果</li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>一开始用presum表示从起点到其他下标的差之和。这不能用于某个元素的前继元素下标差之和。所以要改成<strong>从某个元素为起点到前继节点下标差之和</strong>    </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDistances</span><span class="params">(self, arr: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">val_to_index = collections.defaultdict(list)</span><br><span class="line">res = [<span class="number">0</span>] * len(arr)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">val_to_index[arr[i]].append(i)</span><br><span class="line"><span class="keyword">for</span> val, indices <span class="keyword">in</span> val_to_index.items():</span><br><span class="line">prefix, suffix = [<span class="number">0</span>], [<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(indices)):</span><br><span class="line">prefix.append(prefix[<span class="number">-1</span>] + i * abs(indices[i] - indices[i - <span class="number">1</span>]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(indices) - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">suffix.append(suffix[<span class="number">-1</span>] + (len(indices) - i - <span class="number">1</span>) * abs(indices[i] - indices[i + <span class="number">1</span>]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(indices)):</span><br><span class="line">res[indices[i]] = prefix[i] + suffix[len(indices) - i - <span class="number">1</span>]</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/intervals-between-identical-elements/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 529 Minesweeper</title>
    <link href="https://shineboy2013.github.com/2021/12/25/lee-529/"/>
    <id>https://shineboy2013.github.com/2021/12/25/lee-529/</id>
    <published>2021-12-26T02:19:07.868Z</published>
    <updated>2021-12-26T02:26:15.895Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/minesweeper/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Let’s play the minesweeper game (<a href="https://en.wikipedia.org/wiki/Minesweeper_(video_game" target="_blank" rel="noopener">Wikipedia</a>), <a href="http://minesweeperonline.com" target="_blank" rel="noopener">online game</a>)!<br><br>You are given an <code>m x n</code> char matrix <code>board</code> representing the game board where:<br><br><em>   <code>&#39;M&#39;</code> represents an unrevealed mine,</em>   <code>&#39;E&#39;</code> represents an unrevealed empty square,<br><em>   <code>&#39;B&#39;</code> represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals),</em>   digit (<code>&#39;1&#39;</code> to <code>&#39;8&#39;</code>) represents how many mines are adjacent to this revealed square, and<br><em>   <code>&#39;X&#39;</code> represents a revealed mine.<br><br>You are also given an integer array <code>click</code> where <code>click = [click&lt;sub&gt;r&lt;/sub&gt;, click&lt;sub&gt;c&lt;/sub&gt;]</code> represents the next click position among all the unrevealed squares (<code>&#39;M&#39;</code> or <code>&#39;E&#39;</code>).<br><br>Return <em>the board after revealing this position according to the following rules</em>:<br><br>1.  If a mine <code>&#39;M&#39;</code> is revealed, then the game is over. You should change it to <code>&#39;X&#39;</code>.<br>2.  If an empty square <code>&#39;E&#39;</code> with no adjacent mines is revealed, then change it to a revealed blank <code>&#39;B&#39;</code> and all of its adjacent unrevealed squares should be revealed recursively.<br>3.  If an empty square <code>&#39;E&#39;</code> with at least one adjacent mine is revealed, then change it to a digit (<code>&#39;1&#39;</code> to <code>&#39;8&#39;</code>) representing the number of adjacent mines.<br>4.  Return the board when no more squares will be revealed.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2018/10/12/minesweeper_example_1.png" alt=""><br><br><pre><strong>Input:</strong> board = [[“E”,”E”,”E”,”E”,”E”],[“E”,”E”,”M”,”E”,”E”],[“E”,”E”,”E”,”E”,”E”],[“E”,”E”,”E”,”E”,”E”]], click = [3,0]<br><strong>Output:</strong> [[“B”,”1”,”E”,”1”,”B”],[“B”,”1”,”M”,”1”,”B”],[“B”,”1”,”1”,”1”,”B”],[“B”,”B”,”B”,”B”,”B”]]<br></pre><br><br><strong>Example 2:</strong><br><br><img src="https://assets.leetcode.com/uploads/2018/10/12/minesweeper_example_2.png" alt=""><br><br><pre><strong>Input:</strong> board = [[“B”,”1”,”E”,”1”,”B”],[“B”,”1”,”M”,”1”,”B”],[“B”,”1”,”1”,”1”,”B”],[“B”,”B”,”B”,”B”,”B”]], click = [1,2]<br><strong>Output:</strong> [[“B”,”1”,”E”,”1”,”B”],[“B”,”1”,”X”,”1”,”B”],[“B”,”1”,”1”,”1”,”B”],[“B”,”B”,”B”,”B”,”B”]]<br></pre><br><br><strong>Constraints:</strong></em>   <code>m == board.length</code><br><em>   <code>n == board[i].length</code></em>   <code>1 &lt;= m, n &lt;= 50</code><br><em>   <code>board[i][j]</code> is either <code>&#39;M&#39;</code>, <code>&#39;E&#39;</code>, <code>&#39;B&#39;</code>, or a digit from <code>&#39;1&#39;</code> to <code>&#39;8&#39;</code>.</em>   <code>click.length == 2</code><br><em>   <code>0 &lt;= click&lt;sub&gt;r&lt;/sub&gt; &lt; m</code></em>   <code>0 &lt;= click&lt;sub&gt;c&lt;/sub&gt; &lt; n</code><br>*   <code>board[click&lt;sub&gt;r&lt;/sub&gt;][click&lt;sub&gt;c&lt;/sub&gt;]</code> is either <code>&#39;M&#39;</code> or <code>&#39;E&#39;</code>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>给定扫雷版上的某一个状态，计算扫雷版上的下一个状态</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>N/A</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>三种情况： 1. 踩雷，只需更改此格。 2. 踩到数字格也就是雷相邻的格，计算此格的临近雷数，更改此格。 3. 从此格开始BFS访问全版，节点出列后如果是数字格不加入到queue中，否则继续BFS访问，更改此格。     </li><li>x, y = node[0] + _dx, node[1] + _dy用node[0], node[1]不要用i, j  </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateBoard</span><span class="params">(self, board: List[List[str]], click: List[int])</span> -&gt; List[List[str]]:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> board[click[<span class="number">0</span>]][click[<span class="number">1</span>]] == <span class="string">'M'</span>:</span><br><span class="line">board[click[<span class="number">0</span>]][click[<span class="number">1</span>]] = <span class="string">'X'</span></span><br><span class="line"><span class="keyword">return</span> board</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">mine_num = self.get_neighboring_mine_num(board, click[<span class="number">0</span>], click[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> mine_num &gt; <span class="number">0</span>:</span><br><span class="line">board[click[<span class="number">0</span>]][click[<span class="number">1</span>]] = str(mine_num)</span><br><span class="line"><span class="keyword">return</span> board</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> self.bfs(board, click[<span class="number">0</span>], click[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(self, board, i, j)</span>:</span></span><br><span class="line">queue = collections.deque([(i, j)])</span><br><span class="line">visited = set([(i, j)])</span><br><span class="line"><span class="keyword">while</span> queue:</span><br><span class="line">node = queue.popleft()</span><br><span class="line">mine_num = self.get_neighboring_mine_num(board, node[<span class="number">0</span>], node[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> mine_num &gt; <span class="number">0</span>:</span><br><span class="line">board[node[<span class="number">0</span>]][node[<span class="number">1</span>]] = str(mine_num)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">board[node[<span class="number">0</span>]][node[<span class="number">1</span>]] = <span class="string">'B'</span></span><br><span class="line"><span class="keyword">for</span> _dx, _dy <span class="keyword">in</span> OFFSETS:</span><br><span class="line">x, y = node[<span class="number">0</span>] + _dx, node[<span class="number">1</span>] + _dy <span class="comment"># remember not to use i, j</span></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= len(board) <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt;= len(board[<span class="number">0</span>]) <span class="keyword">or</span> (x, y) <span class="keyword">in</span> visited:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">queue.append((x, y))</span><br><span class="line">visited.add((x, y))</span><br><span class="line"><span class="keyword">return</span> board</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_neighboring_mine_num</span><span class="params">(self, board, i, j)</span>:</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _dx, _dy <span class="keyword">in</span> OFFSETS:</span><br><span class="line">x, y = i + _dx, j + _dy</span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span> &lt;= x &lt; len(board) <span class="keyword">and</span> <span class="number">0</span> &lt;= y &lt; len(board[<span class="number">0</span>]) <span class="keyword">and</span> board[x][y] == <span class="string">'M'</span>:</span><br><span class="line">num += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> num</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n<sup>2</sup>)</code>，空间复杂度<code>O(n<sup>2</sup>)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/minesweeper/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;Let’s 
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Matrix" scheme="https://shineboy2013.github.com/tags/Matrix/"/>
    
      <category term="Breadth-first Search" scheme="https://shineboy2013.github.com/tags/Breadth-first-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 981 Time Based Key-Value Store</title>
    <link href="https://shineboy2013.github.com/2021/12/25/lee-981/"/>
    <id>https://shineboy2013.github.com/2021/12/25/lee-981/</id>
    <published>2021-12-26T00:52:26.416Z</published>
    <updated>2021-12-26T00:57:09.559Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/time-based-key-value-store/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key’s value at a certain timestamp.<br><br>Implement the <code>TimeMap</code> class:<br><br><em>   <code>TimeMap()</code> Initializes the object of the data structure.</em>   <code>void set(String key, String value, int timestamp)</code> Stores the key <code>key</code> with the value <code>value</code> at the given time <code>timestamp</code>.<br><em>   <code>String get(String key, int timestamp)</code> Returns a value such that <code>set</code> was called previously, with <code>timestamp_prev &lt;= timestamp</code>. If there are multiple such values, it returns the value associated with the largest <code>timestamp_prev</code>. If there are no values, it returns <code>&quot;&quot;</code>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input</strong><br>[“TimeMap”, “set”, “get”, “get”, “set”, “get”, “get”]<br>[[], [“foo”, “bar”, 1], [“foo”, 1], [“foo”, 3], [“foo”, “bar2”, 4], [“foo”, 4], [“foo”, 5]]<br><strong>Output</strong><br>[null, null, “bar”, “bar”, null, “bar2”, “bar2”]<br><br><strong>Explanation</strong><br>TimeMap timeMap = new TimeMap();<br>timeMap.set(“foo”, “bar”, 1);  // store the key “foo” and value “bar” along with timestamp = 1.<br>timeMap.get(“foo”, 1);         // return “bar”<br>timeMap.get(“foo”, 3);         // return “bar”, since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is “bar”.<br>timeMap.set(“foo”, “bar2”, 4); // store the key “foo” and value “bar2” along with timestamp = 4.<br>timeMap.get(“foo”, 4);         // return “bar2”<br>timeMap.get(“foo”, 5);         // return “bar2”<br></pre><br><br><strong>Constraints:</strong></em>   <code>1 &lt;= key.length, value.length &lt;= 100</code><br><em>   <code>key</code> and <code>value</code> consist of lowercase English letters and digits.</em>   <code>1 &lt;= timestamp &lt;= 10&lt;sup&gt;7&lt;/sup&gt;</code><br><em>   All the timestamps <code>timestamp</code> of <code>set</code> are strictly increasing.</em>   At most <code>2 * 10&lt;sup&gt;5&lt;/sup&gt;</code> calls will be made to <code>set</code> and <code>get</code>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>实现带历史记录的HashMap。也就是同一个key记录所有赋过值的value</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>N/A</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>Map to list的思路，list含两个，包括value和timestamp，用binary search搜索timestamp的下标，然后返回对应的value   </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeMap</span><span class="params">(TestCases)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.key_to_val = collections.defaultdict(list)</span><br><span class="line">        self.key_to_timestamp = collections.defaultdict(list)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, key: str, value: str, timestamp: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.key_to_val[key].append(value)</span><br><span class="line">        self.key_to_timestamp[key].append(timestamp)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key: str, timestamp: int)</span> -&gt; str:</span></span><br><span class="line">        index = bisect.bisect(self.key_to_timestamp[key], timestamp) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.key_to_val[key][index]</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>get时间复杂度为<code>O(logn)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/time-based-key-value-store/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div
      
    
    </summary>
    
    
      <category term="Hash Table" scheme="https://shineboy2013.github.com/tags/Hash-Table/"/>
    
      <category term="String" scheme="https://shineboy2013.github.com/tags/String/"/>
    
      <category term="Binary Search" scheme="https://shineboy2013.github.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 937 Reorder Data in Log Files</title>
    <link href="https://shineboy2013.github.com/2021/12/25/lee-937/"/>
    <id>https://shineboy2013.github.com/2021/12/25/lee-937/</id>
    <published>2021-12-25T10:03:16.769Z</published>
    <updated>2021-12-25T10:17:19.870Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/reorder-data-in-log-files/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>You are given an array of <code>logs</code>. Each log is a space-delimited string of words, where the first word is the <strong>identifier</strong>.<br><br>There are two types of logs:<br><br><em>   <strong>Letter-logs</strong>: All words (except the identifier) consist of lowercase English letters.</em>   <strong>Digit-logs</strong>: All words (except the identifier) consist of digits.<br><br>Reorder these logs so that:<br><br>1.  The <strong>letter-logs</strong> come before all <strong>digit-logs</strong>.<br>2.  The <strong>letter-logs</strong> are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.<br>3.  The <strong>digit-logs</strong> maintain their relative ordering.<br><br>Return <em>the final order of the logs</em>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> logs = [“dig1 8 1 5 1”,”let1 art can”,”dig2 3 6”,”let2 own kit dig”,”let3 art zero”]<br><strong>Output:</strong> [“let1 art can”,”let3 art zero”,”let2 own kit dig”,”dig1 8 1 5 1”,”dig2 3 6”]<br><strong>Explanation:</strong><br>The letter-log contents are all different, so their ordering is “art can”, “art zero”, “own kit dig”.<br>The digit-logs have a relative order of “dig1 8 1 5 1”, “dig2 3 6”.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> logs = [“a1 9 2 3 1”,”g1 act car”,”zo4 4 7”,”ab1 off key dog”,”a8 act zoo”]<br><strong>Output:</strong> [“g1 act car”,”a8 act zoo”,”ab1 off key dog”,”a1 9 2 3 1”,”zo4 4 7”]<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= logs.length &lt;= 100</code></em>   <code>3 &lt;= logs[i].length &lt;= 100</code><br><em>   All the tokens of <code>logs[i]</code> are separated by a <strong>single</strong> space.</em>   <code>logs[i]</code> is guaranteed to have an identifier and at least one word after the identifier.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>排序log file，以下顺序：字母log (内容，id), 数字log</p><h3 id="解题思路-推荐-："><a href="#解题思路-推荐-：" class="headerlink" title="解题思路(推荐)："></a><strong>解题思路(推荐)：</strong></h3><p>N/A</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>排序的multi key实现(0, content_str, li[0]) if is_alpha else (1, ). (1, )表示按数组顺序    </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reorderLogFiles</span><span class="params">(self, logs: List[str])</span> -&gt; List[str]:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span><span class="params">(x)</span>:</span></span><br><span class="line">li = x.split(<span class="string">' '</span>)</span><br><span class="line">content_str = <span class="string">' '</span>.join(li[<span class="number">1</span>:])</span><br><span class="line">is_alpha = <span class="number">1</span> <span class="keyword">if</span> content_str[<span class="number">0</span>].isalpha() <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> (<span class="number">0</span>, content_str, li[<span class="number">0</span>]) <span class="keyword">if</span> is_alpha <span class="keyword">else</span> (<span class="number">1</span>, )</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sorted(logs, key=get_key)</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(nmlogn)</code>，空间复杂度<code>O(mn)</code>, n为log数量，m为每个log的最长长度。如mergesort中merge复杂度为nm, 每个key比较是O(m)复杂度  </p><hr><h3 id="算法II解题思路："><a href="#算法II解题思路：" class="headerlink" title="算法II解题思路："></a><strong>算法II解题思路：</strong></h3><p>我的解法。本质上和上法一致，较繁琐  </p><h3 id="注意事项：-1"><a href="#注意事项：-1" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>字母log排序不能按content_str + ‘ ‘ + li[0], 而是(content_str, li[0])作多key排序  </li></ol><h3 id="Python代码：-1"><a href="#Python代码：-1" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reorderLogFiles2</span><span class="params">(self, logs: List[str])</span> -&gt; List[str]:</span></span><br><span class="line">letter_logs, digit_logs = [], []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(logs)):</span><br><span class="line"><span class="keyword">if</span> logs[i][<span class="number">-1</span>].isdigit():</span><br><span class="line">digit_logs.append(logs[i])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">li = logs[i].split(<span class="string">' '</span>)</span><br><span class="line">content_str = <span class="string">' '</span>.join(li[<span class="number">1</span>:])</span><br><span class="line">letter_logs.append((content_str, li[<span class="number">0</span>], i))</span><br><span class="line">letter_logs.sort()</span><br><span class="line">res = [logs[pair[<span class="number">2</span>]] <span class="keyword">for</span> pair <span class="keyword">in</span> letter_logs]</span><br><span class="line">res += digit_logs</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/reorder-data-in-log-files/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="String" scheme="https://shineboy2013.github.com/tags/String/"/>
    
      <category term="Amazon" scheme="https://shineboy2013.github.com/tags/Amazon/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1268 Search Suggestions System</title>
    <link href="https://shineboy2013.github.com/2021/12/25/lee-1268/"/>
    <id>https://shineboy2013.github.com/2021/12/25/lee-1268/</id>
    <published>2021-12-25T09:02:37.829Z</published>
    <updated>2021-12-25T09:04:45.289Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/search-suggestions-system/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>You are given an array of strings <code>products</code> and a string <code>searchWord</code>.<br><br>Design a system that suggests at most three product names from <code>products</code> after each character of <code>searchWord</code> is typed. Suggested products should have common prefix with <code>searchWord</code>. If there are more than three products with a common prefix return the three lexicographically minimums products.<br><br>Return <em>a list of lists of the suggested products after each character of</em> <code>searchWord</code> <em>is typed</em>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> products = [“mobile”,”mouse”,”moneypot”,”monitor”,”mousepad”], searchWord = “mouse”<br><strong>Output:</strong> [<br>[“mobile”,”moneypot”,”monitor”],<br>[“mobile”,”moneypot”,”monitor”],<br>[“mouse”,”mousepad”],<br>[“mouse”,”mousepad”],<br>[“mouse”,”mousepad”]<br>]<br><strong>Explanation:</strong> products sorted lexicographically = [“mobile”,”moneypot”,”monitor”,”mouse”,”mousepad”]<br>After typing m and mo all products match and we show user [“mobile”,”moneypot”,”monitor”]<br>After typing mou, mous and mouse the system suggests [“mouse”,”mousepad”]<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> products = [“havana”], searchWord = “havana”<br><strong>Output:</strong> [[“havana”],[“havana”],[“havana”],[“havana”],[“havana”],[“havana”]]<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> products = [“bags”,”baggage”,”banner”,”box”,”cloths”], searchWord = “bags”<br><strong>Output:</strong> [[“baggage”,”bags”,”banner”],[“baggage”,”bags”,”banner”],[“baggage”,”bags”],[“bags”]]<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= products.length &lt;= 1000</code></em>   <code>1 &lt;= products[i].length &lt;= 3000</code><br><em>   `1 &lt;= sum(products[i].length) &lt;= 2 </em> 10<sup>4</sup><code>*   All the strings of</code>products<code>are **unique**.*</code>products[i]<code>consists of lowercase English letters.*</code>1 &lt;= searchWord.length &lt;= 1000<code>*</code>searchWord` consists of lowercase English letters.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>实现搜索结果为3个autocomplete的功能</p><h3 id="Prefix解题思路-推荐-："><a href="#Prefix解题思路-推荐-：" class="headerlink" title="Prefix解题思路(推荐)："></a><strong>Prefix解题思路(推荐)：</strong></h3><p>Prefix</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>用Trie，另一种思路是用prefix，此法采用prefix法，将所有单词按前缀加入到字典中     </li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">suggestedProducts</span><span class="params">(self, products: List[str], searchWord: str)</span> -&gt; List[List[str]]:</span></span><br><span class="line">products.sort()</span><br><span class="line">prefix_dict = collections.defaultdict(list)</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> products:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(word)):</span><br><span class="line">prefix = word[:i + <span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> len(prefix_dict[prefix]) &lt; <span class="number">3</span>:</span><br><span class="line">prefix_dict[prefix].append(word)</span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(searchWord)):</span><br><span class="line">prefix = searchWord[:i + <span class="number">1</span>]</span><br><span class="line">res.append(prefix_dict[prefix])</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(nL1 + L2)</code>，空间复杂度<code>O(nL1)</code>, L1为单词列表中最长的长度，L2为搜索单词长度，n为单词个数  </p><hr><h3 id="Trie-DFS算法II解题思路："><a href="#Trie-DFS算法II解题思路：" class="headerlink" title="Trie + DFS算法II解题思路："></a><strong>Trie + DFS算法II解题思路：</strong></h3><p>建Trie，然后根据搜索的前缀定位到Trie节点，然后对此节点做DFS找到3个单词，因为DFS和字母顺序是一致的，所以DFS可行<br>具体参考Leetcode solution</p><hr><h3 id="Two-pointers算法III解题思路-推荐-："><a href="#Two-pointers算法III解题思路-推荐-：" class="headerlink" title="Two pointers算法III解题思路(推荐)："></a><strong>Two pointers算法III解题思路(推荐)：</strong></h3><p>先排序，用双指针相向搜索，根据搜索单词的每一个字母，不断收缩搜索范围，左指针和右指针之间即为满足条件的结果。每轮将左指针往后三个结果加到结果集<br>具体参考Leetcode discussion  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/search-suggestions-system/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="String" scheme="https://shineboy2013.github.com/tags/String/"/>
    
      <category term="Amazon" scheme="https://shineboy2013.github.com/tags/Amazon/"/>
    
      <category term="Trie" scheme="https://shineboy2013.github.com/tags/Trie/"/>
    
  </entry>
  
</feed>
