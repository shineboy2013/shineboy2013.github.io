<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KK&#39;s blog</title>
  
  <subtitle>每天积累多一些</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shineboy2013.github.com/"/>
  <updated>2022-01-18T07:34:50.740Z</updated>
  <id>https://shineboy2013.github.com/</id>
  
  <author>
    <name>KK Shum</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 211 Design Add and Search Words Data Structure</title>
    <link href="https://shineboy2013.github.com/2022/01/17/leetcode-211-design-add-and-search-words-data-structure/"/>
    <id>https://shineboy2013.github.com/2022/01/17/leetcode-211-design-add-and-search-words-data-structure/</id>
    <published>2022-01-18T07:26:28.464Z</published>
    <updated>2022-01-18T07:34:50.740Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/design-add-and-search-words-data-structure/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Design a data structure that supports adding new words and finding if a string matches any previously added string.<br><br>Implement the <code>WordDictionary</code> class:<br><br><em>   <code>WordDictionary()</code> Initializes the object.</em>   <code>void addWord(word)</code> Adds <code>word</code> to the data structure, it can be matched later.<br><em>   <code>bool search(word)</code> Returns <code>true</code> if there is any string in the data structure that matches <code>word</code> or <code>false</code> otherwise. <code>word</code> may contain dots <code>&#39;.&#39;</code> where dots can be matched with any letter.<br><br><strong>Example:</strong><br><br><pre><strong>Input</strong><br>[“WordDictionary”,”addWord”,”addWord”,”addWord”,”search”,”search”,”search”,”search”]<br>[[],[“bad”],[“dad”],[“mad”],[“pad”],[“bad”],[“.ad”],[“b..”]]<br><strong>Output</strong><br>[null,null,null,null,false,true,true,true]<br><br><strong>Explanation</strong><br>WordDictionary wordDictionary = new WordDictionary();<br>wordDictionary.addWord(“bad”);<br>wordDictionary.addWord(“dad”);<br>wordDictionary.addWord(“mad”);<br>wordDictionary.search(“pad”); // return False<br>wordDictionary.search(“bad”); // return True<br>wordDictionary.search(“.ad”); // return True<br>wordDictionary.search(“b..”); // return True<br></pre><br><br><strong>Constraints:</strong></em>   <code>1 &lt;= word.length &lt;= 500</code><br><em>   <code>word</code> in <code>addWord</code> consists lower-case English letters.</em>   <code>word</code> in <code>search</code> consist of  <code>&#39;.&#39;</code> or lower-case English letters.<br>*   At most <code>50000</code> calls will be made to <code>addWord</code> and <code>search</code>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>设计一个数据结构支持加单词和查找单词。查找单词支持dot查询，表示配对任意字符</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>第一时间想到Trie，但难点在如果支持dot。一般Trie实现只支持单一单词查询，但是此题需要搜索所有可能节点。所以要将search加入TrieNode参数且转成DFS</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>search加入TrieNode参数且转成DFS</li><li>终止条件第二个用TrieNode为空而不是用is_end</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordDictionary</span><span class="params">(TestCases)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.head = TrieNode()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addWord</span><span class="params">(self, word: str)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        it = self.head</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(word)):</span><br><span class="line">            it = it.children[word[i]]</span><br><span class="line">        it.is_end = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, word: str)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> self.search_one_node(word, self.head)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_one_node</span><span class="params">(self, word, trie_node)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> word <span class="keyword">and</span> trie_node.is_end:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> word <span class="keyword">or</span> <span class="keyword">not</span> trie_node: <span class="comment"># remember not trie_node</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> word[<span class="number">0</span>] == <span class="string">'.'</span>:</span><br><span class="line">            <span class="keyword">for</span> child_node <span class="keyword">in</span> trie_node.children.values():</span><br><span class="line">                <span class="keyword">if</span> self.search_one_node(word[<span class="number">1</span>:], child_node):</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> word[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> trie_node.children:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> self.search_one_node(word[<span class="number">1</span>:], trie_node.children[word[<span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.children = collections.defaultdict(TrieNode)  <span class="comment"># &#123;&#125;</span></span><br><span class="line">        self.is_end = <span class="keyword">False</span></span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>search中不含dot时间复杂度为<code>O(n)</code>, 含dot时间复杂度为<code>O(26<sup>n</sup>)</code>，空间复杂度<code>O(1)</code>, n为搜索单词长度.   </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/design-add-and-search-words-data-structure/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/
      
    
    </summary>
    
    
      <category term="Depth-first Search" scheme="https://shineboy2013.github.com/tags/Depth-first-Search/"/>
    
      <category term="Trie" scheme="https://shineboy2013.github.com/tags/Trie/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 207 Course Schedule</title>
    <link href="https://shineboy2013.github.com/2022/01/17/leetcode-207-course-schedule/"/>
    <id>https://shineboy2013.github.com/2022/01/17/leetcode-207-course-schedule/</id>
    <published>2022-01-18T05:11:45.265Z</published>
    <updated>2022-01-18T05:15:44.273Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/course-schedule/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses - 1</code>. You are given an array <code>prerequisites</code> where <code>prerequisites[i] = [a&lt;sub&gt;i&lt;/sub&gt;, b&lt;sub&gt;i&lt;/sub&gt;]</code> indicates that you <strong>must</strong> take course <code>b&lt;sub&gt;i&lt;/sub&gt;</code> first if you want to take course <code>a&lt;sub&gt;i&lt;/sub&gt;</code>.<br><br><em>   For example, the pair <code>[0, 1]</code>, indicates that to take course <code>0</code> you have to first take course <code>1</code>.<br><br>Return <code>true</code> if you can finish all courses. Otherwise, return <code>false</code>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> numCourses = 2, prerequisites = [[1,0]]<br><strong>Output:</strong> true<br><strong>Explanation:</strong> There are a total of 2 courses to take.<br>To take course 1 you should have finished course 0. So it is possible.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> numCourses = 2, prerequisites = [[1,0],[0,1]]<br><strong>Output:</strong> false<br><strong>Explanation:</strong> There are a total of 2 courses to take.<br>To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.<br></pre><br><br><strong>Constraints:</strong></em>   <code>1 &lt;= numCourses &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code><br><em>   <code>0 &lt;= prerequisites.length &lt;= 5000</code></em>   <code>prerequisites[i].length == 2</code><br><em>   <code>0 &lt;= a&lt;sub&gt;i&lt;/sub&gt;, b&lt;sub&gt;i&lt;/sub&gt; &lt; numCourses</code></em>   All the pairs prerequisites[i] are <strong>unique</strong>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>课程有先修课要求，求是否可以完成所有课程</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>跟LeetCode 210 Course Schedule II几乎一样，此题求可否完成，那题求课程顺序。区别在于return那一句返回bool还是res</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">canFinish</span><span class="params">(self, numCourses: int, prerequisites: List[List[int]])</span> -&gt; bool:</span></span><br><span class="line">in_degree = [<span class="number">0</span>] * numCourses</span><br><span class="line">graph = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(numCourses)]</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> prerequisites:</span><br><span class="line">in_degree[li[<span class="number">0</span>]] += <span class="number">1</span></span><br><span class="line">graph[li[<span class="number">1</span>]].append(li[<span class="number">0</span>])</span><br><span class="line">queue = collections.deque([i <span class="keyword">for</span> i <span class="keyword">in</span> range(len(in_degree)) <span class="keyword">if</span> in_degree[i] == <span class="number">0</span>])</span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">while</span> queue:</span><br><span class="line">node = queue.popleft()</span><br><span class="line">res.append(node)</span><br><span class="line"><span class="keyword">for</span> neighbor <span class="keyword">in</span> graph[node]:</span><br><span class="line">in_degree[neighbor] -= <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> in_degree[neighbor] == <span class="number">0</span>:</span><br><span class="line">queue.append(neighbor)</span><br><span class="line"><span class="keyword">return</span> numCourses == len(res)</span><br></pre></td></tr></table></figure></li></ol><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/course-schedule/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;Th
      
    
    </summary>
    
    
      <category term="Amazon" scheme="https://shineboy2013.github.com/tags/Amazon/"/>
    
      <category term="Graph" scheme="https://shineboy2013.github.com/tags/Graph/"/>
    
      <category term="Topological Sort" scheme="https://shineboy2013.github.com/tags/Topological-Sort/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 206 Reverse Linked List</title>
    <link href="https://shineboy2013.github.com/2022/01/17/leetcode-206-reverse-linked-list/"/>
    <id>https://shineboy2013.github.com/2022/01/17/leetcode-206-reverse-linked-list/</id>
    <published>2022-01-18T04:57:13.701Z</published>
    <updated>2022-01-18T05:00:28.675Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/reverse-linked-list/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given the <code>head</code> of a singly linked list, reverse the list, and return <em>the reversed list</em>.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt=""><br><br><pre><strong>Input:</strong> head = [1,2,3,4,5]<br><strong>Output:</strong> [5,4,3,2,1]<br></pre><br><br><strong>Example 2:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg" alt=""><br><br><pre><strong>Input:</strong> head = [1,2]<br><strong>Output:</strong> [2,1]<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> head = []<br><strong>Output:</strong> []<br></pre><br><br><strong>Constraints:</strong><br><br><em>   The number of nodes in the list is the range <code>[0, 5000]</code>.</em>   <code>-5000 &lt;= Node.val &lt;= 5000</code><br><br><strong>Follow up:</strong> A linked list can be reversed either iteratively or recursively. Could you implement both?<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>反转LL</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>简单题，但是经典题。循环体为，左方一个单独节点，右方为一个LL，将LL的首节点指向单独节点</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>循环体为，左方一个单独节点，右方为一个LL。所以首节点next要赋None</li><li>空节点的处理</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">it, it_next = head, head.next</span><br><span class="line">it.next = <span class="keyword">None</span> <span class="comment"># remember</span></span><br><span class="line"><span class="keyword">while</span> it <span class="keyword">and</span> it_next:</span><br><span class="line">tmp = it_next.next</span><br><span class="line">it_next.next = it</span><br><span class="line">it, it_next = it_next, tmp</span><br><span class="line"><span class="keyword">return</span> it</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-linked-list/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;b
      
    
    </summary>
    
    
      <category term="Linked List" scheme="https://shineboy2013.github.com/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 204 Count Primes</title>
    <link href="https://shineboy2013.github.com/2022/01/17/leetcode-204-count-primes/"/>
    <id>https://shineboy2013.github.com/2022/01/17/leetcode-204-count-primes/</id>
    <published>2022-01-18T04:20:44.873Z</published>
    <updated>2022-01-18T04:27:36.041Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/count-primes/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given an integer <code>n</code>, return <em>the number of prime numbers that are strictly less than</em> <code>n</code>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> n = 10<br><strong>Output:</strong> 4<br><strong>Explanation:</strong> There are 4 prime numbers less than 10, they are 2, 3, 5, 7.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> n = 0<br><strong>Output:</strong> 0<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> n = 1<br><strong>Output:</strong> 0<br></pre><br><br><strong>Constraints:</strong><br><br><em>   `0 &lt;= n &lt;= 5 </em> 10<sup>6</sup>`<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求n内的素数个数</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>排除法：知道一个素数后删除它的倍数，剩下的就是下一个素数</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>开一个prime大小数组，初始值为True表示是素数。</li><li>素数不包括n</li><li>提高效率：i遍历到n开方+1，删除的数不能超过n(一开始写没有break导致TLE), 最后用sum统计比for循环效率高点</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countPrimes</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">primes = [<span class="keyword">True</span>] * n <span class="comment"># remember less than n</span></span><br><span class="line">primes[<span class="number">0</span>] = primes[<span class="number">1</span>] = <span class="keyword">False</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(math.sqrt(n)) + <span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span> primes[i]:</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(i * <span class="number">2</span>, n, i): <span class="comment"># starting from i rather than 2</span></span><br><span class="line">primes[j] = <span class="keyword">False</span></span><br><span class="line"><span class="keyword">return</span> sum(primes)</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/count-primes/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;Given
      
    
    </summary>
    
    
      <category term="Math" scheme="https://shineboy2013.github.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 191 Number of 1 Bits</title>
    <link href="https://shineboy2013.github.com/2022/01/17/leetcode-191-number-of-1-bits/"/>
    <id>https://shineboy2013.github.com/2022/01/17/leetcode-191-number-of-1-bits/</id>
    <published>2022-01-18T02:56:56.968Z</published>
    <updated>2022-01-18T03:01:19.421Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/number-of-1-bits/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Write a function that takes an unsigned integer and returns the number of ‘1’ bits it has (also known as the <a href="http://en.wikipedia.org/wiki/Hamming_weight" target="_blank" rel="noopener">Hamming weight</a>).<br><br><strong>Note:</strong><br><br><em>   Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer’s internal binary representation is the same, whether it is signed or unsigned.</em>   In Java, the compiler represents the signed integers using <a href="https://en.wikipedia.org/wiki/Two%27s_complement" target="_blank" rel="noopener">2’s complement notation</a>. Therefore, in <strong>Example 3</strong>, the input represents the signed integer. <code>-3</code>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> n = 00000000000000000000000000001011<br><strong>Output:</strong> 3<br><strong>Explanation:</strong> The input binary string <strong>00000000000000000000000000001011</strong> has a total of three ‘1’ bits.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> n = 00000000000000000000000010000000<br><strong>Output:</strong> 1<br><strong>Explanation:</strong> The input binary string <strong>00000000000000000000000010000000</strong> has a total of one ‘1’ bit.<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> n = 11111111111111111111111111111101<br><strong>Output:</strong> 31<br><strong>Explanation:</strong> The input binary string <strong>11111111111111111111111111111101</strong> has a total of thirty one ‘1’ bits.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   The input must be a <strong>binary string</strong> of length <code>32</code>.<br><br><em>*Follow up:</em></em> If this function is called many times, how would you optimize it?</div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求二进制上1的个数</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>用n &amp; n - 1来去掉最左的1</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li><strong>用n &amp; n - 1来去掉最左的1</strong></li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hammingWeight</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n:</span><br><span class="line">n = n &amp; (n - <span class="number">1</span>)</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/number-of-1-bits/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;W
      
    
    </summary>
    
    
      <category term="Bit Manipulation" scheme="https://shineboy2013.github.com/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 199 Binary Tree Right Side View</title>
    <link href="https://shineboy2013.github.com/2022/01/17/leetcode-199-binary-tree-right-side-view/"/>
    <id>https://shineboy2013.github.com/2022/01/17/leetcode-199-binary-tree-right-side-view/</id>
    <published>2022-01-18T02:48:21.953Z</published>
    <updated>2022-01-18T02:56:38.559Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/binary-tree-right-side-view/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given the <code>root</code> of a binary tree, imagine yourself standing on the <strong>right side</strong> of it, return <em>the values of the nodes you can see ordered from top to bottom</em>.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/02/14/tree.jpg" alt=""><br><br><pre><strong>Input:</strong> root = [1,2,3,null,5,null,4]<br><strong>Output:</strong> [1,3,4]<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> root = [1,null,3]<br><strong>Output:</strong> [1,3]<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> root = []<br><strong>Output:</strong> []<br></pre><br><br><strong>Constraints:</strong><br><br><em>   The number of nodes in the tree is in the range <code>[0, 100]</code>.</em>   <code>-100 &lt;= Node.val &lt;= 100</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>二叉树从右看的节点列表。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>BFS按层访问的最后一个</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>需要知道最后一个，所以引入i，不能用enumerate，只能用len</li><li>deque([root])不是deque(root)</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rightSideView</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line"><span class="keyword">return</span> []</span><br><span class="line">res = []</span><br><span class="line">queue = collections.deque([root])</span><br><span class="line"><span class="keyword">while</span> queue:</span><br><span class="line">i, len_q = <span class="number">0</span>, len(queue) <span class="comment"># remember</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(len_q):</span><br><span class="line">node = queue.popleft()</span><br><span class="line"><span class="keyword">if</span> i == len_q - <span class="number">1</span>:</span><br><span class="line">res.append(node.val)</span><br><span class="line"><span class="keyword">if</span> node.left:</span><br><span class="line">queue.append(node.left)</span><br><span class="line"><span class="keyword">if</span> node.right:</span><br><span class="line">queue.append(node.right)</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/binary-tree-right-side-view/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;di
      
    
    </summary>
    
    
      <category term="Facebook" scheme="https://shineboy2013.github.com/tags/Facebook/"/>
    
      <category term="Tree" scheme="https://shineboy2013.github.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 189 Rotate Array</title>
    <link href="https://shineboy2013.github.com/2022/01/17/leetcode-189-rotate-array/"/>
    <id>https://shineboy2013.github.com/2022/01/17/leetcode-189-rotate-array/</id>
    <published>2022-01-18T01:05:40.174Z</published>
    <updated>2022-01-18T01:53:48.855Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/rotate-array/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given an array, rotate the array to the right by <code>k</code> steps, where <code>k</code> is non-negative.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> nums = [1,2,3,4,5,6,7], k = 3<br><strong>Output:</strong> [5,6,7,1,2,3,4]<br><strong>Explanation:</strong><br>rotate 1 steps to the right: [7,1,2,3,4,5,6]<br>rotate 2 steps to the right: [6,7,1,2,3,4,5]<br>rotate 3 steps to the right: [5,6,7,1,2,3,4]<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> nums = [-1,-100,3,99], k = 2<br><strong>Output:</strong> [3,99,-1,-100]<br><strong>Explanation:</strong><br>rotate 1 steps to the right: [99,-1,-100,3]<br>rotate 2 steps to the right: [3,99,-1,-100]<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= nums.length &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></em>   <code>-2&lt;sup&gt;31&lt;/sup&gt; &lt;= nums[i] &lt;= 2&lt;sup&gt;31&lt;/sup&gt; - 1</code><br><em>   <code>0 &lt;= k &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code><br><br><strong>Follow up:</strong></em>   Try to come up with as many solutions as you can. There are at least <strong>three</strong> different ways to solve this problem.<br>*   Could you do it in-place with <code>O(1)</code> extra space?<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>数组原地向右旋转k位<br><img src="/images/L189.png" alt=""><br>证明如上图，比如[1,2,3,4,5,6,7]中，A = [1,2,3,4], B = [5,6,7]先整体reverse再分别reverse。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>N/A</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>k会大于数组大小，所以取mod</li><li>Python中reverse一个sublist，方法先取sublist再倒转</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(self, nums: List[int], k: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">k = k % len(nums) <span class="comment"># remember</span></span><br><span class="line">nums[:] = nums[::<span class="number">-1</span>]</span><br><span class="line">nums[:k] = nums[:k][::<span class="number">-1</span>] <span class="comment"># remember how to reverse sublist</span></span><br><span class="line">nums[k:] = nums[k:][::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/rotate-array/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;Given
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Math" scheme="https://shineboy2013.github.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 169 Majority Element</title>
    <link href="https://shineboy2013.github.com/2022/01/17/leetcode-169-majority-element/"/>
    <id>https://shineboy2013.github.com/2022/01/17/leetcode-169-majority-element/</id>
    <published>2022-01-18T00:23:31.929Z</published>
    <updated>2022-01-18T00:29:24.314Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/majority-element/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given an array <code>nums</code> of size <code>n</code>, return <em>the majority element</em>.<br><br>The majority element is the element that appears more than <code>⌊n / 2⌋</code> times. You may assume that the majority element always exists in the array.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> nums = [3,2,3]<br><strong>Output:</strong> 3<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> nums = [2,2,1,1,1,2,2]<br><strong>Output:</strong> 2<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>n == nums.length</code></em>   <code>1 &lt;= n &lt;= 5 * 10&lt;sup&gt;4&lt;/sup&gt;</code><br><em>   <code>-2&lt;sup&gt;31&lt;/sup&gt; &lt;= nums[i] &lt;= 2&lt;sup&gt;31&lt;/sup&gt; - 1</code><br><br><em>*Follow-up:</em></em> Could you solve the problem in linear time and in <code>O(1)</code> space?</div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求数组中的众数</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>编程之美的水王法</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">candidate, count = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line"><span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">candidate = nums[i]</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> nums[i] == candidate:</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">count -= <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> candidate</span><br></pre></td></tr></table></figure></li></ol><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/majority-element/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;G
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 163 Missing Ranges</title>
    <link href="https://shineboy2013.github.com/2022/01/17/leetcode-163-missing-ranges/"/>
    <id>https://shineboy2013.github.com/2022/01/17/leetcode-163-missing-ranges/</id>
    <published>2022-01-17T23:57:10.206Z</published>
    <updated>2022-01-18T00:06:55.812Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/missing-ranges/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>You are given an inclusive range <code>[lower, upper]</code> and a <strong>sorted unique</strong> integer array <code>nums</code>, where all elements are in the inclusive range.<br><br>A number <code>x</code> is considered <strong>missing</strong> if <code>x</code> is in the range <code>[lower, upper]</code> and <code>x</code> is not in <code>nums</code>.<br><br>Return <em>the <strong>smallest sorted</strong> list of ranges that <strong>cover every missing number exactly</strong></em>. That is, no element of <code>nums</code> is in any of the ranges, and each missing number is in one of the ranges.<br><br>Each range <code>[a,b]</code> in the list should be output as:<br><br><em>   <code>&quot;a-&gt;b&quot;</code> if <code>a != b</code></em>   <code>&quot;a&quot;</code> if <code>a == b</code><br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> nums = [0,1,3,50,75], lower = 0, upper = 99<br><strong>Output:</strong> [“2”,”4-&gt;49”,”51-&gt;74”,”76-&gt;99”]<br><strong>Explanation:</strong> The ranges are:<br>[2,2] –&gt; “2”<br>[4,49] –&gt; “4-&gt;49”<br>[51,74] –&gt; “51-&gt;74”<br>[76,99] –&gt; “76-&gt;99”<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> nums = [-1], lower = -1, upper = -1<br><strong>Output:</strong> []<br><strong>Explanation:</strong> There are no missing ranges since there are no missing numbers.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= lower &lt;= upper &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code></em>   <code>0 &lt;= nums.length &lt;= 100</code><br><em>   <code>lower &lt;= nums[i] &lt;= upper</code></em>   All the values of <code>nums</code> are <strong>unique</strong>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>给定一个范围[lower, upper]和数组表示这个范围有的数，求缺失数范围</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>简单题。也是数学题<br>公式为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[nums[i-1] + 1, nums[i] - 1]</span><br></pre></td></tr></table></figure></p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>缺失数范围公式为[nums[i-1] + 1, nums[i] - 1], 需要一个函数来处理若范围内仅含一个数或多个数的情况</li><li>题目条件lower, upper在数组范围之外，所以不妨<strong>将lower, upper加到数组中</strong>，同一处理，但是由于lower和upper表示缺失数，而数组表示含有数。所以将lower - 1和upper + 1加到数组</li><li><strong>数组可能为空</strong>，要特别处理Line 3</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findMissingRanges</span><span class="params">(self, nums: List[int], lower: int, upper: int)</span> -&gt; List[str]:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> nums: <span class="comment"># remember</span></span><br><span class="line"><span class="keyword">return</span> [self.get_missing_str(lower, upper)]</span><br><span class="line">res = []</span><br><span class="line">nums.insert(<span class="number">0</span>, lower - <span class="number">1</span>)</span><br><span class="line">nums.append(upper + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line"><span class="comment"># [nums[i-1] + 1, n - 1]</span></span><br><span class="line"><span class="keyword">if</span> nums[i - <span class="number">1</span>] + <span class="number">1</span> &lt;= nums[i] - <span class="number">1</span>:</span><br><span class="line">res.append(self.get_missing_str(nums[i - <span class="number">1</span>] + <span class="number">1</span>, nums[i] - <span class="number">1</span>))</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_missing_str</span><span class="params">(self, start, end)</span>:</span></span><br><span class="line"><span class="keyword">if</span> start == end:</span><br><span class="line"><span class="keyword">return</span> str(start)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> str(start) + <span class="string">'-&gt;'</span> + str(end)</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/missing-ranges/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;You
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 160 Intersection of Two Linked Lists</title>
    <link href="https://shineboy2013.github.com/2022/01/17/leetcode-160-intersection-of-two-linked-lists/"/>
    <id>https://shineboy2013.github.com/2022/01/17/leetcode-160-intersection-of-two-linked-lists/</id>
    <published>2022-01-17T22:18:24.026Z</published>
    <updated>2022-01-17T22:20:54.183Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/intersection-of-two-linked-lists/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given the heads of two singly linked-lists <code>headA</code> and <code>headB</code>, return <em>the node at which the two lists intersect</em>. If the two linked lists have no intersection at all, return <code>null</code>.<br><br>For example, the following two linked lists begin to intersect at node <code>c1</code>:<br><br><img src="https://assets.leetcode.com/uploads/2021/03/05/160_statement.png" alt=""><br><br>The test cases are generated such that there are no cycles anywhere in the entire linked structure.<br><br><strong>Note</strong> that the linked lists must <strong>retain their original structure</strong> after the function returns.<br><br><strong>Custom Judge:</strong><br><br>The inputs to the <strong>judge</strong> are given as follows (your program is <strong>not</strong> given these inputs):<br><br><em>   <code>intersectVal</code> - The value of the node where the intersection occurs. This is <code>0</code> if there is no intersected node.</em>   <code>listA</code> - The first linked list.<br><em>   <code>listB</code> - The second linked list.</em>   <code>skipA</code> - The number of nodes to skip ahead in <code>listA</code> (starting from the head) to get to the intersected node.<br><em>   <code>skipB</code> - The number of nodes to skip ahead in <code>listB</code> (starting from the head) to get to the intersected node.<br><br>The judge will then create the linked structure based on these inputs and pass the two heads, <code>headA</code> and <code>headB</code> to your program. If you correctly return the intersected node, then your solution will be <strong>accepted</strong>.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/03/05/160_example_1_1.png" alt=""><br><br><pre><strong>Input:</strong> intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3<br><strong>Output:</strong> Intersected at ‘8’<br><strong>Explanation:</strong> The intersected node’s value is 8 (note that this must not be 0 if the two lists intersect).<br>From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.<br></pre><br><br><strong>Example 2:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/03/05/160_example_2.png" alt=""><br><br><pre><strong>Input:</strong> intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1<br><strong>Output:</strong> Intersected at ‘2’<br><strong>Explanation:</strong> The intersected node’s value is 2 (note that this must not be 0 if the two lists intersect).<br>From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.<br></pre><br><br><strong>Example 3:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/03/05/160_example_3.png" alt=""><br><br><pre><strong>Input:</strong> intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2<br><strong>Output:</strong> No intersection<br><strong>Explanation:</strong> From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.<br>Explanation: The two lists do not intersect, so return null.<br></pre><br><br><strong>Constraints:</strong></em>   The number of nodes of <code>listA</code> is in the <code>m</code>.<br><em>   The number of nodes of <code>listB</code> is in the <code>n</code>.</em>   <code>1 &lt;= m, n &lt;= 3 * 10&lt;sup&gt;4&lt;/sup&gt;</code><br><em>   <code>1 &lt;= Node.val &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></em>   <code>0 &lt;= skipA &lt; m</code><br><em>   <code>0 &lt;= skipB &lt; n</code></em>   <code>intersectVal</code> is <code>0</code> if <code>listA</code> and <code>listB</code> do not intersect.<br><em>   <code>intersectVal == listA[skipA] == listB[skipB]</code> if <code>listA</code> and <code>listB</code> intersect.<br><br><em>*Follow up:</em></em> Could you write a solution that runs in <code>O(m + n)</code> time and use only <code>O(1)</code> memory?</div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求两LL的相交点</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>类似于<a href="https://shineboy2013.github.io/2021/12/28/lee-1650/" target="_blank" rel="noopener">LeetCode 1650 Lowest Common Ancestor of a Binary Tree III</a>.</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getIntersectionNode</span><span class="params">(self, headA: ListNode, headB: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">a_set = set()</span><br><span class="line">it = headA</span><br><span class="line"><span class="keyword">while</span> it:</span><br><span class="line">a_set.add(it)</span><br><span class="line">it = it.next</span><br><span class="line">it = headB</span><br><span class="line"><span class="keyword">while</span> it:</span><br><span class="line"><span class="keyword">if</span> it <span class="keyword">in</span> a_set:</span><br><span class="line"><span class="keyword">return</span> it</span><br><span class="line">it = it.next</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/intersection-of-two-linked-lists/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p
      
    
    </summary>
    
    
      <category term="Linked List" scheme="https://shineboy2013.github.com/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 152 Maximum Product Subarray</title>
    <link href="https://shineboy2013.github.com/2022/01/17/leetcode-152-maximum-product-subarray/"/>
    <id>https://shineboy2013.github.com/2022/01/17/leetcode-152-maximum-product-subarray/</id>
    <published>2022-01-17T21:36:02.238Z</published>
    <updated>2022-01-18T00:02:57.097Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/maximum-product-subarray/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given an integer array <code>nums</code>, find a contiguous non-empty subarray within the array that has the largest product, and return <em>the product</em>.<br><br>The test cases are generated so that the answer will fit in a <strong>32-bit</strong> integer.<br><br>A <strong>subarray</strong> is a contiguous subsequence of the array.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> nums = [2,3,-2,4]<br><strong>Output:</strong> 6<br><strong>Explanation:</strong> [2,3] has the largest product 6.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> nums = [-2,0,-1]<br><strong>Output:</strong> 0<br><strong>Explanation:</strong> The result cannot be 2, because [-2,-1] is not a subarray.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   `1 &lt;= nums.length &lt;= 2 </em> 10<sup>4</sup><code>*</code>-10 &lt;= nums[i] &lt;= 10<code>*   The product of any prefix or suffix of</code>nums` is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求子数组最大积</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>类似于LeetCode 053 Maximum Subarray求子数组最大和，用DP。</p><p>递归式； dp为以某个数为结尾的最大子数组积，dp2为以某个数为结尾的最小子数组积<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i] = max(num[i], dp[i-1] * num[i], dp2[i-1] * num[i])</span><br><span class="line">dp2[i] = min(num[i], dp[i-1] * num[i], dp2[i-1] * num[i])</span><br></pre></td></tr></table></figure></p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>由于负负得正，所以是多状态DP。需要同时赋值</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dp[i] = max(num[i], dp[i-1] * num[i], dp2[i-1] * num[i])</span></span><br><span class="line"><span class="comment"># dp2[i] = min(num[i], dp[i-1] * num[i], dp2[i-1] * num[i])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxProduct</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">max_p, min_p, res = <span class="number">1</span>, <span class="number">1</span>, float(<span class="string">'-inf'</span>)</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line"><span class="comment"># remember assign same time</span></span><br><span class="line">max_p, min_p = max(n, max_p * n, min_p * n), min(n, max_p * n, min_p * n) <span class="comment"># 4, -48 | 4, -8, -48</span></span><br><span class="line">res = max(res, max_p) <span class="comment"># 6</span></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/maximum-product-subarray/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;
      
    
    </summary>
    
    
      <category term="Dynamic Programming" scheme="https://shineboy2013.github.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 151 Reverse Words in a String</title>
    <link href="https://shineboy2013.github.com/2022/01/17/leetcode-151-reverse-words-in-a-stringsolution/"/>
    <id>https://shineboy2013.github.com/2022/01/17/leetcode-151-reverse-words-in-a-stringsolution/</id>
    <published>2022-01-17T20:18:47.685Z</published>
    <updated>2022-01-17T20:21:26.099Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/reverse-words-in-a-string/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given an input string <code>s</code>, reverse the order of the <strong>words</strong>.<br><br>A <strong>word</strong> is defined as a sequence of non-space characters. The <strong>words</strong> in <code>s</code> will be separated by at least one space.<br><br>Return <em>a string of the words in reverse order concatenated by a single space.</em><br><br><strong>Note</strong> that <code>s</code> may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> s = “the sky is blue”<br><strong>Output:</strong> “blue is sky the”<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> s = “  hello world  “<br><strong>Output:</strong> “world hello”<br><strong>Explanation:</strong> Your reversed string should not contain leading or trailing spaces.<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> s = “a good   example”<br><strong>Output:</strong> “example good a”<br><strong>Explanation:</strong> You need to reduce multiple spaces between two words to a single space in the reversed string.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= s.length &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></em>   <code>s</code> contains English letters (upper-case and lower-case), digits, and spaces <code>&#39; &#39;</code>.<br><em>   There is <strong>at least one</strong> word in <code>s</code>.<br><br><strong>Follow-up: </strong>If the string data type is mutable in your language, can you solve it <em>*in-place</em></em> with <code>O(1)</code> extra space?<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>反转字符串中的单词顺序</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>N/A</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>word不能为空，单词之间可能含多个空格</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseWords</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">words = s.split(<span class="string">' '</span>)</span><br><span class="line">words_without_space = [word <span class="keyword">for</span> word <span class="keyword">in</span> words <span class="keyword">if</span> word]</span><br><span class="line"><span class="keyword">return</span> <span class="string">' '</span>.join(words_without_space[::<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-words-in-a-string/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;
      
    
    </summary>
    
    
      <category term="String" scheme="https://shineboy2013.github.com/tags/String/"/>
    
      <category term="Microsoft" scheme="https://shineboy2013.github.com/tags/Microsoft/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 150 Evaluate Reverse Polish Notation</title>
    <link href="https://shineboy2013.github.com/2022/01/17/leetcode-150-evaluate-reverse-polish-notation/"/>
    <id>https://shineboy2013.github.com/2022/01/17/leetcode-150-evaluate-reverse-polish-notation/</id>
    <published>2022-01-17T10:16:11.861Z</published>
    <updated>2022-01-17T10:24:32.591Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/evaluate-reverse-polish-notation/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Evaluate the value of an arithmetic expression in <a href="http://en.wikipedia.org/wiki/Reverse_Polish_notation" target="_blank" rel="noopener">Reverse Polish Notation</a>.<br><br>Valid operators are <code>+</code>, <code>-</code>, <code>*</code>, and <code>/</code>. Each operand may be an integer or another expression.<br><br><strong>Note</strong> that division between two integers should truncate toward zero.<br><br>It is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> tokens = [“2”,”1”,”+”,”3”,”<em>“]<br><strong>Output:</strong> 9<br><strong>Explanation:</strong> ((2 + 1) </em> 3) = 9<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> tokens = [“4”,”13”,”5”,”/“,”+”]<br><strong>Output:</strong> 6<br><strong>Explanation:</strong> (4 + (13 / 5)) = 6<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> tokens = [“10”,”6”,”9”,”3”,”+”,”-11”,”<em>“,”/“,”</em>“,”17”,”+”,”5”,”+”]<br><strong>Output:</strong> 22<br><strong>Explanation:</strong> ((10 <em> (6 / ((9 + 3) </em> -11))) + 17) + 5<br>= ((10 <em> (6 / (12 </em> -11))) + 17) + 5<br>= ((10 <em> (6 / -132)) + 17) + 5<br>= ((10 </em> 0) + 17) + 5<br>= (0 + 17) + 5<br>= 17 + 5<br>= 22<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= tokens.length &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></em>   <code>tokens[i]</code> is either an operator: <code>&quot;+&quot;</code>, <code>&quot;-&quot;</code>, <code>&quot;*&quot;</code>, or <code>&quot;/&quot;</code>, or an integer in the range <code>[-200, 200]</code>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求逆波兰式计算结果</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>逆波兰式用Stack</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li><strong>左右操作数</strong>是有区别的，所以stack先出栈的为右操作数，后出栈的为左操作数</li><li>最容易错的是向下取整, 题目返回要求整数。所以<strong>要除法后取整int(prev / num)</strong>。这点和LeetCode 227 Basic Calculator II一样。也是和Java一致，用类型转化来实现，而//是比它小的整数如-2.8就是-3，只在负数是有区别</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evalRPN</span><span class="params">(self, tokens: List[str])</span> -&gt; int:</span></span><br><span class="line">stack = []</span><br><span class="line"><span class="keyword">for</span> token <span class="keyword">in</span> tokens:</span><br><span class="line"><span class="keyword">if</span> token <span class="keyword">in</span> <span class="string">'+-*/'</span>:</span><br><span class="line">operand_right = stack.pop() <span class="comment"># remember</span></span><br><span class="line">operand_left = stack.pop()</span><br><span class="line"><span class="keyword">if</span> token == <span class="string">'+'</span>:</span><br><span class="line">stack.append(operand_left + operand_right)</span><br><span class="line"><span class="keyword">elif</span> token == <span class="string">'-'</span>:</span><br><span class="line">stack.append(operand_left - operand_right)</span><br><span class="line"><span class="keyword">elif</span> token == <span class="string">'*'</span>:</span><br><span class="line">stack.append(operand_left * operand_right)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">stack.append(int(operand_left / operand_right)) <span class="comment"># remember</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">stack.append(int(token))</span><br><span class="line"><span class="keyword">return</span> stack[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/evaluate-reverse-polish-notation/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Math" scheme="https://shineboy2013.github.com/tags/Math/"/>
    
      <category term="Stack" scheme="https://shineboy2013.github.com/tags/Stack/"/>
    
      <category term="Google" scheme="https://shineboy2013.github.com/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 149 Max Points on a Line</title>
    <link href="https://shineboy2013.github.com/2022/01/17/leetcode-149-max-points-on-a-line/"/>
    <id>https://shineboy2013.github.com/2022/01/17/leetcode-149-max-points-on-a-line/</id>
    <published>2022-01-17T09:39:16.828Z</published>
    <updated>2022-01-17T09:47:03.175Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/max-points-on-a-line/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given an array of <code>points</code> where <code>points[i] = [x&lt;sub&gt;i&lt;/sub&gt;, y&lt;sub&gt;i&lt;/sub&gt;]</code> represents a point on the <strong>X-Y</strong> plane, return <em>the maximum number of points that lie on the same straight line</em>.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/02/25/plane1.jpg" alt=""><br><br><pre><strong>Input:</strong> points = [[1,1],[2,2],[3,3]]<br><strong>Output:</strong> 3<br></pre><br><br><strong>Example 2:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/02/25/plane2.jpg" alt=""><br><br><pre><strong>Input:</strong> points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]<br><strong>Output:</strong> 4<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= points.length &lt;= 300</code></em>   <code>points[i].length == 2</code><br><em>   <code>-10&lt;sup&gt;4&lt;/sup&gt; &lt;= x&lt;sub&gt;i&lt;/sub&gt;, y&lt;sub&gt;i&lt;/sub&gt; &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></em>   All the <code>points</code> are <strong>unique</strong>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求在同一直线上的点的最大个数</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>固定一个点，求其与其他点的斜率是否相同，记录在map中。通过同一个点，若斜率相同，肯定在同一直线上。这是几何题。</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>两重循环，外循环为每个点，内循环为该点和其他的点的斜率。<strong>斜率可以为无穷大</strong></li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxPoints</span><span class="params">(self, points: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(points)):</span><br><span class="line">slope_to_count = collections.defaultdict(int)</span><br><span class="line">max_p = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(points)):</span><br><span class="line">slope = (points[j][<span class="number">1</span>] - points[i][<span class="number">1</span>]) / (points[j][<span class="number">0</span>] - points[i][<span class="number">0</span>]) \</span><br><span class="line"><span class="keyword">if</span> points[j][<span class="number">0</span>] - points[i][<span class="number">0</span>] != <span class="number">0</span> <span class="keyword">else</span> float(<span class="string">'inf'</span>) <span class="comment"># remember line is y-axis</span></span><br><span class="line">slope_to_count[slope] += <span class="number">1</span></span><br><span class="line">max_p = max(max_p, slope_to_count[slope])</span><br><span class="line">res = max(res, max_p + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n<sup>2</sup>)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/max-points-on-a-line/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
    
      <category term="Math" scheme="https://shineboy2013.github.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 142 Linked List Cycle II</title>
    <link href="https://shineboy2013.github.com/2022/01/16/leetcode-142-linked-list-cycle-ii/"/>
    <id>https://shineboy2013.github.com/2022/01/16/leetcode-142-linked-list-cycle-ii/</id>
    <published>2022-01-17T07:37:27.907Z</published>
    <updated>2022-01-17T07:54:28.326Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given the <code>head</code> of a linked list, return <em>the node where the cycle begins. If there is no cycle, return</em> <code>null</code>.<br><br>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the <code>next</code> pointer. Internally, <code>pos</code> is used to denote the index of the node that tail’s <code>next</code> pointer is connected to (<strong>0-indexed</strong>). It is <code>-1</code> if there is no cycle. <strong>Note that</strong> <code>pos</code> <strong>is not passed as a parameter</strong>.<br><br><strong>Do not modify</strong> the linked list.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" alt=""><br><br><pre><strong>Input:</strong> head = [3,2,0,-4], pos = 1<br><strong>Output:</strong> tail connects to node index 1<br><strong>Explanation:</strong> There is a cycle in the linked list, where tail connects to the second node.<br></pre><br><br><strong>Example 2:</strong><br><br><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png" alt=""><br><br><pre><strong>Input:</strong> head = [1,2], pos = 0<br><strong>Output:</strong> tail connects to node index 0<br><strong>Explanation:</strong> There is a cycle in the linked list, where tail connects to the first node.<br></pre><br><br><strong>Example 3:</strong><br><br><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png" alt=""><br><br><pre><strong>Input:</strong> head = [1], pos = -1<br><strong>Output:</strong> no cycle<br><strong>Explanation:</strong> There is no cycle in the linked list.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   The number of the nodes in the list is in the range <code>[0, 10&lt;sup&gt;4&lt;/sup&gt;]</code>.</em>   <code>-10&lt;sup&gt;5&lt;/sup&gt; &lt;= Node.val &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code><br><em>   <code>pos</code> is <code>-1</code> or a <strong>valid index</strong> in the linked-list.<br><br><em>*Follow up:</em></em> Can you solve it using <code>O(1)</code> (i.e. constant) memory?<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求LL是否存在循环，若存在返回循环起点</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>先用快慢指针找到相遇点，然后将slow指针移回fake_head起点，同速度移动直到相遇即为所求</p><p>证明：<br><img src="/images/L142.png" alt=""><br>A为起点，B为快慢指针相遇点，假设长度分别为z, y, x<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fast在相遇时走过的距离为: z + x + y + y, 比slow多走一圈  </span><br><span class="line">slow在相遇时走过的距离为: z + y  </span><br><span class="line">由于fast速度是slow的两倍，所以相遇时，同一时间内，走过的距离也是两倍。</span><br><span class="line">z + x + y + y = 2 * (z + y)</span><br><span class="line">x = z得证</span><br></pre></td></tr></table></figure></p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>循环可能不存在，此时返回None</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detectCycle</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">fake_head = ListNode(<span class="number">0</span>)</span><br><span class="line">fake_head.next = head</span><br><span class="line">fast, slow = fake_head, fake_head</span><br><span class="line"><span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line"><span class="keyword">if</span> fast != fake_head <span class="keyword">and</span> fast == slow:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">fast, slow = fast.next.next, slow.next</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> fast <span class="keyword">or</span> <span class="keyword">not</span> fast.next:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">None</span> <span class="comment"># remember</span></span><br><span class="line">slow = fake_head</span><br><span class="line"><span class="keyword">while</span> fast != slow:</span><br><span class="line">fast, slow = fast.next, slow.next</span><br><span class="line"><span class="keyword">return</span> fast</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/linked-list-cycle-ii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
    
      <category term="Linked List" scheme="https://shineboy2013.github.com/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 141 Linked List Cycle</title>
    <link href="https://shineboy2013.github.com/2022/01/16/leetcode-141-linked-list-cycle/"/>
    <id>https://shineboy2013.github.com/2022/01/16/leetcode-141-linked-list-cycle/</id>
    <published>2022-01-17T05:38:38.947Z</published>
    <updated>2022-01-17T05:48:50.514Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/linked-list-cycle/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given <code>head</code>, the head of a linked list, determine if the linked list has a cycle in it.<br><br>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the <code>next</code> pointer. Internally, <code>pos</code> is used to denote the index of the node that tail’s <code>next</code> pointer is connected to. <strong>Note that <code>pos</code> is not passed as a parameter</strong>.<br><br>Return <code>true</code> <em>if there is a cycle in the linked list</em>. Otherwise, return <code>false</code>.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" alt=""><br><br><pre><strong>Input:</strong> head = [3,2,0,-4], pos = 1<br><strong>Output:</strong> true<br><strong>Explanation:</strong> There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).<br></pre><br><br><strong>Example 2:</strong><br><br><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png" alt=""><br><br><pre><strong>Input:</strong> head = [1,2], pos = 0<br><strong>Output:</strong> true<br><strong>Explanation:</strong> There is a cycle in the linked list, where the tail connects to the 0th node.<br></pre><br><br><strong>Example 3:</strong><br><br><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png" alt=""><br><br><pre><strong>Input:</strong> head = [1], pos = -1<br><strong>Output:</strong> false<br><strong>Explanation:</strong> There is no cycle in the linked list.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   The number of the nodes in the list is in the range <code>[0, 10&lt;sup&gt;4&lt;/sup&gt;]</code>.</em>   <code>-10&lt;sup&gt;5&lt;/sup&gt; &lt;= Node.val &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code><br><em>   <code>pos</code> is <code>-1</code> or a <strong>valid index</strong> in the linked-list.<br><br><em>*Follow up:</em></em> Can you solve it using <code>O(1)</code> (i.e. constant) memory?<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求LL是否存在循环</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>快慢指针。若存在循环就一定会相遇，这是显然的。</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>一开始快慢指针指向fake_head节点，进入循环再次相等(不等于fake_head)即存在循环</li><li><strong>要引入fake_head</strong>，否则若一开始指向首节点，下次相等可能仍在首节点(如两个节点循环)，这样不能区别是否再次相等</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head: ListNode)</span> -&gt; bool:</span></span><br><span class="line">fake_head = ListNode(<span class="number">0</span>)</span><br><span class="line">fake_head.next = head</span><br><span class="line">fast, slow = fake_head, fake_head</span><br><span class="line"><span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line"><span class="keyword">if</span> fast != fake_head <span class="keyword">and</span> fast == slow: <span class="comment"># remember to move first then judge</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">fast, slow = fast.next.next, slow.next</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/linked-list-cycle/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;
      
    
    </summary>
    
    
      <category term="Linked List" scheme="https://shineboy2013.github.com/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 136 Single Number</title>
    <link href="https://shineboy2013.github.com/2022/01/16/leetcode-136-single-number/"/>
    <id>https://shineboy2013.github.com/2022/01/16/leetcode-136-single-number/</id>
    <published>2022-01-17T03:43:56.937Z</published>
    <updated>2022-01-17T03:50:48.273Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/single-number/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given a <strong>non-empty</strong> array of integers <code>nums</code>, every element appears <em>twice</em> except for one. Find that single one.<br><br>You must implement a solution with a linear runtime complexity and use only constant extra space.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> nums = [2,2,1]<br><strong>Output:</strong> 1<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> nums = [4,1,2,1,2]<br><strong>Output:</strong> 4<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> nums = [1]<br><strong>Output:</strong> 1<br></pre><br><br><strong>Constraints:</strong><br><br><em>   `1 &lt;= nums.length &lt;= 3 </em> 10<sup>4</sup><code>*</code>-3 <em> 10<sup>4</sup> &lt;= nums[i] &lt;= 3 </em> 10<sup>4</sup>`<br>*   Each element in the array appears twice except for one element which appears only once.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>数列中，所有数都出现两次除了一个数，求这一个数</p><h3 id="异或解题思路-推荐-："><a href="#异或解题思路-推荐-：" class="headerlink" title="异或解题思路(推荐)："></a><strong>异或解题思路(推荐)：</strong></h3><p>Easy题</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">res ^= n</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></li></ol><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p><hr><h3 id="HashMap算法II解题思路："><a href="#HashMap算法II解题思路：" class="headerlink" title="HashMap算法II解题思路："></a><strong>HashMap算法II解题思路：</strong></h3><p>记录频数，最直观解法</p><h3 id="Python代码：-1"><a href="#Python代码：-1" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleNumber2</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">num_to_count = collections.Counter(nums)</span><br><span class="line"><span class="keyword">return</span> [n <span class="keyword">for</span> n, count <span class="keyword">in</span> num_to_count.items() <span class="keyword">if</span> count == <span class="number">1</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h3 id="算法分析：-1"><a href="#算法分析：-1" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p><hr><h3 id="Math算法III解题思路："><a href="#Math算法III解题思路：" class="headerlink" title="Math算法III解题思路："></a><strong>Math算法III解题思路：</strong></h3><p>用set求单一元素和乘以2减去原数组的和</p><h3 id="Python代码：-2"><a href="#Python代码：-2" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleNumber3</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * sum(set(nums)) - sum(nums)</span><br></pre></td></tr></table></figure><h3 id="算法分析：-2"><a href="#算法分析：-2" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/single-number/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;Give
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Bit Manipulation" scheme="https://shineboy2013.github.com/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 129 Sum Root to Leaf Numbers</title>
    <link href="https://shineboy2013.github.com/2022/01/16/leetcode-129-sum-root-to-leaf-numbers/"/>
    <id>https://shineboy2013.github.com/2022/01/16/leetcode-129-sum-root-to-leaf-numbers/</id>
    <published>2022-01-17T03:19:03.139Z</published>
    <updated>2022-01-17T03:24:10.229Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/sum-root-to-leaf-numbers/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>You are given the <code>root</code> of a binary tree containing digits from <code>0</code> to <code>9</code> only.<br><br>Each root-to-leaf path in the tree represents a number.<br><br><em>   For example, the root-to-leaf path <code>1 -&gt; 2 -&gt; 3</code> represents the number <code>123</code>.<br><br>Return <em>the total sum of all root-to-leaf numbers</em>. Test cases are generated so that the answer will fit in a <strong>32-bit</strong> integer.<br><br>A <strong>leaf</strong> node is a node with no children.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/02/19/num1tree.jpg" alt=""><br><br><pre><strong>Input:</strong> root = [1,2,3]<br><strong>Output:</strong> 25<br><strong>Explanation:</strong><br>The root-to-leaf path <code>1-&gt;2</code> represents the number <code>12</code>.<br>The root-to-leaf path <code>1-&gt;3</code> represents the number <code>13</code>.<br>Therefore, sum = 12 + 13 = <code>25</code>.<br></pre><br><br><strong>Example 2:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/02/19/num2tree.jpg" alt=""><br><br><pre><strong>Input:</strong> root = [4,9,0,5,1]<br><strong>Output:</strong> 1026<br><strong>Explanation:</strong><br>The root-to-leaf path <code>4-&gt;9-&gt;5</code> represents the number 495.<br>The root-to-leaf path <code>4-&gt;9-&gt;1</code> represents the number 491.<br>The root-to-leaf path <code>4-&gt;0</code> represents the number 40.<br>Therefore, sum = 495 + 491 + 40 = <code>1026</code>.<br></pre><br><br><strong>Constraints:</strong></em>   The number of nodes in the tree is in the range <code>[1, 1000]</code>.<br><em>   <code>0 &lt;= Node.val &lt;= 9</code></em>   The depth of the tree will not exceed <code>10</code>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>由root到叶子节点的数字组成多位数的数，求这些数的总和</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>题目提到叶子节点，所以DFS中要含叶子节点的情况</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>题目提到叶子节点，所以DFS中要含叶子节点的情况。当然还要有root为空的情况，这样root.left和root.right不用非空检查，代码更简洁</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumNumbers</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line"><span class="keyword">return</span> self.dfs(root, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, root, path)</span>:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">current = path * <span class="number">10</span> + root.val</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right:</span><br><span class="line"><span class="keyword">return</span> current</span><br><span class="line"><span class="comment">#if root.left #if root.right:</span></span><br><span class="line"><span class="keyword">return</span> self.dfs(root.left, current) + self.dfs(root.right, current)</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/sum-root-to-leaf-numbers/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;
      
    
    </summary>
    
    
      <category term="Facebook" scheme="https://shineboy2013.github.com/tags/Facebook/"/>
    
      <category term="Tree" scheme="https://shineboy2013.github.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 125 Valid Palindrome</title>
    <link href="https://shineboy2013.github.com/2022/01/16/lee-125-valid-palindrome/"/>
    <id>https://shineboy2013.github.com/2022/01/16/lee-125-valid-palindrome/</id>
    <published>2022-01-17T01:12:52.915Z</published>
    <updated>2022-01-17T01:24:20.982Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/valid-palindrome" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>A phrase is a <strong>palindrome</strong> if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.<br><br>Given a string <code>s</code>, return <code>true</code> <em>if it is a <strong>palindrome</strong>, or</em> <code>false</code> <em>otherwise</em>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> s = “A man, a plan, a canal: Panama”<br><strong>Output:</strong> true<br><strong>Explanation:</strong> “amanaplanacanalpanama” is a palindrome.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> s = “race a car”<br><strong>Output:</strong> false<br><strong>Explanation:</strong> “raceacar” is not a palindrome.<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> s = “ “<br><strong>Output:</strong> true<br><strong>Explanation:</strong> s is an empty string “” after removing non-alphanumeric characters.<br>Since an empty string reads the same forward and backward, it is a palindrome.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   `1 &lt;= s.length &lt;= 2 </em> 10<sup>5</sup><code>*</code>s` consists only of printable ASCII characters.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求含非字母数字的字符串是否回文，字符串含空格，冒号等. Easy题</p><h3 id="双指针解题思路-推荐-："><a href="#双指针解题思路-推荐-：" class="headerlink" title="双指针解题思路(推荐)："></a><strong>双指针解题思路(推荐)：</strong></h3><p>回文首先考虑用相向双指针</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>比较时，要转换成小写</li><li>外循环left &lt; right条件要复制到内循环中</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">left, right = <span class="number">0</span>, len(s) - <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> left &lt; right:</span><br><span class="line"><span class="keyword">while</span> left &lt; right <span class="keyword">and</span> <span class="keyword">not</span> s[left].isalnum():</span><br><span class="line">left += <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> left &lt; right <span class="keyword">and</span> <span class="keyword">not</span> s[right].isalnum():</span><br><span class="line">right -= <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> s[left].lower() != s[right].lower():</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">left += <span class="number">1</span></span><br><span class="line">right -= <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p><hr><h3 id="reverse法算法II解题思路："><a href="#reverse法算法II解题思路：" class="headerlink" title="reverse法算法II解题思路："></a><strong>reverse法算法II解题思路：</strong></h3><p>reverse字符串比较</p><h3 id="注意事项：-1"><a href="#注意事项：-1" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>比较时，要转换成小写</li></ol><h3 id="Python代码：-1"><a href="#Python代码：-1" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPalindrome2</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">res = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line"><span class="keyword">if</span> char.isalpha() <span class="keyword">or</span> char.isdigit():</span><br><span class="line">res += char.lower()</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span> <span class="keyword">if</span> res == res[::<span class="number">-1</span>] <span class="keyword">else</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><h3 id="算法分析：-1"><a href="#算法分析：-1" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/valid-palindrome&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;A 
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Facebook" scheme="https://shineboy2013.github.com/tags/Facebook/"/>
    
      <category term="Two Pointers" scheme="https://shineboy2013.github.com/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 118 Pascal&#39;s Triangle</title>
    <link href="https://shineboy2013.github.com/2022/01/16/lee-118-pascals-triangle/"/>
    <id>https://shineboy2013.github.com/2022/01/16/lee-118-pascals-triangle/</id>
    <published>2022-01-17T00:37:47.840Z</published>
    <updated>2022-01-17T00:42:16.335Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/pascals-triangle" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given an integer <code>numRows</code>, return the first numRows of <strong>Pascal’s triangle</strong>.<br><br>In <strong>Pascal’s triangle</strong>, each number is the sum of the two numbers directly above it as shown:<br><br><img src="https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif" alt=""><br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> numRows = 5<br><strong>Output:</strong> [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> numRows = 1<br><strong>Output:</strong> [[1]]<br></pre><br><br><strong>Constraints:</strong><br><br>*   <code>1 &lt;= numRows &lt;= 30</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>给定n行，产生n行的杨辉三角</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>用DP按照定义生成，其实类似于Fibonacci数列，不过是二维的，而不是一维。</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>初始值为[1]</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(self, numRows: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">path, res = [<span class="number">1</span>], []</span><br><span class="line">res.append(path)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, numRows):</span><br><span class="line">next_level = []</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(path)):</span><br><span class="line">next_level.append(path[j - <span class="number">1</span>] + path[j])</span><br><span class="line">next_level.insert(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">next_level.append(<span class="number">1</span>)</span><br><span class="line">path = next_level</span><br><span class="line">res.append(list(path))</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(numRows<sup>2</sup>)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/pascals-triangle&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;Gi
      
    
    </summary>
    
    
      <category term="Dynamic Programming" scheme="https://shineboy2013.github.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
</feed>
