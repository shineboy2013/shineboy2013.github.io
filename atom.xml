<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KK&#39;s blog</title>
  
  <subtitle>每天积累多一些</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shineboy2013.github.com/"/>
  <updated>2022-01-19T07:07:20.537Z</updated>
  <id>https://shineboy2013.github.com/</id>
  
  <author>
    <name>KK Shum</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 249 Group Shifted Strings</title>
    <link href="https://shineboy2013.github.com/2022/01/18/leetcode-249-group-shifted-strings/"/>
    <id>https://shineboy2013.github.com/2022/01/18/leetcode-249-group-shifted-strings/</id>
    <published>2022-01-19T07:01:09.770Z</published>
    <updated>2022-01-19T07:07:20.537Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/group-shifted-strings/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>We can shift a string by shifting each of its letters to its successive letter.<br><br><em>   For example, <code>&quot;abc&quot;</code> can be shifted to be <code>&quot;bcd&quot;</code>.<br><br>We can keep shifting the string to form a sequence.</em>   For example, we can keep shifting <code>&quot;abc&quot;</code> to form the sequence: <code>&quot;abc&quot; -&gt; &quot;bcd&quot; -&gt; ... -&gt; &quot;xyz&quot;</code>.<br><br>Given an array of strings <code>strings</code>, group all <code>strings[i]</code> that belong to the same shifting sequence. You may return the answer in <strong>any order</strong>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> strings = [“abc”,”bcd”,”acef”,”xyz”,”az”,”ba”,”a”,”z”]<br><strong>Output:</strong> [[“acef”],[“a”,”z”],[“abc”,”bcd”,”xyz”],[“az”,”ba”]]<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> strings = [“a”]<br><strong>Output:</strong> [[“a”]]<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= strings.length &lt;= 200</code></em>   <code>1 &lt;= strings[i].length &lt;= 50</code><br>*   <code>strings[i]</code> consists of lowercase English letters.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>将单词按等偏移量分组</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>单词分组题，设计一个id。组内的每个单词里字母之间的差值是一致的，如abd, wxz, 差值分别为1和2，这是同一组。</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>求每个单词每个字母之间的差值，用下滑线连接作为id。注意差值可能为负数，所以要取mod变正</li><li>单一字母单词，不存在偏移量，id为空，所以代码不需要特殊处理</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">groupStrings</span><span class="params">(self, strings: List[str])</span> -&gt; List[List[str]]:</span></span><br><span class="line">res = collections.defaultdict(list)</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strings:</span><br><span class="line">_id = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(s)):</span><br><span class="line">_id += str((ord(s[j]) - ord(s[j - <span class="number">1</span>])) % <span class="number">26</span>) + <span class="string">'_'</span></span><br><span class="line">res[_id].append(s)</span><br><span class="line"><span class="keyword">return</span> list(res.values())</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(nm)</code>，空间复杂度<code>O(1)</code>, n为单词个数, m为单词最长长度。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/group-shifted-strings/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;
      
    
    </summary>
    
    
      <category term="String" scheme="https://shineboy2013.github.com/tags/String/"/>
    
      <category term="Facebook" scheme="https://shineboy2013.github.com/tags/Facebook/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 243 Shortest Word Distance</title>
    <link href="https://shineboy2013.github.com/2022/01/18/leetcode-243-shortest-word-distance/"/>
    <id>https://shineboy2013.github.com/2022/01/18/leetcode-243-shortest-word-distance/</id>
    <published>2022-01-19T06:40:05.278Z</published>
    <updated>2022-01-19T06:42:46.603Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/shortest-word-distance/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given an array of strings <code>wordsDict</code> and two different strings that already exist in the array <code>word1</code> and <code>word2</code>, return <em>the shortest distance between these two words in the list</em>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> wordsDict = [“practice”, “makes”, “perfect”, “coding”, “makes”], word1 = “coding”, word2 = “practice”<br><strong>Output:</strong> 3<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> wordsDict = [“practice”, “makes”, “perfect”, “coding”, “makes”], word1 = “makes”, word2 = “coding”<br><strong>Output:</strong> 1<br></pre><br><br><strong>Constraints:</strong><br><br><em>   `1 &lt;= wordsDict.length &lt;= 3 </em> 10<sup>4</sup><code>*</code>1 &lt;= wordsDict[i].length &lt;= 10<code>*</code>wordsDict[i]<code>consists of lowercase English letters.*</code>word1<code>and</code>word2<code>are in</code>wordsDict<code>.*</code>word1 != word2`<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求单词列表中给定的两个单词的最短下标距离</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>同向双指针</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>同向双指针，分别指向两单词，计算结果时必须是找到才比较</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shortestDistance</span><span class="params">(self, wordsDict: List[str], word1: str, word2: str)</span> -&gt; int:</span></span><br><span class="line">p1 = p2 = <span class="number">-1</span></span><br><span class="line">res = float(<span class="string">'inf'</span>)</span><br><span class="line"><span class="keyword">for</span> i, word <span class="keyword">in</span> enumerate(wordsDict):</span><br><span class="line"><span class="keyword">if</span> word == word1:</span><br><span class="line">p1 = i</span><br><span class="line"><span class="keyword">if</span> word == word2:</span><br><span class="line">p2 = i</span><br><span class="line"><span class="keyword">if</span> p1 != <span class="number">-1</span> <span class="keyword">and</span> p2 != <span class="number">-1</span>:</span><br><span class="line">res = min(res, abs(p1 - p2))</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/shortest-word-distance/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br
      
    
    </summary>
    
    
      <category term="String" scheme="https://shineboy2013.github.com/tags/String/"/>
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 242 Valid Anagram</title>
    <link href="https://shineboy2013.github.com/2022/01/18/leetcode-242-valid-anagram/"/>
    <id>https://shineboy2013.github.com/2022/01/18/leetcode-242-valid-anagram/</id>
    <published>2022-01-19T06:20:06.174Z</published>
    <updated>2022-01-19T06:23:31.500Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/valid-anagram/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> <em>if</em> <code>t</code> <em>is an anagram of</em> <code>s</code><em>, and</em> <code>false</code> <em>otherwise</em>.<br><br>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> s = “anagram”, t = “nagaram”<br><strong>Output:</strong> true<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> s = “rat”, t = “car”<br><strong>Output:</strong> false<br></pre><br><br><strong>Constraints:</strong><br><br><em>   `1 &lt;= s.length, t.length &lt;= 5 </em> 10<sup>4</sup><code>*</code>s<code>and</code>t` consist of lowercase English letters.<br><br><strong>Follow up:</strong> What if the inputs contain Unicode characters? How would you adapt your solution to such a case?<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>验证变位词</p><h3 id="频率法解题思路-推荐-："><a href="#频率法解题思路-推荐-：" class="headerlink" title="频率法解题思路(推荐)："></a><strong>频率法解题思路(推荐)：</strong></h3><p>简单题</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isAnagram2</span><span class="params">(self, s: str, t: str)</span> -&gt; bool:</span></span><br><span class="line"><span class="keyword">return</span> collections.Counter(s) == collections.Counter(t)</span><br></pre></td></tr></table></figure></li></ol><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p><hr><h3 id="排序法算法II解题思路："><a href="#排序法算法II解题思路：" class="headerlink" title="排序法算法II解题思路："></a><strong>排序法算法II解题思路：</strong></h3><h3 id="Python代码：-1"><a href="#Python代码：-1" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isAnagram</span><span class="params">(self, s: str, t: str)</span> -&gt; bool:</span></span><br><span class="line"><span class="keyword">return</span> sorted(s) == sorted(t)</span><br></pre></td></tr></table></figure><h3 id="算法分析：-1"><a href="#算法分析：-1" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(nlogn)</code>，空间复杂度<code>O(1)</code> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/valid-anagram/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;Give
      
    
    </summary>
    
    
      <category term="String" scheme="https://shineboy2013.github.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 241 Different Ways to Add Parentheses</title>
    <link href="https://shineboy2013.github.com/2022/01/18/leetcode-241-different-ways-to-add-parentheses/"/>
    <id>https://shineboy2013.github.com/2022/01/18/leetcode-241-different-ways-to-add-parentheses/</id>
    <published>2022-01-19T05:02:03.991Z</published>
    <updated>2022-01-19T05:13:13.752Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/different-ways-to-add-parentheses/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given a string <code>expression</code> of numbers and operators, return <em>all possible results from computing all the different possible ways to group numbers and operators</em>. You may return the answer in <strong>any order</strong>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> expression = “2-1-1”<br><strong>Output:</strong> [0,2]<br><strong>Explanation:</strong><br>((2-1)-1) = 0<br>(2-(1-1)) = 2<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> expression = “2<em>3-4</em>5”<br><strong>Output:</strong> [-34,-14,-10,-10,10]<br><strong>Explanation:</strong><br>(2<em>(3-(4</em>5))) = -34<br>((2<em>3)-(4</em>5)) = -14<br>((2<em>(3-4))</em>5) = -10<br>(2<em>((3-4)</em>5)) = -10<br>(((2<em>3)-4)</em>5) = 10<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= expression.length &lt;= 20</code></em>   <code>expression</code> consists of digits and the operator <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, and <code>&#39;*&#39;</code>.<br>*   All the integer values in the input expression are in the range <code>[0, 99]</code>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>给定一个字符串含数字和加减乘除，求所有加括号方法得到的结果</p><h3 id="Catalan解题思路-推荐-："><a href="#Catalan解题思路-推荐-：" class="headerlink" title="Catalan解题思路(推荐)："></a><strong>Catalan解题思路(推荐)：</strong></h3><p>求所有结果，用DFS，由于需要左右递归，双边递归，所以用Catalan法模板</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li><strong>终止条件返回是一个list</strong></li><li>Python中用eval来计算字符串运算结果返回值为整数，所以归纳左右递归结果要用str转为字符串</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diffWaysToCompute</span><span class="params">(self, expression: str)</span> -&gt; List[int]:</span></span><br><span class="line"><span class="keyword">if</span> expression.isdigit():</span><br><span class="line"><span class="keyword">return</span> [int(expression)] <span class="comment"># remember to use list</span></span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i, char <span class="keyword">in</span> enumerate(expression):</span><br><span class="line"><span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">'+-*/'</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">left_res = self.diffWaysToCompute(expression[:i])</span><br><span class="line">right_res = self.diffWaysToCompute(expression[i + <span class="number">1</span>:])</span><br><span class="line">res += [eval(str(_l) + char + str(_r)) <span class="keyword">for</span> _l <span class="keyword">in</span> left_res <span class="keyword">for</span> _r <span class="keyword">in</span> right_res] <span class="comment"># remember eval and str</span></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度Catalan数为<code>O(C[n] += C[i-1]*C[n-i])</code>，空间复杂度<code>O(1)</code></p><hr><h3 id="记忆性搜索算法II解题思路："><a href="#记忆性搜索算法II解题思路：" class="headerlink" title="记忆性搜索算法II解题思路："></a><strong>记忆性搜索算法II解题思路：</strong></h3><p>大致同上，只不过加入记忆性搜索算法，但优化不算大</p><h3 id="Python代码：-1"><a href="#Python代码：-1" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diffWaysToCompute2</span><span class="params">(self, expression)</span> -&gt; List[int]:</span></span><br><span class="line"><span class="keyword">return</span> self.dfs(expression, &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, expression: str, cache)</span> -&gt; List[int]:</span></span><br><span class="line"><span class="keyword">if</span> expression.isdigit():</span><br><span class="line"><span class="keyword">return</span> [int(expression)] <span class="comment"># remember to use list</span></span><br><span class="line"><span class="keyword">if</span> expression <span class="keyword">in</span> cache:</span><br><span class="line"><span class="keyword">return</span> cache[expression]</span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i, char <span class="keyword">in</span> enumerate(expression):</span><br><span class="line"><span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">'+-*/'</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">left_res = self.dfs(expression[:i], cache)</span><br><span class="line">right_res = self.dfs(expression[i + <span class="number">1</span>:], cache)</span><br><span class="line">res += [eval(str(_l) + char + str(_r)) <span class="keyword">for</span> _l <span class="keyword">in</span> left_res <span class="keyword">for</span> _r <span class="keyword">in</span> right_res] <span class="comment"># remember eval and str</span></span><br><span class="line">cache[expression] = res</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/different-ways-to-add-parentheses/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/
      
    
    </summary>
    
    
      <category term="Math" scheme="https://shineboy2013.github.com/tags/Math/"/>
    
      <category term="String" scheme="https://shineboy2013.github.com/tags/String/"/>
    
      <category term="Recursion" scheme="https://shineboy2013.github.com/tags/Recursion/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 095 Unique Binary Search Trees II</title>
    <link href="https://shineboy2013.github.com/2022/01/18/leetcode-095-unique-binary-search-trees-ii/"/>
    <id>https://shineboy2013.github.com/2022/01/18/leetcode-095-unique-binary-search-trees-ii/</id>
    <published>2022-01-19T04:06:57.336Z</published>
    <updated>2022-01-19T04:12:07.050Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/unique-binary-search-trees-ii/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given an integer <code>n</code>, return <em>all the structurally unique <strong>BST’</strong>s (binary search trees), which has exactly</em> <code>n</code> <em>nodes of unique values from</em> <code>1</code> <em>to</em> <code>n</code>. Return the answer in <strong>any order</strong>.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg" alt=""><br><br><pre><strong>Input:</strong> n = 3<br><strong>Output:</strong> [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> n = 1<br><strong>Output:</strong> [[1]]<br></pre><br><br><strong>Constraints:</strong><br><br>*   <code>1 &lt;= n &lt;= 8</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>给定n，求所有val为1-n的BST的所有可能性</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>DFS中比较难的catalan类型。</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>root = TreeNode(i)要在最内层for循环中</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateTrees</span><span class="params">(self, n: int)</span> -&gt; List[TreeNode]:</span></span><br><span class="line"><span class="keyword">return</span> self.dfs(<span class="number">1</span>, n)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, start, end)</span>:</span></span><br><span class="line"><span class="keyword">if</span> start &gt; end:</span><br><span class="line"><span class="keyword">return</span> [<span class="keyword">None</span>]</span><br><span class="line"><span class="keyword">if</span> start == end:</span><br><span class="line"><span class="keyword">return</span> [TreeNode(start)]</span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(start, end + <span class="number">1</span>):</span><br><span class="line">left_nodes = self.dfs(start, i - <span class="number">1</span>)</span><br><span class="line">right_nodes = self.dfs(i + <span class="number">1</span>, end)</span><br><span class="line"><span class="keyword">for</span> _l <span class="keyword">in</span> left_nodes:</span><br><span class="line"><span class="keyword">for</span> _r <span class="keyword">in</span> right_nodes:</span><br><span class="line">root = TreeNode(i)</span><br><span class="line">root.left = _l</span><br><span class="line">root.right = _r</span><br><span class="line">res.append(root)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度Catalan数为<code>O(C[n] += C[i-1]*C[n-i])</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/unique-binary-search-trees-ii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Tree" scheme="https://shineboy2013.github.com/tags/Tree/"/>
    
      <category term="Backtracking" scheme="https://shineboy2013.github.com/tags/Backtracking/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 240 Search a 2D Matrix II</title>
    <link href="https://shineboy2013.github.com/2022/01/18/leetcode-240-search-a-2d-matrix-ii/"/>
    <id>https://shineboy2013.github.com/2022/01/18/leetcode-240-search-a-2d-matrix-ii/</id>
    <published>2022-01-19T03:11:37.299Z</published>
    <updated>2022-01-19T03:21:31.318Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/search-a-2d-matrix-ii/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Write an efficient algorithm that searches for a <code>target</code> value in an <code>m x n</code> integer <code>matrix</code>. The <code>matrix</code> has the following properties:<br><br><em>   Integers in each row are sorted in ascending from left to right.</em>   Integers in each column are sorted in ascending from top to bottom.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2020/11/24/searchgrid2.jpg" alt=""><br><br><pre><strong>Input:</strong> matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5<br><strong>Output:</strong> true<br></pre><br><br><strong>Example 2:</strong><br><br><img src="https://assets.leetcode.com/uploads/2020/11/24/searchgrid.jpg" alt=""><br><br><pre><strong>Input:</strong> matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20<br><strong>Output:</strong> false<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>m == matrix.length</code></em>   <code>n == matrix[i].length</code><br><em>   <code>1 &lt;= n, m &lt;= 300</code></em>   <code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= matrix[i][j] &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code><br><em>   All the integers in each row are <strong>sorted</strong> in ascending order.</em>   All the integers in each column are <strong>sorted</strong> in ascending order.<br>*   <code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= target &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>矩阵按行按列有序，求是否存在target</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>矩阵有序题有3道：<br>LeetCode 074 Search a 2D Matrix 每一行有序，下一行的首元素大于上一行的尾元素 + 找target<br>LeetCode 240 Search a 2D Matrix II 按行按列有序 + 找target<br>LeetCode 378 Kth Smallest Element in a Sorted Matrix 按行按列有序 + 找第k大<br>矩阵结构方面，第一道每一行都是独立，所以可以独立地按行按列做二分法<br>后两道，矩阵二维连续，所以解法都是类BFS，从某个点开始，然后比较它相邻的两个点。出发点不同，第二道在近似矩阵中点(右上角或左下角)，第三道在左上角出发。</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>从右上角出发，比较左和下节点。</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchMatrix</span><span class="params">(self, matrix: List[List[int]], target: int)</span> -&gt; bool:</span></span><br><span class="line">i, j = <span class="number">0</span>, len(matrix[<span class="number">0</span>]) - <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(matrix) <span class="keyword">and</span> j &gt;= <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span> matrix[i][j] == target:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">if</span> target &lt; matrix[i][j]:</span><br><span class="line">j -= <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n + m)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/search-a-2d-matrix-ii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;
      
    
    </summary>
    
    
      <category term="Matrix" scheme="https://shineboy2013.github.com/tags/Matrix/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 235 Lowest Common Ancestor of a Binary Search Tree</title>
    <link href="https://shineboy2013.github.com/2022/01/18/leetcode-235-lowest-common-ancestor-of-a-binary-tree/"/>
    <id>https://shineboy2013.github.com/2022/01/18/leetcode-235-lowest-common-ancestor-of-a-binary-tree/</id>
    <published>2022-01-19T01:51:21.005Z</published>
    <updated>2022-01-19T02:51:27.156Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.<br><br>According to the <a href="https://en.wikipedia.org/wiki/Lowest_common_ancestor" target="_blank" rel="noopener">definition of LCA on Wikipedia</a>: “The lowest common ancestor is defined between two nodes <code>p</code> and <code>q</code> as the lowest node in <code>T</code> that has both <code>p</code> and <code>q</code> as descendants (where we allow <strong>a node to be a descendant of itself</strong>).”<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png" alt=""><br><br><pre><strong>Input:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8<br><strong>Output:</strong> 6<br><strong>Explanation:</strong> The LCA of nodes 2 and 8 is 6.<br></pre><br><br><strong>Example 2:</strong><br><br><img src="https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png" alt=""><br><br><pre><strong>Input:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4<br><strong>Output:</strong> 2<br><strong>Explanation:</strong> The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> root = [2,1], p = 2, q = 1<br><strong>Output:</strong> 2<br></pre><br><br><strong>Constraints:</strong><br><br><em>   The number of nodes in the tree is in the range <code>[2, 10&lt;sup&gt;5&lt;/sup&gt;]</code>.</em>   <code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= Node.val &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code><br><em>   All <code>Node.val</code> are <strong>unique</strong>.</em>   <code>p != q</code><br>*   <code>p</code> and <code>q</code> will exist in the BST.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>BST中求给定的两节点的最低共同父亲节点</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>三种情况，也是用DFS</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>pq一定存在，所以有**三种情况： 1) p或q是root，另一是其子孙。 2) p，q分列root两边。 3) p，q在root的一边。跟LeetCode 236 Lowest Common Ancestor of a Binary Tree不同的是，<br>第二种情况，不用递归即知道，因为这是BST。第一和第三种情况同</li><li>第二种情况由于要比较p, q, root顺序，所以要令p, q有序，Line 4-5</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"><span class="keyword">if</span> p.val &gt; q.val: <span class="comment"># remember</span></span><br><span class="line"><span class="keyword">return</span> self.lowestCommonAncestor(root, q, p)</span><br><span class="line"><span class="keyword">if</span> p.val &lt;= root.val &lt;= q.val <span class="keyword">or</span> p == root <span class="keyword">or</span> q == root: <span class="comment"># remember root is p or q</span></span><br><span class="line"><span class="keyword">return</span> root</span><br><span class="line"><span class="keyword">if</span> p.val &lt; root.val <span class="keyword">and</span> q.val &lt; root.val:</span><br><span class="line"><span class="keyword">return</span> self.lowestCommonAncestor(root.left, p, q)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> self.lowestCommonAncestor(root.right, p, q)</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/
      
    
    </summary>
    
    
      <category term="Tree" scheme="https://shineboy2013.github.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 234 Palindrome Linked List</title>
    <link href="https://shineboy2013.github.com/2022/01/18/leetcode-234-palindrome-linked-list/"/>
    <id>https://shineboy2013.github.com/2022/01/18/leetcode-234-palindrome-linked-list/</id>
    <published>2022-01-19T00:53:52.430Z</published>
    <updated>2022-01-19T01:04:22.374Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/palindrome-linked-list/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given the <code>head</code> of a singly linked list, return <code>true</code> if it is a palindrome.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/03/03/pal1linked-list.jpg" alt=""><br><br><pre><strong>Input:</strong> head = [1,2,2,1]<br><strong>Output:</strong> true<br></pre><br><br><strong>Example 2:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/03/03/pal2linked-list.jpg" alt=""><br><br><pre><strong>Input:</strong> head = [1,2]<br><strong>Output:</strong> false<br></pre><br><br><strong>Constraints:</strong><br><br><em>   The number of nodes in the list is in the range <code>[1, 10&lt;sup&gt;5&lt;/sup&gt;]</code>.</em>   <code>0 &lt;= Node.val &lt;= 9</code><br><br><strong>Follow up:</strong> Could you do it in <code>O(n)</code> time and <code>O(1)</code> space?</div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求一个LL是否回文</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>快慢指针 + Stack</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>快慢指针找到中点，找的同时，慢指针所有节点入栈。慢指针继续走，比较stack节点和慢指针节点。</li><li><strong>不涉及删除，所以不需要哟用到fake_node</strong></li><li><strong>中位数可能有1-2个</strong>。奇偶问题，若fast指向节点(另一情况是None), 表明是奇数个，slow在第二个循环前多走一步，跳过最中间的节点</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, head: ListNode)</span> -&gt; bool:</span></span><br><span class="line">fast, slow = head, head</span><br><span class="line">stack = []</span><br><span class="line"><span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">stack.append(slow)</span><br><span class="line">slow = slow.next</span><br><span class="line">fast = fast.next.next</span><br><span class="line"><span class="keyword">if</span> fast:</span><br><span class="line">slow = slow.next</span><br><span class="line"><span class="keyword">while</span> slow:</span><br><span class="line"><span class="keyword">if</span> stack.pop().val != slow.val:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">slow = slow.next</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/palindrome-linked-list/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br
      
    
    </summary>
    
    
      <category term="Facebook" scheme="https://shineboy2013.github.com/tags/Facebook/"/>
    
      <category term="Linked List" scheme="https://shineboy2013.github.com/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 296 Best Meeting Point</title>
    <link href="https://shineboy2013.github.com/2022/01/18/leetcode-296-best-meeting-point/"/>
    <id>https://shineboy2013.github.com/2022/01/18/leetcode-296-best-meeting-point/</id>
    <published>2022-01-18T22:31:59.677Z</published>
    <updated>2022-01-18T22:39:09.369Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/best-meeting-point/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given an <code>m x n</code> binary grid <code>grid</code> where each <code>1</code> marks the home of one friend, return <em>the minimal <strong>total travel distance</strong></em>.<br><br>The <strong>total travel distance</strong> is the sum of the distances between the houses of the friends and the meeting point.<br><br>The distance is calculated using <a href="http://en.wikipedia.org/wiki/Taxicab_geometry" target="_blank" rel="noopener">Manhattan Distance</a>, where <code>distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|</code>.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/03/14/meetingpoint-grid.jpg" alt=""><br><br><pre><strong>Input:</strong> grid = [[1,0,0,0,1],[0,0,0,0,0],[0,0,1,0,0]]<br><strong>Output:</strong> 6<br><strong>Explanation:</strong> Given three friends living at (0,0), (0,4), and (2,2).<br>The point (0,2) is an ideal meeting point, as the total travel distance of 2 + 2 + 2 = 6 is minimal.<br>So return 6.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> grid = [[1,1]]<br><strong>Output:</strong> 1<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>m == grid.length</code></em>   <code>n == grid[i].length</code><br><em>   <code>1 &lt;= m, n &lt;= 200</code></em>   <code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.<br><em>   There will be <em>*at least two</em></em> friends in the <code>grid</code>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>矩阵中1表示朋友的位置，求最佳见面位置，所有朋友到这个位置曼哈顿距离最短。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>这是数学题也是非高频题。如果是一维，求最佳位置，是所有朋友位置的中点，也就是左边朋友和右边朋友的数量是一样。求距离也就是用相向双指针，求每对点的距离。<br>推广到二维，同理，x和y坐标是独立的。分别求距离即可。</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>用相向双指针，求每对点的距离</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minTotalDistance</span><span class="params">(self, grid: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">x_coordinates, y_coordinates = [], []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(grid)):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(grid[<span class="number">0</span>])):</span><br><span class="line"><span class="keyword">if</span> grid[i][j] == <span class="number">1</span>:</span><br><span class="line">x_coordinates.append(i)</span><br><span class="line">y_coordinates.append(j)</span><br><span class="line">x_coordinates.sort()</span><br><span class="line">y_coordinates.sort()</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line">left, right = <span class="number">0</span>, len(y_coordinates) - <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> left &lt; right:</span><br><span class="line">res += y_coordinates[right] - y_coordinates[left]</span><br><span class="line">left += <span class="number">1</span></span><br><span class="line">right -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">left, right = <span class="number">0</span>, len(x_coordinates) - <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> left &lt; right:</span><br><span class="line">res += x_coordinates[right] - x_coordinates[left]</span><br><span class="line">left += <span class="number">1</span></span><br><span class="line">right -= <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(nlogn)</code>，空间复杂度<code>O(n)</code>, n为矩阵的长边大小  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/best-meeting-point/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br
      
    
    </summary>
    
    
      <category term="Math" scheme="https://shineboy2013.github.com/tags/Math/"/>
    
      <category term="Matrix" scheme="https://shineboy2013.github.com/tags/Matrix/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 218 The Skyline Problem</title>
    <link href="https://shineboy2013.github.com/2022/01/18/leetcode-218-the-skyline-problem/"/>
    <id>https://shineboy2013.github.com/2022/01/18/leetcode-218-the-skyline-problem/</id>
    <published>2022-01-18T10:14:23.929Z</published>
    <updated>2022-01-18T22:03:00.513Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/the-skyline-problem/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>A city’s <strong>skyline</strong> is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return <em>the <strong>skyline</strong> formed by these buildings collectively</em>.<br><br>The geometric information of each building is given in the array <code>buildings</code> where <code>buildings[i] = [left&lt;sub&gt;i&lt;/sub&gt;, right&lt;sub&gt;i&lt;/sub&gt;, height&lt;sub&gt;i&lt;/sub&gt;]</code>:<br><br><em>   <code>left&lt;sub&gt;i&lt;/sub&gt;</code> is the x coordinate of the left edge of the <code>i&lt;sup&gt;th&lt;/sup&gt;</code> building.</em>   <code>right&lt;sub&gt;i&lt;/sub&gt;</code> is the x coordinate of the right edge of the <code>i&lt;sup&gt;th&lt;/sup&gt;</code> building.<br><em>   <code>height&lt;sub&gt;i&lt;/sub&gt;</code> is the height of the <code>i&lt;sup&gt;th&lt;/sup&gt;</code> building.<br><br>You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height <code>0</code>.<br><br>The <strong>skyline</strong> should be represented as a list of “key points” <strong>sorted by their x-coordinate</strong> in the form <code>[[x&lt;sub&gt;1&lt;/sub&gt;,y&lt;sub&gt;1&lt;/sub&gt;],[x&lt;sub&gt;2&lt;/sub&gt;,y&lt;sub&gt;2&lt;/sub&gt;],...]</code>. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate <code>0</code> and is used to mark the skyline’s termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline’s contour.<br><br><strong>Note:</strong> There must be no consecutive horizontal lines of equal height in the output skyline. For instance, <code>[...,[2 3],[4 5],[7 5],[11 5],[12 7],...]</code> is not acceptable; the three lines of height 5 should be merged into one in the final output as such: <code>[...,[2 3],[4 5],[12 7],...]</code><br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2020/12/01/merged.jpg" alt=""><br><br><pre><strong>Input:</strong> buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]<br><strong>Output:</strong> [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]<br><strong>Explanation:</strong><br>Figure A shows the buildings of the input.<br>Figure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> buildings = [[0,2,3],[2,5,3]]<br><strong>Output:</strong> [[0,3],[5,0]]<br></pre><br><br><strong>Constraints:</strong></em>   <code>1 &lt;= buildings.length &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code><br><em>   <code>0 &lt;= left&lt;sub&gt;i&lt;/sub&gt; &lt; right&lt;sub&gt;i&lt;/sub&gt; &lt;= 2&lt;sup&gt;31&lt;/sup&gt; - 1</code></em>   <code>1 &lt;= height&lt;sub&gt;i&lt;/sub&gt; &lt;= 2&lt;sup&gt;31&lt;/sup&gt; - 1</code><br>*   <code>buildings</code> is sorted by <code>left&lt;sub&gt;i&lt;/sub&gt;</code> in non-decreasing order.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>N/A</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p><strong>Heap(高度最大堆) + 端点排序法(先端点再高度逆序)</strong><br>不是高频题，但思路值得学习<br>Heap(高度最大堆): LeetCode 253 Meeting Rooms II方法一，终点的最小堆<br>端点排序法(先端点再高度逆序)： LeetCode 253 Meeting Rooms II方法二<br>meeting room是新线段的start逼栈顶终点出堆，此题也是同样，但用<strong>高度的最大堆</strong>维护当前最高大厦，这与题意符合。</p><ul><li><p>为什么要加入结束点?<br><img src="/images/L218.png" alt=""><br>两种情况，第一种情况没有问题，但第二种情况就会漏掉第一栋大厦的结束点。原因是出堆的点没有被处理，但出堆的点可能有多个而且若没有新大厦它不能出堆，所以结束点逼它出堆。</p></li><li><p>为什么高度逆序?<br><img src="/images/L218-2.png" alt=""><br>第一种情况在坐标2这个位置有两节点(2, 0, 0)第一栋大厦结束点, (2, 5, 3)第二栋大厦开始点，若不按高度排序，第一栋结束点会逼第一栋开始点出堆，产生天际线。若按高度逆序，后者先入堆，第一栋开始点出堆也不会产生天际线。类似于heapq.heapreplace先加入再删除或者LeetCode 354 Russian Doll Envelopes的排序方式</p></li></ul><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li><strong>先顺序排序端点再逆序高度</strong>，因为当结束点和始点重合时，让高度大的先入堆可以确保不会产生矮的天际线，否则这些矮的天际线实际被包含在高的大厦里。</li><li><strong>结束点也要加入循环但不入堆</strong>。这样产生两点：<br>1) start &gt;= heap[0][1]要取等号，否则不能让这栋大厦结束点出堆。<br>2) 结束点不入堆，因为它只用于产生结束点从而加入到结果集，它不产生高度，只有产生高度的点才会被加入到堆</li><li>与前高度不同，也就是高度发生变化就入堆</li><li>确保res[-1][1] != -heap[0][0]。用只有一栋大厦作为test case。<br>1) 因为用到了res[-1][1]，所以res初始化加入[0, 0]，第一个值不会用到所以无所谓，第二个值取非整数即可；<br>2) 最后结果要排除这个点，取res[1:]<br>3) 由于heap要永远有节点。初始化加入[0, float(‘inf’)]，高度为0，用于产生在地平线的点的高度，结束点为无穷大，确保不会被逼出堆。</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSkyline</span><span class="params">(self, buildings: List[List[int]])</span> -&gt; List[List[int]]:</span></span><br><span class="line">events = sorted(buildings + [[end, <span class="number">0</span>, <span class="number">0</span>] <span class="keyword">for</span> _, end, _ <span class="keyword">in</span> buildings], key=<span class="keyword">lambda</span> x: (x[<span class="number">0</span>], -x[<span class="number">2</span>]))</span><br><span class="line">heap, res = [(<span class="number">0</span>, float(<span class="string">'inf'</span>))], [[<span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line"><span class="keyword">for</span> start, end, height <span class="keyword">in</span> events:</span><br><span class="line"><span class="keyword">while</span> heap <span class="keyword">and</span> start &gt;= heap[<span class="number">0</span>][<span class="number">1</span>]:</span><br><span class="line">heapq.heappop(heap)</span><br><span class="line"><span class="keyword">if</span> height &gt; <span class="number">0</span>: <span class="comment"># don't push ends into the heap</span></span><br><span class="line">heapq.heappush(heap, (-height, end))</span><br><span class="line"><span class="keyword">if</span> res[<span class="number">-1</span>][<span class="number">1</span>] != -heap[<span class="number">0</span>][<span class="number">0</span>]:</span><br><span class="line">res.append([start, -heap[<span class="number">0</span>][<span class="number">0</span>]])</span><br><span class="line"><span class="keyword">return</span> res[<span class="number">1</span>:]</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(nlogn)</code>，空间复杂度<code>O(k)</code>, k为重合天际线个数，此复杂度跟Meeting Rooms II一致  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/the-skyline-problem/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;b
      
    
    </summary>
    
    
      <category term="Array" scheme="https://shineboy2013.github.com/tags/Array/"/>
    
      <category term="Heap" scheme="https://shineboy2013.github.com/tags/Heap/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 221 Maximal Square</title>
    <link href="https://shineboy2013.github.com/2022/01/18/leetcode-221-maximal-square/"/>
    <id>https://shineboy2013.github.com/2022/01/18/leetcode-221-maximal-square/</id>
    <published>2022-01-18T08:29:43.240Z</published>
    <updated>2022-01-18T08:39:08.084Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/maximal-square/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given an <code>m x n</code> binary <code>matrix</code> filled with <code>0</code>‘s and <code>1</code>‘s, <em>find the largest square containing only</em> <code>1</code>‘s <em>and return its area</em>.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg" alt=""><br><br><pre><strong>Input:</strong> matrix = [[“1”,”0”,”1”,”0”,”0”],[“1”,”0”,”1”,”1”,”1”],[“1”,”1”,”1”,”1”,”1”],[“1”,”0”,”0”,”1”,”0”]]<br><strong>Output:</strong> 4<br></pre><br><br><strong>Example 2:</strong><br><br><img src="https://assets.leetcode.com/uploads/2020/11/26/max2grid.jpg" alt=""><br><br><pre><strong>Input:</strong> matrix = [[“0”,”1”],[“1”,”0”]]<br><strong>Output:</strong> 1<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> matrix = [[“0”]]<br><strong>Output:</strong> 0<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>m == matrix.length</code></em>   <code>n == matrix[i].length</code><br><em>   <code>1 &lt;= m, n &lt;= 300</code></em>   <code>matrix[i][j]</code> is <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求子正方形矩阵全是1的最大面积</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>求最值且是矩阵考虑用DP，但公式比较难写。<br>dp[i][j]为以(i-1, j-1)为右下端点的正方形的边长<br>递归式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = min&#123;dp[i-1][j-1], dp[i-1][j], dp[i][j-1]&#125; + 1 if matrix[i][j] == 1</span><br><span class="line">         = 0                                             otherwise</span><br></pre></td></tr></table></figure></p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>严格遵守DP的5点注意事项</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>严格遵守DP的5点注意事项。初始值是0，表示<strong>第一行或第一列的点的边长最多只能为1</strong>.  </li><li>输入是字符，所以比较是否1时候用字符比较</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dp[i][j] = min&#123;dp[i-1][j-1], dp[i-1][j], dp[i][j-1]&#125; + 1 if matrix[i][j] == 1</span></span><br><span class="line"><span class="comment">#          = 0                                             otherwise</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maximalSquare</span><span class="params">(self, matrix: List[List[str]])</span> -&gt; int:</span></span><br><span class="line">dp = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(matrix[<span class="number">0</span>]) + <span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(matrix) + <span class="number">1</span>)] <span class="comment"># remember 0 not 1 or float(inf)</span></span><br><span class="line"><span class="comment"># dp[0][0] = 0</span></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(dp)):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(dp[<span class="number">0</span>])):</span><br><span class="line">dp[i][j] = min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) + <span class="number">1</span> <span class="keyword">if</span> matrix[i - <span class="number">1</span>][j - <span class="number">1</span>] == <span class="string">'1'</span> <span class="keyword">else</span> <span class="number">0</span> <span class="comment"># remember '1' not 1</span></span><br><span class="line">res = max(res, dp[i][j])</span><br><span class="line"><span class="keyword">return</span> res * res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n<sup>2</sup>)</code>，空间复杂度<code>O(n<sup>2</sup>)</code> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/maximal-square/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;Giv
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 211 Design Add and Search Words Data Structure</title>
    <link href="https://shineboy2013.github.com/2022/01/17/leetcode-211-design-add-and-search-words-data-structure/"/>
    <id>https://shineboy2013.github.com/2022/01/17/leetcode-211-design-add-and-search-words-data-structure/</id>
    <published>2022-01-18T07:26:28.464Z</published>
    <updated>2022-01-18T07:34:50.740Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/design-add-and-search-words-data-structure/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Design a data structure that supports adding new words and finding if a string matches any previously added string.<br><br>Implement the <code>WordDictionary</code> class:<br><br><em>   <code>WordDictionary()</code> Initializes the object.</em>   <code>void addWord(word)</code> Adds <code>word</code> to the data structure, it can be matched later.<br><em>   <code>bool search(word)</code> Returns <code>true</code> if there is any string in the data structure that matches <code>word</code> or <code>false</code> otherwise. <code>word</code> may contain dots <code>&#39;.&#39;</code> where dots can be matched with any letter.<br><br><strong>Example:</strong><br><br><pre><strong>Input</strong><br>[“WordDictionary”,”addWord”,”addWord”,”addWord”,”search”,”search”,”search”,”search”]<br>[[],[“bad”],[“dad”],[“mad”],[“pad”],[“bad”],[“.ad”],[“b..”]]<br><strong>Output</strong><br>[null,null,null,null,false,true,true,true]<br><br><strong>Explanation</strong><br>WordDictionary wordDictionary = new WordDictionary();<br>wordDictionary.addWord(“bad”);<br>wordDictionary.addWord(“dad”);<br>wordDictionary.addWord(“mad”);<br>wordDictionary.search(“pad”); // return False<br>wordDictionary.search(“bad”); // return True<br>wordDictionary.search(“.ad”); // return True<br>wordDictionary.search(“b..”); // return True<br></pre><br><br><strong>Constraints:</strong></em>   <code>1 &lt;= word.length &lt;= 500</code><br><em>   <code>word</code> in <code>addWord</code> consists lower-case English letters.</em>   <code>word</code> in <code>search</code> consist of  <code>&#39;.&#39;</code> or lower-case English letters.<br>*   At most <code>50000</code> calls will be made to <code>addWord</code> and <code>search</code>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>设计一个数据结构支持加单词和查找单词。查找单词支持dot查询，表示配对任意字符</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>第一时间想到Trie，但难点在如果支持dot。一般Trie实现只支持单一单词查询，但是此题需要搜索所有可能节点。所以要将search加入TrieNode参数且转成DFS</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>search加入TrieNode参数且转成DFS</li><li>终止条件第二个用TrieNode为空而不是用is_end</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordDictionary</span><span class="params">(TestCases)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.head = TrieNode()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addWord</span><span class="params">(self, word: str)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        it = self.head</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(word)):</span><br><span class="line">            it = it.children[word[i]]</span><br><span class="line">        it.is_end = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, word: str)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> self.search_one_node(word, self.head)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_one_node</span><span class="params">(self, word, trie_node)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> word <span class="keyword">and</span> trie_node.is_end:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> word <span class="keyword">or</span> <span class="keyword">not</span> trie_node: <span class="comment"># remember not trie_node</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> word[<span class="number">0</span>] == <span class="string">'.'</span>:</span><br><span class="line">            <span class="keyword">for</span> child_node <span class="keyword">in</span> trie_node.children.values():</span><br><span class="line">                <span class="keyword">if</span> self.search_one_node(word[<span class="number">1</span>:], child_node):</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> word[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> trie_node.children:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> self.search_one_node(word[<span class="number">1</span>:], trie_node.children[word[<span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.children = collections.defaultdict(TrieNode)  <span class="comment"># &#123;&#125;</span></span><br><span class="line">        self.is_end = <span class="keyword">False</span></span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>search中不含dot时间复杂度为<code>O(n)</code>, 含dot时间复杂度为<code>O(26<sup>n</sup>)</code>，空间复杂度<code>O(1)</code>, n为搜索单词长度.   </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/design-add-and-search-words-data-structure/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 207 Course Schedule</title>
    <link href="https://shineboy2013.github.com/2022/01/17/leetcode-207-course-schedule/"/>
    <id>https://shineboy2013.github.com/2022/01/17/leetcode-207-course-schedule/</id>
    <published>2022-01-18T05:11:45.265Z</published>
    <updated>2022-01-18T05:15:44.273Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/course-schedule/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses - 1</code>. You are given an array <code>prerequisites</code> where <code>prerequisites[i] = [a&lt;sub&gt;i&lt;/sub&gt;, b&lt;sub&gt;i&lt;/sub&gt;]</code> indicates that you <strong>must</strong> take course <code>b&lt;sub&gt;i&lt;/sub&gt;</code> first if you want to take course <code>a&lt;sub&gt;i&lt;/sub&gt;</code>.<br><br><em>   For example, the pair <code>[0, 1]</code>, indicates that to take course <code>0</code> you have to first take course <code>1</code>.<br><br>Return <code>true</code> if you can finish all courses. Otherwise, return <code>false</code>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> numCourses = 2, prerequisites = [[1,0]]<br><strong>Output:</strong> true<br><strong>Explanation:</strong> There are a total of 2 courses to take.<br>To take course 1 you should have finished course 0. So it is possible.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> numCourses = 2, prerequisites = [[1,0],[0,1]]<br><strong>Output:</strong> false<br><strong>Explanation:</strong> There are a total of 2 courses to take.<br>To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.<br></pre><br><br><strong>Constraints:</strong></em>   <code>1 &lt;= numCourses &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code><br><em>   <code>0 &lt;= prerequisites.length &lt;= 5000</code></em>   <code>prerequisites[i].length == 2</code><br><em>   <code>0 &lt;= a&lt;sub&gt;i&lt;/sub&gt;, b&lt;sub&gt;i&lt;/sub&gt; &lt; numCourses</code></em>   All the pairs prerequisites[i] are <strong>unique</strong>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>课程有先修课要求，求是否可以完成所有课程</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>跟LeetCode 210 Course Schedule II几乎一样，此题求可否完成，那题求课程顺序。区别在于return那一句返回bool还是res</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">canFinish</span><span class="params">(self, numCourses: int, prerequisites: List[List[int]])</span> -&gt; bool:</span></span><br><span class="line">in_degree = [<span class="number">0</span>] * numCourses</span><br><span class="line">graph = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(numCourses)]</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> prerequisites:</span><br><span class="line">in_degree[li[<span class="number">0</span>]] += <span class="number">1</span></span><br><span class="line">graph[li[<span class="number">1</span>]].append(li[<span class="number">0</span>])</span><br><span class="line">queue = collections.deque([i <span class="keyword">for</span> i <span class="keyword">in</span> range(len(in_degree)) <span class="keyword">if</span> in_degree[i] == <span class="number">0</span>])</span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">while</span> queue:</span><br><span class="line">node = queue.popleft()</span><br><span class="line">res.append(node)</span><br><span class="line"><span class="keyword">for</span> neighbor <span class="keyword">in</span> graph[node]:</span><br><span class="line">in_degree[neighbor] -= <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> in_degree[neighbor] == <span class="number">0</span>:</span><br><span class="line">queue.append(neighbor)</span><br><span class="line"><span class="keyword">return</span> numCourses == len(res)</span><br></pre></td></tr></table></figure></li></ol><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/course-schedule/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;Th
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 206 Reverse Linked List</title>
    <link href="https://shineboy2013.github.com/2022/01/17/leetcode-206-reverse-linked-list/"/>
    <id>https://shineboy2013.github.com/2022/01/17/leetcode-206-reverse-linked-list/</id>
    <published>2022-01-18T04:57:13.701Z</published>
    <updated>2022-01-18T05:00:28.675Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/reverse-linked-list/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given the <code>head</code> of a singly linked list, reverse the list, and return <em>the reversed list</em>.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt=""><br><br><pre><strong>Input:</strong> head = [1,2,3,4,5]<br><strong>Output:</strong> [5,4,3,2,1]<br></pre><br><br><strong>Example 2:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg" alt=""><br><br><pre><strong>Input:</strong> head = [1,2]<br><strong>Output:</strong> [2,1]<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> head = []<br><strong>Output:</strong> []<br></pre><br><br><strong>Constraints:</strong><br><br><em>   The number of nodes in the list is the range <code>[0, 5000]</code>.</em>   <code>-5000 &lt;= Node.val &lt;= 5000</code><br><br><strong>Follow up:</strong> A linked list can be reversed either iteratively or recursively. Could you implement both?<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>反转LL</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>简单题，但是经典题。循环体为，左方一个单独节点，右方为一个LL，将LL的首节点指向单独节点</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>循环体为，左方一个单独节点，右方为一个LL。所以首节点next要赋None</li><li>空节点的处理</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">it, it_next = head, head.next</span><br><span class="line">it.next = <span class="keyword">None</span> <span class="comment"># remember</span></span><br><span class="line"><span class="keyword">while</span> it <span class="keyword">and</span> it_next:</span><br><span class="line">tmp = it_next.next</span><br><span class="line">it_next.next = it</span><br><span class="line">it, it_next = it_next, tmp</span><br><span class="line"><span class="keyword">return</span> it</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-linked-list/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;b
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 204 Count Primes</title>
    <link href="https://shineboy2013.github.com/2022/01/17/leetcode-204-count-primes/"/>
    <id>https://shineboy2013.github.com/2022/01/17/leetcode-204-count-primes/</id>
    <published>2022-01-18T04:20:44.873Z</published>
    <updated>2022-01-18T04:27:36.041Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/count-primes/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given an integer <code>n</code>, return <em>the number of prime numbers that are strictly less than</em> <code>n</code>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> n = 10<br><strong>Output:</strong> 4<br><strong>Explanation:</strong> There are 4 prime numbers less than 10, they are 2, 3, 5, 7.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> n = 0<br><strong>Output:</strong> 0<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> n = 1<br><strong>Output:</strong> 0<br></pre><br><br><strong>Constraints:</strong><br><br><em>   `0 &lt;= n &lt;= 5 </em> 10<sup>6</sup>`<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求n内的素数个数</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>排除法：知道一个素数后删除它的倍数，剩下的就是下一个素数</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>开一个prime大小数组，初始值为True表示是素数。</li><li>素数不包括n</li><li>提高效率：i遍历到n开方+1，删除的数不能超过n(一开始写没有break导致TLE), 最后用sum统计比for循环效率高点</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countPrimes</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">primes = [<span class="keyword">True</span>] * n <span class="comment"># remember less than n</span></span><br><span class="line">primes[<span class="number">0</span>] = primes[<span class="number">1</span>] = <span class="keyword">False</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(math.sqrt(n)) + <span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span> primes[i]:</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(i * <span class="number">2</span>, n, i): <span class="comment"># starting from i rather than 2</span></span><br><span class="line">primes[j] = <span class="keyword">False</span></span><br><span class="line"><span class="keyword">return</span> sum(primes)</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/count-primes/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;Given
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 191 Number of 1 Bits</title>
    <link href="https://shineboy2013.github.com/2022/01/17/leetcode-191-number-of-1-bits/"/>
    <id>https://shineboy2013.github.com/2022/01/17/leetcode-191-number-of-1-bits/</id>
    <published>2022-01-18T02:56:56.968Z</published>
    <updated>2022-01-18T03:01:19.421Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/number-of-1-bits/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Write a function that takes an unsigned integer and returns the number of ‘1’ bits it has (also known as the <a href="http://en.wikipedia.org/wiki/Hamming_weight" target="_blank" rel="noopener">Hamming weight</a>).<br><br><strong>Note:</strong><br><br><em>   Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer’s internal binary representation is the same, whether it is signed or unsigned.</em>   In Java, the compiler represents the signed integers using <a href="https://en.wikipedia.org/wiki/Two%27s_complement" target="_blank" rel="noopener">2’s complement notation</a>. Therefore, in <strong>Example 3</strong>, the input represents the signed integer. <code>-3</code>.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> n = 00000000000000000000000000001011<br><strong>Output:</strong> 3<br><strong>Explanation:</strong> The input binary string <strong>00000000000000000000000000001011</strong> has a total of three ‘1’ bits.<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> n = 00000000000000000000000010000000<br><strong>Output:</strong> 1<br><strong>Explanation:</strong> The input binary string <strong>00000000000000000000000010000000</strong> has a total of one ‘1’ bit.<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> n = 11111111111111111111111111111101<br><strong>Output:</strong> 31<br><strong>Explanation:</strong> The input binary string <strong>11111111111111111111111111111101</strong> has a total of thirty one ‘1’ bits.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   The input must be a <strong>binary string</strong> of length <code>32</code>.<br><br><em>*Follow up:</em></em> If this function is called many times, how would you optimize it?</div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求二进制上1的个数</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>用n &amp; n - 1来去掉最左的1</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li><strong>用n &amp; n - 1来去掉最左的1</strong></li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hammingWeight</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n:</span><br><span class="line">n = n &amp; (n - <span class="number">1</span>)</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/number-of-1-bits/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;W
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 199 Binary Tree Right Side View</title>
    <link href="https://shineboy2013.github.com/2022/01/17/leetcode-199-binary-tree-right-side-view/"/>
    <id>https://shineboy2013.github.com/2022/01/17/leetcode-199-binary-tree-right-side-view/</id>
    <published>2022-01-18T02:48:21.953Z</published>
    <updated>2022-01-18T02:56:38.559Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/binary-tree-right-side-view/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given the <code>root</code> of a binary tree, imagine yourself standing on the <strong>right side</strong> of it, return <em>the values of the nodes you can see ordered from top to bottom</em>.<br><br><strong>Example 1:</strong><br><br><img src="https://assets.leetcode.com/uploads/2021/02/14/tree.jpg" alt=""><br><br><pre><strong>Input:</strong> root = [1,2,3,null,5,null,4]<br><strong>Output:</strong> [1,3,4]<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> root = [1,null,3]<br><strong>Output:</strong> [1,3]<br></pre><br><br><strong>Example 3:</strong><br><br><pre><strong>Input:</strong> root = []<br><strong>Output:</strong> []<br></pre><br><br><strong>Constraints:</strong><br><br><em>   The number of nodes in the tree is in the range <code>[0, 100]</code>.</em>   <code>-100 &lt;= Node.val &lt;= 100</code><br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>二叉树从右看的节点列表。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>BFS按层访问的最后一个</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>需要知道最后一个，所以引入i，不能用enumerate，只能用len</li><li>deque([root])不是deque(root)</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rightSideView</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line"><span class="keyword">return</span> []</span><br><span class="line">res = []</span><br><span class="line">queue = collections.deque([root])</span><br><span class="line"><span class="keyword">while</span> queue:</span><br><span class="line">i, len_q = <span class="number">0</span>, len(queue) <span class="comment"># remember</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(len_q):</span><br><span class="line">node = queue.popleft()</span><br><span class="line"><span class="keyword">if</span> i == len_q - <span class="number">1</span>:</span><br><span class="line">res.append(node.val)</span><br><span class="line"><span class="keyword">if</span> node.left:</span><br><span class="line">queue.append(node.left)</span><br><span class="line"><span class="keyword">if</span> node.right:</span><br><span class="line">queue.append(node.right)</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(n)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/binary-tree-right-side-view/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;di
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 189 Rotate Array</title>
    <link href="https://shineboy2013.github.com/2022/01/17/leetcode-189-rotate-array/"/>
    <id>https://shineboy2013.github.com/2022/01/17/leetcode-189-rotate-array/</id>
    <published>2022-01-18T01:05:40.174Z</published>
    <updated>2022-01-18T01:53:48.855Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/rotate-array/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given an array, rotate the array to the right by <code>k</code> steps, where <code>k</code> is non-negative.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> nums = [1,2,3,4,5,6,7], k = 3<br><strong>Output:</strong> [5,6,7,1,2,3,4]<br><strong>Explanation:</strong><br>rotate 1 steps to the right: [7,1,2,3,4,5,6]<br>rotate 2 steps to the right: [6,7,1,2,3,4,5]<br>rotate 3 steps to the right: [5,6,7,1,2,3,4]<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> nums = [-1,-100,3,99], k = 2<br><strong>Output:</strong> [3,99,-1,-100]<br><strong>Explanation:</strong><br>rotate 1 steps to the right: [99,-1,-100,3]<br>rotate 2 steps to the right: [3,99,-1,-100]<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>1 &lt;= nums.length &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></em>   <code>-2&lt;sup&gt;31&lt;/sup&gt; &lt;= nums[i] &lt;= 2&lt;sup&gt;31&lt;/sup&gt; - 1</code><br><em>   <code>0 &lt;= k &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code><br><br><strong>Follow up:</strong></em>   Try to come up with as many solutions as you can. There are at least <strong>three</strong> different ways to solve this problem.<br>*   Could you do it in-place with <code>O(1)</code> extra space?<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>数组原地向右旋转k位<br><img src="/images/L189.png" alt=""><br>证明如上图，比如[1,2,3,4,5,6,7]中，A = [1,2,3,4], B = [5,6,7]先整体reverse再分别reverse。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>N/A</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>k会大于数组大小，所以取mod</li><li>Python中reverse一个sublist，方法先取sublist再倒转</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(self, nums: List[int], k: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">k = k % len(nums) <span class="comment"># remember</span></span><br><span class="line">nums[:] = nums[::<span class="number">-1</span>]</span><br><span class="line">nums[:k] = nums[:k][::<span class="number">-1</span>] <span class="comment"># remember how to reverse sublist</span></span><br><span class="line">nums[k:] = nums[k:][::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/rotate-array/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;Given
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 169 Majority Element</title>
    <link href="https://shineboy2013.github.com/2022/01/17/leetcode-169-majority-element/"/>
    <id>https://shineboy2013.github.com/2022/01/17/leetcode-169-majority-element/</id>
    <published>2022-01-18T00:23:31.929Z</published>
    <updated>2022-01-18T00:29:24.314Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/majority-element/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>Given an array <code>nums</code> of size <code>n</code>, return <em>the majority element</em>.<br><br>The majority element is the element that appears more than <code>⌊n / 2⌋</code> times. You may assume that the majority element always exists in the array.<br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> nums = [3,2,3]<br><strong>Output:</strong> 3<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> nums = [2,2,1,1,1,2,2]<br><strong>Output:</strong> 2<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>n == nums.length</code></em>   <code>1 &lt;= n &lt;= 5 * 10&lt;sup&gt;4&lt;/sup&gt;</code><br><em>   <code>-2&lt;sup&gt;31&lt;/sup&gt; &lt;= nums[i] &lt;= 2&lt;sup&gt;31&lt;/sup&gt; - 1</code><br><br><em>*Follow-up:</em></em> Could you solve the problem in linear time and in <code>O(1)</code> space?</div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>求数组中的众数</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>编程之美的水王法</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">candidate, count = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line"><span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">candidate = nums[i]</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> nums[i] == candidate:</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">count -= <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> candidate</span><br></pre></td></tr></table></figure></li></ol><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/majority-element/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;G
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 163 Missing Ranges</title>
    <link href="https://shineboy2013.github.com/2022/01/17/leetcode-163-missing-ranges/"/>
    <id>https://shineboy2013.github.com/2022/01/17/leetcode-163-missing-ranges/</id>
    <published>2022-01-17T23:57:10.206Z</published>
    <updated>2022-01-18T00:06:55.812Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode.com/problems/missing-ranges/" target="_blank" rel="noopener">LeetCode</a></strong></p><div><br><br>You are given an inclusive range <code>[lower, upper]</code> and a <strong>sorted unique</strong> integer array <code>nums</code>, where all elements are in the inclusive range.<br><br>A number <code>x</code> is considered <strong>missing</strong> if <code>x</code> is in the range <code>[lower, upper]</code> and <code>x</code> is not in <code>nums</code>.<br><br>Return <em>the <strong>smallest sorted</strong> list of ranges that <strong>cover every missing number exactly</strong></em>. That is, no element of <code>nums</code> is in any of the ranges, and each missing number is in one of the ranges.<br><br>Each range <code>[a,b]</code> in the list should be output as:<br><br><em>   <code>&quot;a-&gt;b&quot;</code> if <code>a != b</code></em>   <code>&quot;a&quot;</code> if <code>a == b</code><br><br><strong>Example 1:</strong><br><br><pre><strong>Input:</strong> nums = [0,1,3,50,75], lower = 0, upper = 99<br><strong>Output:</strong> [“2”,”4-&gt;49”,”51-&gt;74”,”76-&gt;99”]<br><strong>Explanation:</strong> The ranges are:<br>[2,2] –&gt; “2”<br>[4,49] –&gt; “4-&gt;49”<br>[51,74] –&gt; “51-&gt;74”<br>[76,99] –&gt; “76-&gt;99”<br></pre><br><br><strong>Example 2:</strong><br><br><pre><strong>Input:</strong> nums = [-1], lower = -1, upper = -1<br><strong>Output:</strong> []<br><strong>Explanation:</strong> There are no missing ranges since there are no missing numbers.<br></pre><br><br><strong>Constraints:</strong><br><br><em>   <code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= lower &lt;= upper &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code></em>   <code>0 &lt;= nums.length &lt;= 100</code><br><em>   <code>lower &lt;= nums[i] &lt;= upper</code></em>   All the values of <code>nums</code> are <strong>unique</strong>.<br><br></div><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a><strong>题目大意：</strong></h3><p>给定一个范围[lower, upper]和数组表示这个范围有的数，求缺失数范围</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>简单题。也是数学题<br>公式为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[nums[i-1] + 1, nums[i] - 1]</span><br></pre></td></tr></table></figure></p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a><strong>解题步骤：</strong></h3><p>N/A</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li>缺失数范围公式为[nums[i-1] + 1, nums[i] - 1], 需要一个函数来处理若范围内仅含一个数或多个数的情况</li><li>题目条件lower, upper在数组范围之外，所以不妨<strong>将lower, upper加到数组中</strong>，同一处理，但是由于lower和upper表示缺失数，而数组表示含有数。所以将lower - 1和upper + 1加到数组</li><li><strong>数组可能为空</strong>，要特别处理Line 3</li></ol><h3 id="Python代码："><a href="#Python代码：" class="headerlink" title="Python代码："></a><strong>Python代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findMissingRanges</span><span class="params">(self, nums: List[int], lower: int, upper: int)</span> -&gt; List[str]:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> nums: <span class="comment"># remember</span></span><br><span class="line"><span class="keyword">return</span> [self.get_missing_str(lower, upper)]</span><br><span class="line">res = []</span><br><span class="line">nums.insert(<span class="number">0</span>, lower - <span class="number">1</span>)</span><br><span class="line">nums.append(upper + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line"><span class="comment"># [nums[i-1] + 1, n - 1]</span></span><br><span class="line"><span class="keyword">if</span> nums[i - <span class="number">1</span>] + <span class="number">1</span> &lt;= nums[i] - <span class="number">1</span>:</span><br><span class="line">res.append(self.get_missing_str(nums[i - <span class="number">1</span>] + <span class="number">1</span>, nums[i] - <span class="number">1</span>))</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_missing_str</span><span class="params">(self, start, end)</span>:</span></span><br><span class="line"><span class="keyword">if</span> start == end:</span><br><span class="line"><span class="keyword">return</span> str(start)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> str(start) + <span class="string">'-&gt;'</span> + str(end)</span><br></pre></td></tr></table></figure><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a><strong>算法分析：</strong></h3><p>时间复杂度为<code>O(n)</code>，空间复杂度<code>O(1)</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/missing-ranges/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;br&gt;You
      
    
    </summary>
    
    
  </entry>
  
</feed>
